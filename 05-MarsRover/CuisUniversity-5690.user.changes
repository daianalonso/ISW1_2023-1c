

----QUIT----(14 March 2023 15:31:45) CuisUniversity-5690.image priorSource: 4249317!

----STARTUP---- (14 March 2023 15:31:46) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-5690.image!


----QUIT----(14 March 2023 15:31:46) CuisUniversity-5690.image priorSource: 8648617!

----STARTUP---- (11 May 2023 17:42:04) as C:\Users\daiana\Downloads\windows64\windows64\CuisUniversity-5690.image!


TestCase subclass: #TestsAlignColumns
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'AlignColumns'!

!classDefinition: #TestsAlignColumns category: 'AlignColumns' stamp: 'DA 5/11/2023 17:43:19'!
TestCase subclass: #TestsAlignColumns
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'AlignColumns'!

!classDefinition: #AlignColumns category: 'AlignColumns' stamp: 'DA 5/11/2023 17:49:03'!
Object subclass: #AlignColumns
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'AlignColumns'!
!TestsAlignColumns methodsFor: 'no messages' stamp: 'DA 5/11/2023 17:48:55'!
test01 
	self assert: #() equals: (AlignColumns new align: #()) value! !

!testRun: #TestsAlignColumns #test01 stamp: 'DA 5/11/2023 17:49:54'!
ERROR!
!TestsAlignColumns methodsFor: 'as yet unclassified' stamp: 'DA 5/11/2023 17:50:45' prior: 50601952!
test01 
	self assert: #() equals: (AlignColumns for: #()) value! !

!testRun: #TestsAlignColumns #test01 stamp: 'DA 5/11/2023 17:50:49'!
ERROR!
!AlignColumns class methodsFor: 'category-name' stamp: 'DA 5/11/2023 17:51:05'!
for: aRenameMe1 
	self shouldBeImplemented.! !
!AlignColumns class methodsFor: 'category-name' stamp: 'DA 5/11/2023 17:51:14' prior: 50601967!
for: aRenameMe1 
	self new! !

!testRun: #TestsAlignColumns #test01 stamp: 'DA 5/11/2023 17:51:16'!
FAILURE!
!AlignColumns class methodsFor: 'category-name' stamp: 'DA 5/11/2023 17:51:49' prior: 50601972!
for: aArray
	^self new! !

!testRun: #TestsAlignColumns #test01 stamp: 'DA 5/11/2023 17:52:03'!
FAILURE!
!TestsAlignColumns methodsFor: 'as yet unclassified' stamp: 'DA 5/11/2023 17:52:50'!
test02
	self assert: #('hola') equals: (AlignColumns for: #('hola')) value! !
!AlignColumns class methodsFor: 'category-name' stamp: 'DA 5/11/2023 17:53:53' prior: 50601979!
for: aArray
	^self new initializeWith:aArray ! !

!classDefinition: #AlignColumns category: 'AlignColumns' stamp: 'DA 5/11/2023 17:54:35'!
Object subclass: #AlignColumns
	instanceVariableNames: 'contents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'AlignColumns'!
!AlignColumns methodsFor: 'nil' stamp: 'DA 5/11/2023 17:54:32'!
initializeWith: lines
	contents := lines
! !
!AlignColumns methodsFor: 'as yet unclassified' stamp: 'DA 5/11/2023 17:54:48' overrides: 16902254!
value
	^contents! !

!testRun: #TestsAlignColumns #test02 stamp: 'DA 5/11/2023 17:54:58'!
PASSED!

!testRun: #TestsAlignColumns #test01 stamp: 'DA 5/11/2023 17:54:59'!
PASSED!

!testRun: #TestsAlignColumns #test02 stamp: 'DA 5/11/2023 17:54:59'!
PASSED!

----SNAPSHOT----(11 May 2023 17:55:03) CuisUniversity-5690.image priorSource: 8648842!
!TestsAlignColumns methodsFor: 'as yet unclassified' stamp: 'DA 5/11/2023 17:58:24' prior: 50601985!
test02
	self assert: #(
		#('hola')
		)
	equals: (AlignColumns for: #(
		 #('hola')
		))
	value! !

!testRun: #TestsAlignColumns #test02 stamp: 'DA 5/11/2023 17:58:26'!
PASSED!

!testRun: #TestsAlignColumns #test01 stamp: 'DA 5/11/2023 17:58:26'!
PASSED!

!testRun: #TestsAlignColumns #test02 stamp: 'DA 5/11/2023 17:58:26'!
PASSED!
!TestsAlignColumns methodsFor: 'as yet unclassified' stamp: 'DA 5/11/2023 17:58:53'!
test03
	self assert: #(
		#('hola')
		#('chau')
		)
	equals: (AlignColumns for: #(
		 #('hola')
		#('chau')
		))
	value! !

!testRun: #TestsAlignColumns #test03 stamp: 'DA 5/11/2023 17:58:55'!
PASSED!

!testRun: #TestsAlignColumns #test01 stamp: 'DA 5/11/2023 17:58:55'!
PASSED!

!testRun: #TestsAlignColumns #test02 stamp: 'DA 5/11/2023 17:58:55'!
PASSED!

!testRun: #TestsAlignColumns #test03 stamp: 'DA 5/11/2023 17:58:55'!
PASSED!
!AlignColumns methodsFor: 'as yet unclassified' stamp: 'DA 5/11/2023 18:02:08' prior: 50602007 overrides: 16902254!
value
	contents = #()
		ifTrue:[^#()].
	contents size = 1
	ifTrue: [^ Array with: (contents at: 1)].
	contents size = 2 
	ifTrue: [^ Array with: (contents at: 1) with: (contents at: 1)].! !

!testRun: #TestsAlignColumns #test01 stamp: 'DA 5/11/2023 18:02:12'!
PASSED!

!testRun: #TestsAlignColumns #test02 stamp: 'DA 5/11/2023 18:02:12'!
PASSED!

!testRun: #TestsAlignColumns #test03 stamp: 'DA 5/11/2023 18:02:12'!
FAILURE!

!testRun: #TestsAlignColumns #test03 stamp: 'DA 5/11/2023 18:02:12'!
FAILURE!
!AlignColumns methodsFor: 'as yet unclassified' stamp: 'DA 5/11/2023 18:02:23' prior: 50602053 overrides: 16902254!
value
	contents = #()
		ifTrue:[^#()].
	contents size = 1
	ifTrue: [^ Array with: (contents at: 1)].
	contents size = 2 
	ifTrue: [^ Array with: (contents at: 1) with: (contents at: 2)].! !

!testRun: #TestsAlignColumns #test01 stamp: 'DA 5/11/2023 18:02:24'!
PASSED!

!testRun: #TestsAlignColumns #test02 stamp: 'DA 5/11/2023 18:02:24'!
PASSED!

!testRun: #TestsAlignColumns #test03 stamp: 'DA 5/11/2023 18:02:24'!
PASSED!
!TestsAlignColumns methodsFor: 'as yet unclassified' stamp: 'DA 5/11/2023 18:04:33'!
test04
	self assert: #(
		#('hola')
		#('12  ')
		)
	equals: (AlignColumns for: #(
		 #('hola')
		#('12')
		))
	value! !

!testRun: #TestsAlignColumns #test04 stamp: 'DA 5/11/2023 18:04:35'!
FAILURE!
!TestsAlignColumns methodsFor: 'as yet unclassified' stamp: 'DA 5/11/2023 18:07:20'!
_test05
	self assert: #(
		#('hola')
		#('12  ')
		)
	equals: (AlignColumns for: #(
		 #('hola')
		#('12')
		))
	value! !
!TestsAlignColumns methodsFor: 'as yet unclassified' stamp: 'DA 5/11/2023 18:07:56' prior: 50602089!
test04
	self assert: #(
		#('hola')
		#('chau')
		#('casa')
		)
	equals: (AlignColumns for: #(
		 #('hola')
		#('12')
		#('casa')
		))
	value! !
!AlignColumns methodsFor: 'as yet unclassified' stamp: 'DA 5/11/2023 18:08:55' prior: 50602073 overrides: 16902254!
value
	contents = #()
		ifTrue:[^#()].
	contents size = 1
	ifTrue: [^ Array with: (contents at: 1)].
	contents size = 2 
	ifTrue: [^ Array with: (contents at: 1) with: (contents at: 2)].
	contents size = 3
	ifTrue: [^ Array with: (contents at: 1) with: (contents at: 2) with: (contents at: 3)].
	! !

!testRun: #TestsAlignColumns #test01 stamp: 'DA 5/11/2023 18:08:56'!
PASSED!

!testRun: #TestsAlignColumns #test02 stamp: 'DA 5/11/2023 18:08:56'!
PASSED!

!testRun: #TestsAlignColumns #test03 stamp: 'DA 5/11/2023 18:08:56'!
PASSED!

!testRun: #TestsAlignColumns #test04 stamp: 'DA 5/11/2023 18:08:56'!
FAILURE!

!testRun: #TestsAlignColumns #test04 stamp: 'DA 5/11/2023 18:08:56'!
FAILURE!
!TestsAlignColumns methodsFor: 'as yet unclassified' stamp: 'DA 5/11/2023 18:09:11' prior: 50602105!
test04
	self assert: #(
		#('hola')
		#('chau')
		#('casa')
		)
	equals: (AlignColumns for: #(
		 #('hola')
		#('chau')
		#('casa')
		))
	value! !

!testRun: #TestsAlignColumns #test04 stamp: 'DA 5/11/2023 18:09:12'!
PASSED!

!testRun: #TestsAlignColumns #test01 stamp: 'DA 5/11/2023 18:09:12'!
PASSED!

!testRun: #TestsAlignColumns #test02 stamp: 'DA 5/11/2023 18:09:12'!
PASSED!

!testRun: #TestsAlignColumns #test03 stamp: 'DA 5/11/2023 18:09:12'!
PASSED!

!testRun: #TestsAlignColumns #test04 stamp: 'DA 5/11/2023 18:09:12'!
PASSED!
!AlignColumns methodsFor: 'as yet unclassified' stamp: 'DA 5/11/2023 18:10:56' prior: 50602114 overrides: 16902254!
value
	^contents
	"
	contents = #()
		ifTrue:[^#()].
	contents size = 1
	ifTrue: [^ Array with: (contents at: 1)].
	contents size = 2 
	ifTrue: [^ Array with: (contents at: 1) with: (contents at: 2)].
	contents size = 3
	ifTrue: [^ Array with: (contents at: 1) with: (contents at: 2) with: (contents at: 3)]."
	! !
!TestsAlignColumns methodsFor: 'as yet unclassified' stamp: 'DA 5/11/2023 18:11:38'!
test05
	self assert: #(
		#('hola')
		#('12  ')
		)
	equals: (AlignColumns for: #(
		 #('hola')
		#('12')
		))
	value! !

!testRun: #TestsAlignColumns #test05 stamp: 'DA 5/11/2023 18:11:40'!
FAILURE!

!methodRemoval: TestsAlignColumns #_test05 stamp: 'DA 5/11/2023 18:11:49'!
_test05
	self assert: #(
		#('hola')
		#('12  ')
		)
	equals: (AlignColumns for: #(
		 #('hola')
		#('12')
		))
	value!
!AlignColumns methodsFor: 'as yet unclassified' stamp: 'DA 5/11/2023 18:12:20' prior: 50602160 overrides: 16902254!
value
	"^contents"
	
	contents = #()
		ifTrue:[^#()].
	contents size = 1
	ifTrue: [^ Array with: (contents at: 1)].
	contents size = 2 
	ifTrue: [^ Array with: (contents at: 1) with: (contents at: 2)].
	contents size = 3
	ifTrue: [^ Array with: (contents at: 1) with: (contents at: 2) with: (contents at: 3)].
	! !
!AlignColumns methodsFor: 'as yet unclassified' stamp: 'DA 5/11/2023 18:19:37' prior: 50602189 overrides: 16902254!
value
	
	^contents collect: [:row | (row at: 1) size  < 4
		ifTrue: [^Array with: (row at: 1),'  ']
		ifFalse: [^Array with: (row at: 1).]
		].
	
	"
	contents = #()
		ifTrue:[^#()].
	contents size = 1
	ifTrue: [^ Array with: (contents at: 1)].
	contents size = 2 
	ifTrue: [^ Array with: (contents at: 1) with: (contents at: 2)].
	contents size = 3
	ifTrue: [^ Array with: (contents at: 1) with: (contents at: 2) with: (contents at: 3)]."
	! !
!TestsAlignColumns methodsFor: 'as yet unclassified' stamp: 'DA 5/11/2023 18:19:59'!
test06
	self assert: #(
		#('holas')
		#('12  ')
		)
	equals: (AlignColumns for: #(
		 #('holas')
		#('12')
		))
	value! !

!testRun: #TestsAlignColumns #test06 stamp: 'DA 5/11/2023 18:20:00'!
FAILURE!
!AlignColumns methodsFor: 'as yet unclassified' stamp: 'DA 5/11/2023 18:27:16' prior: 50602203 overrides: 16902254!
value
	
	|firstWordSize|
	contents = #()
		ifTrue:[^#()].
	firstWordSize := ((contents at:1) at:1) size.
	^contents collect: [:row | (row at: 1) size  < 4
		ifTrue: [^Array with: (row at: 1),  (String new: ((firstWordSize - (row at: 1) size)) withAll: $))]
		ifFalse: [^Array with: (row at: 1).]
		].
	
	"
	contents = #()
		ifTrue:[^#()].
	contents size = 1
	ifTrue: [^ Array with: (contents at: 1)].
	contents size = 2 
	ifTrue: [^ Array with: (contents at: 1) with: (contents at: 2)].
	contents size = 3
	ifTrue: [^ Array with: (contents at: 1) with: (contents at: 2) with: (contents at: 3)]."
	! !

!testRun: #TestsAlignColumns #test01 stamp: 'DA 5/11/2023 18:27:22'!
PASSED!

!testRun: #TestsAlignColumns #test02 stamp: 'DA 5/11/2023 18:27:22'!
FAILURE!

!testRun: #TestsAlignColumns #test03 stamp: 'DA 5/11/2023 18:27:22'!
FAILURE!

!testRun: #TestsAlignColumns #test04 stamp: 'DA 5/11/2023 18:27:22'!
FAILURE!

!testRun: #TestsAlignColumns #test05 stamp: 'DA 5/11/2023 18:27:22'!
FAILURE!

!testRun: #TestsAlignColumns #test06 stamp: 'DA 5/11/2023 18:27:22'!
FAILURE!

!testRun: #TestsAlignColumns #test02 stamp: 'DA 5/11/2023 18:27:29'!
FAILURE!
!TestsAlignColumns methodsFor: 'as yet unclassified' stamp: 'DA 5/11/2023 18:28:30'!
test07
	self assert: #(
		#('12 ')
		#('abc')
		)
	equals: (AlignColumns for: #(
		 #('12 ')
		#('abc')
		))
	value! !
!TestsAlignColumns methodsFor: 'as yet unclassified' stamp: 'DA 5/11/2023 18:29:14' prior: 50602269!
test07
	self assert: #(
		#('12 ')
		#('abc')
		)
	equals: (AlignColumns for: #(
		 #('12')
		#('abc')
		))
	value! !
!AlignColumns methodsFor: 'as yet unclassified' stamp: 'DA 5/11/2023 18:29:30' prior: 50602230 overrides: 16902254!
value
	
	|firstWordSize|
	contents = #()
		ifTrue:[^#()].
	firstWordSize := ((contents at:1) at:1) size.
	^contents collect: [:row | (row at: 1) size  < firstWordSize 
		ifTrue: [^Array with: (row at: 1),  (String new: ((firstWordSize - (row at: 1) size)) withAll: $))]
		ifFalse: [^Array with: (row at: 1).]
		].
	
	"
	contents = #()
		ifTrue:[^#()].
	contents size = 1
	ifTrue: [^ Array with: (contents at: 1)].
	contents size = 2 
	ifTrue: [^ Array with: (contents at: 1) with: (contents at: 2)].
	contents size = 3
	ifTrue: [^ Array with: (contents at: 1) with: (contents at: 2) with: (contents at: 3)]."
	! !
!AlignColumns methodsFor: 'as yet unclassified' stamp: 'DA 5/11/2023 18:30:10' prior: 50602284 overrides: 16902254!
value
	
	|firstWordSize secondWordSize |
	contents = #()
		ifTrue:[^#()].
	firstWordSize := ((contents at:1) at:1) size.
	secondWordSize := ((contents at:2) at:1) size.
	
	^contents collect: [:row | (row at: 1) size  < firstWordSize 
		ifTrue: [^Array with: (row at: 1),  (String new: ((firstWordSize - (row at: 1) size)) withAll: $))]
		ifFalse: [^Array with: (row at: 1).]
		].
	
	"
	contents = #()
		ifTrue:[^#()].
	contents size = 1
	ifTrue: [^ Array with: (contents at: 1)].
	contents size = 2 
	ifTrue: [^ Array with: (contents at: 1) with: (contents at: 2)].
	contents size = 3
	ifTrue: [^ Array with: (contents at: 1) with: (contents at: 2) with: (contents at: 3)]."
	! !
!AlignColumns methodsFor: 'as yet unclassified' stamp: 'DA 5/11/2023 18:30:40' prior: 50602307 overrides: 16902254!
value
	
	|firstWordSize secondWordSize maxWordSize |
	contents = #()
		ifTrue:[^#()].
	firstWordSize := ((contents at:1) at:1) size.
	secondWordSize := ((contents at:2) at:1) size.
	
	maxWordSize := firstWordSize max: secondWordSize.
	
	^contents collect: [:row | (row at: 1) size  < firstWordSize 
		ifTrue: [^Array with: (row at: 1),  (String new: ((firstWordSize - (row at: 1) size)) withAll: $))]
		ifFalse: [^Array with: (row at: 1).]
		].
	
	"
	contents = #()
		ifTrue:[^#()].
	contents size = 1
	ifTrue: [^ Array with: (contents at: 1)].
	contents size = 2 
	ifTrue: [^ Array with: (contents at: 1) with: (contents at: 2)].
	contents size = 3
	ifTrue: [^ Array with: (contents at: 1) with: (contents at: 2) with: (contents at: 3)]."
	! !
!AlignColumns methodsFor: 'as yet unclassified' stamp: 'DA 5/11/2023 18:31:03' prior: 50602332 overrides: 16902254!
value
	
	|firstWordSize secondWordSize maxWordSize |
	contents = #()
		ifTrue:[^#()].
	firstWordSize := ((contents at:1) at:1) size.
	secondWordSize := ((contents at:2) at:1) size.
	
	maxWordSize := firstWordSize max: secondWordSize.
	
	^contents collect: [:row | (row at: 1) size  < maxWordSize 
		ifTrue: [^Array with: (row at: 1),  (String new: ((maxWordSize - (row at: 1) size)) withAll: $))]
		ifFalse: [^Array with: (row at: 1).]
		].
	
	"
	contents = #()
		ifTrue:[^#()].
	contents size = 1
	ifTrue: [^ Array with: (contents at: 1)].
	contents size = 2 
	ifTrue: [^ Array with: (contents at: 1) with: (contents at: 2)].
	contents size = 3
	ifTrue: [^ Array with: (contents at: 1) with: (contents at: 2) with: (contents at: 3)]."
	! !

!testRun: #TestsAlignColumns #test01 stamp: 'DA 5/11/2023 18:31:04'!
PASSED!

!testRun: #TestsAlignColumns #test02 stamp: 'DA 5/11/2023 18:31:04'!
ERROR!

!testRun: #TestsAlignColumns #test03 stamp: 'DA 5/11/2023 18:31:04'!
FAILURE!

!testRun: #TestsAlignColumns #test04 stamp: 'DA 5/11/2023 18:31:04'!
FAILURE!

!testRun: #TestsAlignColumns #test05 stamp: 'DA 5/11/2023 18:31:04'!
FAILURE!

!testRun: #TestsAlignColumns #test06 stamp: 'DA 5/11/2023 18:31:04'!
FAILURE!

!testRun: #TestsAlignColumns #test07 stamp: 'DA 5/11/2023 18:31:04'!
FAILURE!
!TestsAlignColumns methodsFor: 'as yet unclassified' stamp: 'DA 5/11/2023 18:34:30'!
test08
	self assert: #(
		#('12   ')
		#('abc  ')
		#('perro')
		)
	equals: (AlignColumns for: #(
		 #('12')
		#('abc')
		#('perro')
		))
	value! !
!AlignColumns methodsFor: 'as yet unclassified' stamp: 'DA 5/11/2023 18:43:55' prior: 50602359 overrides: 16902254!
value
	
	|firstWordSize secondWordSize maxWordSize |
	contents = #()
		ifTrue:[^#()].
	
	^contents collect: [:row | (row at: 1) size  < self maxWordSize 
		ifTrue: [^Array with: (row at: 1),  (String new: ((self maxWordSize - (row at: 1) size)) withAll: $))]
		ifFalse: [^Array with: (row at: 1).]
		].
	
	"
	contents = #()
		ifTrue:[^#()].
	contents size = 1
	ifTrue: [^ Array with: (contents at: 1)].
	contents size = 2 
	ifTrue: [^ Array with: (contents at: 1) with: (contents at: 2)].
	contents size = 3
	ifTrue: [^ Array with: (contents at: 1) with: (contents at: 2) with: (contents at: 3)]."
	! !
!AlignColumns methodsFor: 'as yet unclassified' stamp: 'DA 5/11/2023 18:44:11' prior: 50602411 overrides: 16902254!
value
	contents = #()
		ifTrue:[^#()].
	
	^contents collect: [:row | (row at: 1) size  < self maxWordSize 
		ifTrue: [^Array with: (row at: 1),  (String new: ((self maxWordSize - (row at: 1) size)) withAll: $))]
		ifFalse: [^Array with: (row at: 1).]
		].
	
	"
	contents = #()
		ifTrue:[^#()].
	contents size = 1
	ifTrue: [^ Array with: (contents at: 1)].
	contents size = 2 
	ifTrue: [^ Array with: (contents at: 1) with: (contents at: 2)].
	contents size = 3
	ifTrue: [^ Array with: (contents at: 1) with: (contents at: 2) with: (contents at: 3)]."
	! !

!testRun: #TestsAlignColumns #test01 stamp: 'DA 5/11/2023 18:44:14'!
PASSED!

!testRun: #TestsAlignColumns #test02 stamp: 'DA 5/11/2023 18:44:14'!
ERROR!

!testRun: #TestsAlignColumns #test03 stamp: 'DA 5/11/2023 18:44:14'!
ERROR!

!testRun: #TestsAlignColumns #test04 stamp: 'DA 5/11/2023 18:44:14'!
ERROR!

!testRun: #TestsAlignColumns #test05 stamp: 'DA 5/11/2023 18:44:14'!
ERROR!

!testRun: #TestsAlignColumns #test06 stamp: 'DA 5/11/2023 18:44:14'!
ERROR!

!testRun: #TestsAlignColumns #test07 stamp: 'DA 5/11/2023 18:44:14'!
ERROR!

!testRun: #TestsAlignColumns #test08 stamp: 'DA 5/11/2023 18:44:14'!
ERROR!

!testRun: #TestsAlignColumns #test02 stamp: 'DA 5/11/2023 18:44:17'!
ERROR!
!AlignColumns methodsFor: 'as yet unclassified' stamp: 'DA 5/11/2023 18:44:25'!
maxWordSize
	self shouldBeImplemented.! !

----STARTUP---- (11 May 2023 18:45:43) as C:\Users\daiana\Downloads\windows64\windows64\CuisUniversity-5690.image!

!AlignColumns methodsFor: 'as yet unclassified' stamp: 'DA 5/11/2023 18:30:40' prior: 50602007 overrides: 16902254!
value
	
	|firstWordSize secondWordSize maxWordSize |
	contents = #()
		ifTrue:[^#()].
	firstWordSize := ((contents at:1) at:1) size.
	secondWordSize := ((contents at:2) at:1) size.
	
	maxWordSize := firstWordSize max: secondWordSize.
	
	^contents collect: [:row | (row at: 1) size  < firstWordSize 
		ifTrue: [^Array with: (row at: 1),  (String new: ((firstWordSize - (row at: 1) size)) withAll: $))]
		ifFalse: [^Array with: (row at: 1).]
		].
	
	"
	contents = #()
		ifTrue:[^#()].
	contents size = 1
	ifTrue: [^ Array with: (contents at: 1)].
	contents size = 2 
	ifTrue: [^ Array with: (contents at: 1) with: (contents at: 2)].
	contents size = 3
	ifTrue: [^ Array with: (contents at: 1) with: (contents at: 2) with: (contents at: 3)]."
	! !
!AlignColumns methodsFor: 'as yet unclassified' stamp: 'DA 5/11/2023 18:31:03' prior: 50602485 overrides: 16902254!
value
	
	|firstWordSize secondWordSize maxWordSize |
	contents = #()
		ifTrue:[^#()].
	firstWordSize := ((contents at:1) at:1) size.
	secondWordSize := ((contents at:2) at:1) size.
	
	maxWordSize := firstWordSize max: secondWordSize.
	
	^contents collect: [:row | (row at: 1) size  < maxWordSize 
		ifTrue: [^Array with: (row at: 1),  (String new: ((maxWordSize - (row at: 1) size)) withAll: $))]
		ifFalse: [^Array with: (row at: 1).]
		].
	
	"
	contents = #()
		ifTrue:[^#()].
	contents size = 1
	ifTrue: [^ Array with: (contents at: 1)].
	contents size = 2 
	ifTrue: [^ Array with: (contents at: 1) with: (contents at: 2)].
	contents size = 3
	ifTrue: [^ Array with: (contents at: 1) with: (contents at: 2) with: (contents at: 3)]."
	! !
!TestsAlignColumns methodsFor: 'as yet unclassified' stamp: 'DA 5/11/2023 17:58:24' prior: 50601985!
test02
	self assert: #(
		#('hola')
		)
	equals: (AlignColumns for: #(
		 #('hola')
		))
	value! !
!TestsAlignColumns methodsFor: 'as yet unclassified' stamp: 'DA 5/11/2023 17:58:53'!
test03
	self assert: #(
		#('hola')
		#('chau')
		)
	equals: (AlignColumns for: #(
		 #('hola')
		#('chau')
		))
	value! !
!AlignColumns methodsFor: 'as yet unclassified' stamp: 'DA 5/11/2023 18:02:08' prior: 50602512 overrides: 16902254!
value
	contents = #()
		ifTrue:[^#()].
	contents size = 1
	ifTrue: [^ Array with: (contents at: 1)].
	contents size = 2 
	ifTrue: [^ Array with: (contents at: 1) with: (contents at: 1)].! !
!AlignColumns methodsFor: 'as yet unclassified' stamp: 'DA 5/11/2023 18:02:23' prior: 50602553 overrides: 16902254!
value
	contents = #()
		ifTrue:[^#()].
	contents size = 1
	ifTrue: [^ Array with: (contents at: 1)].
	contents size = 2 
	ifTrue: [^ Array with: (contents at: 1) with: (contents at: 2)].! !
!TestsAlignColumns methodsFor: 'as yet unclassified' stamp: 'DA 5/11/2023 18:04:33'!
test04
	self assert: #(
		#('hola')
		#('12  ')
		)
	equals: (AlignColumns for: #(
		 #('hola')
		#('12')
		))
	value! !
!TestsAlignColumns methodsFor: 'as yet unclassified' stamp: 'DA 5/11/2023 18:07:20'!
_test05
	self assert: #(
		#('hola')
		#('12  ')
		)
	equals: (AlignColumns for: #(
		 #('hola')
		#('12')
		))
	value! !
!TestsAlignColumns methodsFor: 'as yet unclassified' stamp: 'DA 5/11/2023 18:07:56' prior: 50602572!
test04
	self assert: #(
		#('hola')
		#('chau')
		#('casa')
		)
	equals: (AlignColumns for: #(
		 #('hola')
		#('12')
		#('casa')
		))
	value! !
!AlignColumns methodsFor: 'as yet unclassified' stamp: 'DA 5/11/2023 18:08:55' prior: 50602563 overrides: 16902254!
value
	contents = #()
		ifTrue:[^#()].
	contents size = 1
	ifTrue: [^ Array with: (contents at: 1)].
	contents size = 2 
	ifTrue: [^ Array with: (contents at: 1) with: (contents at: 2)].
	contents size = 3
	ifTrue: [^ Array with: (contents at: 1) with: (contents at: 2) with: (contents at: 3)].
	! !
!TestsAlignColumns methodsFor: 'as yet unclassified' stamp: 'DA 5/11/2023 18:09:11' prior: 50602586!
test04
	self assert: #(
		#('hola')
		#('chau')
		#('casa')
		)
	equals: (AlignColumns for: #(
		 #('hola')
		#('chau')
		#('casa')
		))
	value! !
!AlignColumns methodsFor: 'as yet unclassified' stamp: 'DA 5/11/2023 18:10:56' prior: 50602595 overrides: 16902254!
value
	^contents
	"
	contents = #()
		ifTrue:[^#()].
	contents size = 1
	ifTrue: [^ Array with: (contents at: 1)].
	contents size = 2 
	ifTrue: [^ Array with: (contents at: 1) with: (contents at: 2)].
	contents size = 3
	ifTrue: [^ Array with: (contents at: 1) with: (contents at: 2) with: (contents at: 3)]."
	! !
!TestsAlignColumns methodsFor: 'as yet unclassified' stamp: 'DA 5/11/2023 18:11:38'!
test05
	self assert: #(
		#('hola')
		#('12  ')
		)
	equals: (AlignColumns for: #(
		 #('hola')
		#('12')
		))
	value! !

!methodRemoval: TestsAlignColumns #_test05 stamp: 'DA 5/11/2023 18:46:59'!
_test05
	self assert: #(
		#('hola')
		#('12  ')
		)
	equals: (AlignColumns for: #(
		 #('hola')
		#('12')
		))
	value!
!AlignColumns methodsFor: 'as yet unclassified' stamp: 'DA 5/11/2023 18:12:20' prior: 50602617 overrides: 16902254!
value
	"^contents"
	
	contents = #()
		ifTrue:[^#()].
	contents size = 1
	ifTrue: [^ Array with: (contents at: 1)].
	contents size = 2 
	ifTrue: [^ Array with: (contents at: 1) with: (contents at: 2)].
	contents size = 3
	ifTrue: [^ Array with: (contents at: 1) with: (contents at: 2) with: (contents at: 3)].
	! !
!AlignColumns methodsFor: 'as yet unclassified' stamp: 'DA 5/11/2023 18:19:37' prior: 50602644 overrides: 16902254!
value
	
	^contents collect: [:row | (row at: 1) size  < 4
		ifTrue: [^Array with: (row at: 1),'  ']
		ifFalse: [^Array with: (row at: 1).]
		].
	
	"
	contents = #()
		ifTrue:[^#()].
	contents size = 1
	ifTrue: [^ Array with: (contents at: 1)].
	contents size = 2 
	ifTrue: [^ Array with: (contents at: 1) with: (contents at: 2)].
	contents size = 3
	ifTrue: [^ Array with: (contents at: 1) with: (contents at: 2) with: (contents at: 3)]."
	! !
!TestsAlignColumns methodsFor: 'as yet unclassified' stamp: 'DA 5/11/2023 18:19:59'!
test06
	self assert: #(
		#('holas')
		#('12  ')
		)
	equals: (AlignColumns for: #(
		 #('holas')
		#('12')
		))
	value! !
!AlignColumns methodsFor: 'as yet unclassified' stamp: 'DA 5/11/2023 18:27:16' prior: 50602658 overrides: 16902254!
value
	
	|firstWordSize|
	contents = #()
		ifTrue:[^#()].
	firstWordSize := ((contents at:1) at:1) size.
	^contents collect: [:row | (row at: 1) size  < 4
		ifTrue: [^Array with: (row at: 1),  (String new: ((firstWordSize - (row at: 1) size)) withAll: $))]
		ifFalse: [^Array with: (row at: 1).]
		].
	
	"
	contents = #()
		ifTrue:[^#()].
	contents size = 1
	ifTrue: [^ Array with: (contents at: 1)].
	contents size = 2 
	ifTrue: [^ Array with: (contents at: 1) with: (contents at: 2)].
	contents size = 3
	ifTrue: [^ Array with: (contents at: 1) with: (contents at: 2) with: (contents at: 3)]."
	! !
!TestsAlignColumns methodsFor: 'as yet unclassified' stamp: 'DA 5/11/2023 18:28:30'!
test07
	self assert: #(
		#('12 ')
		#('abc')
		)
	equals: (AlignColumns for: #(
		 #('12 ')
		#('abc')
		))
	value! !
!TestsAlignColumns methodsFor: 'as yet unclassified' stamp: 'DA 5/11/2023 18:29:14' prior: 50602705!
test07
	self assert: #(
		#('12 ')
		#('abc')
		)
	equals: (AlignColumns for: #(
		 #('12')
		#('abc')
		))
	value! !
!AlignColumns methodsFor: 'as yet unclassified' stamp: 'DA 5/11/2023 18:29:30' prior: 50602683 overrides: 16902254!
value
	
	|firstWordSize|
	contents = #()
		ifTrue:[^#()].
	firstWordSize := ((contents at:1) at:1) size.
	^contents collect: [:row | (row at: 1) size  < firstWordSize 
		ifTrue: [^Array with: (row at: 1),  (String new: ((firstWordSize - (row at: 1) size)) withAll: $))]
		ifFalse: [^Array with: (row at: 1).]
		].
	
	"
	contents = #()
		ifTrue:[^#()].
	contents size = 1
	ifTrue: [^ Array with: (contents at: 1)].
	contents size = 2 
	ifTrue: [^ Array with: (contents at: 1) with: (contents at: 2)].
	contents size = 3
	ifTrue: [^ Array with: (contents at: 1) with: (contents at: 2) with: (contents at: 3)]."
	! !
!AlignColumns methodsFor: 'as yet unclassified' stamp: 'DA 5/11/2023 18:30:10' prior: 50602720 overrides: 16902254!
value
	
	|firstWordSize secondWordSize |
	contents = #()
		ifTrue:[^#()].
	firstWordSize := ((contents at:1) at:1) size.
	secondWordSize := ((contents at:2) at:1) size.
	
	^contents collect: [:row | (row at: 1) size  < firstWordSize 
		ifTrue: [^Array with: (row at: 1),  (String new: ((firstWordSize - (row at: 1) size)) withAll: $))]
		ifFalse: [^Array with: (row at: 1).]
		].
	
	"
	contents = #()
		ifTrue:[^#()].
	contents size = 1
	ifTrue: [^ Array with: (contents at: 1)].
	contents size = 2 
	ifTrue: [^ Array with: (contents at: 1) with: (contents at: 2)].
	contents size = 3
	ifTrue: [^ Array with: (contents at: 1) with: (contents at: 2) with: (contents at: 3)]."
	! !
!AlignColumns methodsFor: 'as yet unclassified' stamp: 'DA 5/11/2023 18:30:40' prior: 50602743 overrides: 16902254!
value
	
	|firstWordSize secondWordSize maxWordSize |
	contents = #()
		ifTrue:[^#()].
	firstWordSize := ((contents at:1) at:1) size.
	secondWordSize := ((contents at:2) at:1) size.
	
	maxWordSize := firstWordSize max: secondWordSize.
	
	^contents collect: [:row | (row at: 1) size  < firstWordSize 
		ifTrue: [^Array with: (row at: 1),  (String new: ((firstWordSize - (row at: 1) size)) withAll: $))]
		ifFalse: [^Array with: (row at: 1).]
		].
	
	"
	contents = #()
		ifTrue:[^#()].
	contents size = 1
	ifTrue: [^ Array with: (contents at: 1)].
	contents size = 2 
	ifTrue: [^ Array with: (contents at: 1) with: (contents at: 2)].
	contents size = 3
	ifTrue: [^ Array with: (contents at: 1) with: (contents at: 2) with: (contents at: 3)]."
	! !
!AlignColumns methodsFor: 'as yet unclassified' stamp: 'DA 5/11/2023 18:31:03' prior: 50602768 overrides: 16902254!
value
	
	|firstWordSize secondWordSize maxWordSize |
	contents = #()
		ifTrue:[^#()].
	firstWordSize := ((contents at:1) at:1) size.
	secondWordSize := ((contents at:2) at:1) size.
	
	maxWordSize := firstWordSize max: secondWordSize.
	
	^contents collect: [:row | (row at: 1) size  < maxWordSize 
		ifTrue: [^Array with: (row at: 1),  (String new: ((maxWordSize - (row at: 1) size)) withAll: $))]
		ifFalse: [^Array with: (row at: 1).]
		].
	
	"
	contents = #()
		ifTrue:[^#()].
	contents size = 1
	ifTrue: [^ Array with: (contents at: 1)].
	contents size = 2 
	ifTrue: [^ Array with: (contents at: 1) with: (contents at: 2)].
	contents size = 3
	ifTrue: [^ Array with: (contents at: 1) with: (contents at: 2) with: (contents at: 3)]."
	! !
!TestsAlignColumns methodsFor: 'as yet unclassified' stamp: 'DA 5/11/2023 18:34:30'!
test08
	self assert: #(
		#('12   ')
		#('abc  ')
		#('perro')
		)
	equals: (AlignColumns for: #(
		 #('12')
		#('abc')
		#('perro')
		))
	value! !
!AlignColumns methodsFor: 'as yet unclassified' stamp: 'DA 5/11/2023 18:43:55' prior: 50602795 overrides: 16902254!
value
	
	|firstWordSize secondWordSize maxWordSize |
	contents = #()
		ifTrue:[^#()].
	
	^contents collect: [:row | (row at: 1) size  < self maxWordSize 
		ifTrue: [^Array with: (row at: 1),  (String new: ((self maxWordSize - (row at: 1) size)) withAll: $))]
		ifFalse: [^Array with: (row at: 1).]
		].
	
	"
	contents = #()
		ifTrue:[^#()].
	contents size = 1
	ifTrue: [^ Array with: (contents at: 1)].
	contents size = 2 
	ifTrue: [^ Array with: (contents at: 1) with: (contents at: 2)].
	contents size = 3
	ifTrue: [^ Array with: (contents at: 1) with: (contents at: 2) with: (contents at: 3)]."
	! !
!AlignColumns methodsFor: 'as yet unclassified' stamp: 'DA 5/11/2023 18:44:11' prior: 50602830 overrides: 16902254!
value
	contents = #()
		ifTrue:[^#()].
	
	^contents collect: [:row | (row at: 1) size  < self maxWordSize 
		ifTrue: [^Array with: (row at: 1),  (String new: ((self maxWordSize - (row at: 1) size)) withAll: $))]
		ifFalse: [^Array with: (row at: 1).]
		].
	
	"
	contents = #()
		ifTrue:[^#()].
	contents size = 1
	ifTrue: [^ Array with: (contents at: 1)].
	contents size = 2 
	ifTrue: [^ Array with: (contents at: 1) with: (contents at: 2)].
	contents size = 3
	ifTrue: [^ Array with: (contents at: 1) with: (contents at: 2) with: (contents at: 3)]."
	! !
!TestsAlignColumns methodsFor: 'as yet unclassified' stamp: 'DA 5/11/2023 18:50:11'!
test09
	self assert: #(
		#('12 ' '1234')
		#('abc' 'ab  ')
		)
	equals: (AlignColumns for: #(
		#('12' '1234')
		#('abc' 'ab')
		))
	value! !
!AlignColumns methodsFor: 'as yet unclassified' stamp: 'DA 5/11/2023 18:31:03' prior: 50602853 overrides: 16902254!
value
	
	|firstWordSize secondWordSize maxWordSize |
	contents = #()
		ifTrue:[^#()].
	firstWordSize := ((contents at:1) at:1) size.
	secondWordSize := ((contents at:2) at:1) size.
	
	maxWordSize := firstWordSize max: secondWordSize.
	
	^contents collect: [:row | (row at: 1) size  < maxWordSize 
		ifTrue: [^Array with: (row at: 1),  (String new: ((maxWordSize - (row at: 1) size)) withAll: $))]
		ifFalse: [^Array with: (row at: 1).]
		].
	
	"
	contents = #()
		ifTrue:[^#()].
	contents size = 1
	ifTrue: [^ Array with: (contents at: 1)].
	contents size = 2 
	ifTrue: [^ Array with: (contents at: 1) with: (contents at: 2)].
	contents size = 3
	ifTrue: [^ Array with: (contents at: 1) with: (contents at: 2) with: (contents at: 3)]."
	! !
!AlignColumns methodsFor: 'as yet unclassified' stamp: 'DA 5/11/2023 18:31:03' prior: 50602883 overrides: 16902254!
value
	
	|firstWordSize secondWordSize maxWordSize |
	contents = #()
		ifTrue:[^#()].
	firstWordSize := ((contents at:1) at:1) size.
	secondWordSize := ((contents at:2) at:1) size.
	
	maxWordSize := firstWordSize max: secondWordSize.
	
	^contents collect: [:row | (row at: 1) size  < maxWordSize 
		ifTrue: [^Array with: (row at: 1),  (String new: ((maxWordSize - (row at: 1) size)) withAll: $))]
		ifFalse: [^Array with: (row at: 1).]
		].
	
	"
	contents = #()
		ifTrue:[^#()].
	contents size = 1
	ifTrue: [^ Array with: (contents at: 1)].
	contents size = 2 
	ifTrue: [^ Array with: (contents at: 1) with: (contents at: 2)].
	contents size = 3
	ifTrue: [^ Array with: (contents at: 1) with: (contents at: 2) with: (contents at: 3)]."
	! !
!AlignColumns methodsFor: 'as yet unclassified' stamp: 'DA 5/11/2023 18:31:03' prior: 50602910 overrides: 16902254!
value
	
	|firstWordSize secondWordSize maxWordSize |
	contents = #()
		ifTrue:[^#()].
	firstWordSize := ((contents at:1) at:1) size.
	secondWordSize := ((contents at:2) at:1) size.
	
	maxWordSize := firstWordSize max: secondWordSize.
	
	^contents collect: [:row | (row at: 1) size  < maxWordSize 
		ifTrue: [^Array with: (row at: 1),  (String new: ((maxWordSize - (row at: 1) size)) withAll: $))]
		ifFalse: [^Array with: (row at: 1).]
		].
	
	"
	contents = #()
		ifTrue:[^#()].
	contents size = 1
	ifTrue: [^ Array with: (contents at: 1)].
	contents size = 2 
	ifTrue: [^ Array with: (contents at: 1) with: (contents at: 2)].
	contents size = 3
	ifTrue: [^ Array with: (contents at: 1) with: (contents at: 2) with: (contents at: 3)]."
	! !
!AlignColumns methodsFor: 'as yet unclassified' stamp: 'DA 5/11/2023 18:31:03' prior: 50602937 overrides: 16902254!
value
	
	|firstWordSize secondWordSize maxWordSize |
	contents = #()
		ifTrue:[^#()].
	firstWordSize := ((contents at:1) at:1) size.
	secondWordSize := ((contents at:2) at:1) size.
	
	maxWordSize := firstWordSize max: secondWordSize.
	
	^contents collect: [:row | (row at: 1) size  < maxWordSize 
		ifTrue: [^Array with: (row at: 1),  (String new: ((maxWordSize - (row at: 1) size)) withAll: $))]
		ifFalse: [^Array with: (row at: 1).]
		].
	
	"
	contents = #()
		ifTrue:[^#()].
	contents size = 1
	ifTrue: [^ Array with: (contents at: 1)].
	contents size = 2 
	ifTrue: [^ Array with: (contents at: 1) with: (contents at: 2)].
	contents size = 3
	ifTrue: [^ Array with: (contents at: 1) with: (contents at: 2) with: (contents at: 3)]."
	! !

----SNAPSHOT----(11 May 2023 18:58:05) CuisUniversity-5690.image priorSource: 8651741!
!TestsAlignColumns methodsFor: 'as yet unclassified' stamp: 'DA 5/11/2023 19:03:13' prior: 50602874!
test09
	self assert: #(
		#('12  ' '1234')
		#('abcd' 'ab  ')
		)
	equals: (AlignColumns for: #(
		#('12' '1234')
		#('abcd' 'ab')
		))
	value! !
!TestsAlignColumns methodsFor: 'as yet unclassified' stamp: 'DA 5/11/2023 19:03:29'!
test10
	self assert: #(
		#('12  ' '1234')
		#('abc' 'ab  ')
		)
	equals: (AlignColumns for: #(
		#('12' '1234')
		#('abc' 'ab')
		))
	value! !
!AlignColumns methodsFor: 'nil' stamp: 'DA 5/11/2023 19:05:21'!
maxWordSizeFor: columnNumber! !
!TestsAlignColumns methodsFor: 'as yet unclassified' stamp: 'DA 5/11/2023 19:12:25'!
test11
	self assert: #(
		#('12    ' '1234  ' 'homero')
		#('abc ' 'ab   ' 'lisa')
		)
	equals: (AlignColumns for: #(
		#('12' '1234' 'homero')
		#('abc' 'ab' 'lisa')
		))
	value! !

TestCase subclass: #TestMarsRover
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: ''!

!classDefinition: #TestMarsRover category: '' stamp: 'DA 5/11/2023 20:45:29'!
TestCase subclass: #TestMarsRover
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: ''!

TestCase subclass: #TestMarsRover
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #TestMarsRover category: 'MarsRover' stamp: 'DA 5/11/2023 20:45:43'!
TestCase subclass: #TestMarsRover
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

TestCase subclass: #TestMarsRover
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Mars Rover'!

!classDefinition: #TestMarsRover category: 'Mars Rover' stamp: 'DA 5/11/2023 20:46:26'!
TestCase subclass: #TestMarsRover
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Mars Rover'!

----STARTUP---- (11 May 2023 20:46:38) as C:\Users\daiana\Downloads\windows64\windows64\CuisUniversity-5690.image!


TestCase subclass: #TestsMarsRover
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Mars Rover'!

!classDefinition: #TestsMarsRover category: 'Mars Rover' stamp: 'DA 5/11/2023 20:47:17'!
TestCase subclass: #TestsMarsRover
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Mars Rover'!

Object subclass: #MarsRover
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Mars Rover'!

!classDefinition: #MarsRover category: 'Mars Rover' stamp: 'DA 5/11/2023 20:49:28'!
Object subclass: #MarsRover
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Mars Rover'!

Object subclass: #MarsRover
	instanceVariableNames: 'x y'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Mars Rover'!

!classDefinition: #MarsRover category: 'Mars Rover' stamp: 'DA 5/11/2023 20:50:09'!
Object subclass: #MarsRover
	instanceVariableNames: 'x y'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Mars Rover'!

Object subclass: #MarsRover
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Mars Rover'!

!classDefinition: #MarsRover category: 'Mars Rover' stamp: 'DA 5/11/2023 20:52:10'!
Object subclass: #MarsRover
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Mars Rover'!
!TestsMarsRover methodsFor: 'no messages' stamp: 'DA 5/11/2023 21:07:56'!
test01
	|marsRover|
	marsRover := MarsRover startOn: 1@1 facing: #N.
	self assert: marsRover actualPosition equals: 1@1.
	self assert: marsRover facing equals: #N.! !
!TestsMarsRover methodsFor: 'as yet unclassified' stamp: 'DA 5/11/2023 21:14:45' prior: 50603100!
test01
	|marsRover|
	marsRover := MarsRover startOn: 1@1 facing: #Norte.
	self assert: marsRover actualPosition equals: 1@1.
	self assert: marsRover facing equals: #Norte.! !
!TestsMarsRover methodsFor: 'as yet unclassified' stamp: 'DA 5/11/2023 21:26:44' prior: 50603109!
test01
	|marsRover|
	
	marsRover := MarsRover startOn: 1@1 facing: #Norte.
	
	self assert: marsRover hasPosition: 1@1 facing: #Norte.! !
!TestsMarsRover methodsFor: 'as yet unclassified' stamp: 'DA 5/11/2023 21:35:02'!
test02
	"Si lee el comando vacio se queda en el lugar"
	|marsRover|
	
	marsRover := MarsRover startOn: 1@1 facing: #Norte.
	
	marsRover readCommands: ''.
	
	self assert: marsRover hasPosition: 1@1 facing: #Norte.! !
!TestsMarsRover methodsFor: 'as yet unclassified' stamp: 'DA 5/11/2023 21:35:35' prior: 50603118!
test01
	"Inicializar el objeto completo"
	|marsRover|
	
	marsRover := MarsRover startOn: 1@1 facing: #Norte.
	
	self assert: marsRover hasPosition: 1@1 facing: #Norte.! !

----SNAPSHOT----(11 May 2023 21:36:32) CuisUniversity-5690.image priorSource: 8682852!
!TestsMarsRover methodsFor: 'as yet unclassified' stamp: 'DA 5/11/2023 21:55:11' prior: 50603125!
test02
	"Si lee el comando vacio se queda en el lugar"
	|marsRover|
	
	marsRover := MarsRover startOn: 1@1 facing: #Norte.
	
	"Primera implementacion de read commands no hace nada (metodo vacio)"
	marsRover readCommands: ''.
	
	self assert: marsRover hasPosition: 1@1 facing: #Norte.
	"Norte es subclase de Direccion (state)"! !

----SNAPSHOT----(11 May 2023 21:55:14) CuisUniversity-5690.image priorSource: 8687754!

----QUIT----(11 May 2023 21:57:28) CuisUniversity-5690.image priorSource: 8688296!

----STARTUP---- (12 May 2023 18:37:17) as C:\Users\daiana\Downloads\windows64\windows64\CuisUniversity-5690.image!

!TestsMarsRover methodsFor: 'as yet unclassified' stamp: 'DA 5/12/2023 18:42:15'!
test01SuccessfullLanding

	|marsRover|
	
	marsRover := MarsRover startOn: 1@1 facing: #Norte.
	
	self assert: marsRover hasPosition: 1@1 facing: #Norte.! !

!methodRemoval: TestsMarsRover #test01 stamp: 'DA 5/12/2023 18:42:23'!
test01
	"Inicializar el objeto completo"
	|marsRover|
	
	marsRover := MarsRover startOn: 1@1 facing: #Norte.
	
	self assert: marsRover hasPosition: 1@1 facing: #Norte.!

!testRun: #TestsMarsRover #test01SuccessfullLanding stamp: 'DA 5/12/2023 18:42:27'!
ERROR!
!MarsRover class methodsFor: 'instance creation' stamp: 'DA 5/12/2023 18:42:36'!
startOn: aPoint facing: aSymbol 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeStartOn: aPoint facing: aSymbol ! !
!MarsRover class methodsFor: 'instance creation' stamp: 'DA 5/12/2023 18:43:23' prior: 50603187!
startOn: aPoint facing: orientation 
	^self new initializeStartOn: aPoint facing: orientation ! !

!testRun: #TestsMarsRover #test01SuccessfullLanding stamp: 'DA 5/12/2023 18:43:26'!
ERROR!

!classDefinition: #MarsRover category: 'Mars Rover' stamp: 'DA 5/12/2023 18:43:51'!
Object subclass: #MarsRover
	instanceVariableNames: 'point'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Mars Rover'!

!classDefinition: #MarsRover category: 'Mars Rover' stamp: 'DA 5/12/2023 18:43:51'!
Object subclass: #MarsRover
	instanceVariableNames: 'point orientation_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Mars Rover'!
!MarsRover methodsFor: 'instance creation' stamp: 'DA 5/12/2023 18:43:51'!
initializeStartOn: aPoint facing: orientation 
	self shouldBeImplemented.
	point := aPoint.
	orientation_CHANGE_ME := orientation.! !

!classDefinition: #MarsRover category: 'Mars Rover' stamp: 'DA 5/12/2023 18:45:36'!
Object subclass: #MarsRover
	instanceVariableNames: 'point orientation_CHANGE_ME facing'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Mars Rover'!
!MarsRover methodsFor: 'instance creation' stamp: 'DA 5/12/2023 18:45:33' prior: 50603219!
initializeStartOn: aPoint facing: anOrientation 
	point := aPoint.
	facing := anOrientation.! !

!testRun: #TestsMarsRover #test01SuccessfullLanding stamp: 'DA 5/12/2023 18:45:41'!
ERROR!
!TestsMarsRover methodsFor: 'as yet unclassified' stamp: 'DA 5/12/2023 18:45:53'!
assert: marsRover hasPosition: aRenameMe1 facing: aRenameMe2 
	self shouldBeImplemented.! !
!TestsMarsRover methodsFor: 'as yet unclassified' stamp: 'DA 5/12/2023 18:47:33' prior: 50603243!
assert: marsRover hasPosition: aPoint facing: anOrientation
	^ (marsRover point equals: aPoint) and: (marsRover facing equals: anOrientation)
	! !
!TestsMarsRover methodsFor: 'as yet unclassified' stamp: 'DA 5/12/2023 18:49:46' prior: 50603249!
assert: marsRover hasPosition: aPoint facing: anOrientation
	^ (marsRover actualPosition equals: aPoint) and: (marsRover isFacingTo: anOrientation)
	! !

!testRun: #TestsMarsRover #test01SuccessfullLanding stamp: 'DA 5/12/2023 18:50:42'!
ERROR!
!MarsRover methodsFor: 'accessing' stamp: 'DA 5/12/2023 18:50:48'!
actualPosition
	self shouldBeImplemented.! !
!MarsRover methodsFor: 'accessing' stamp: 'DA 5/12/2023 18:50:56' prior: 50603267!
actualPosition
	^ point! !

!testRun: #TestsMarsRover #test01SuccessfullLanding stamp: 'DA 5/12/2023 18:51:01'!
ERROR!

----End fileIn of C:\Users\daiana\Downloads\windows64\windows64\Packages\TerseGuide.pck.st----!
!TestsMarsRover methodsFor: 'as yet unclassified' stamp: 'DA 5/12/2023 18:53:03' prior: 50603257!
assert: marsRover hasPosition: aPoint facing: anOrientation
	^ (marsRover isActualPosition: aPoint ) and: (marsRover isFacingTo: anOrientation)
	! !

!testRun: #TestsMarsRover #test01SuccessfullLanding stamp: 'DA 5/12/2023 18:53:07'!
ERROR!

!testRun: #TestsMarsRover #test02 stamp: 'DA 5/12/2023 18:53:08'!
ERROR!

!testRun: #TestsMarsRover #test01SuccessfullLanding stamp: 'DA 5/12/2023 18:53:10'!
ERROR!
!MarsRover methodsFor: 'comparing' stamp: 'DA 5/12/2023 18:53:21'!
isActualPosition: aPoint 
	self shouldBeImplemented.! !
!MarsRover methodsFor: 'comparing' stamp: 'DA 5/12/2023 18:54:46' prior: 50606213!
isActualPosition: aPoint 
	^ (point x = aPoint x) and: (point y = aPoint y) ! !

!testRun: #TestsMarsRover #test01SuccessfullLanding stamp: 'DA 5/12/2023 18:54:47'!
ERROR!
!MarsRover methodsFor: 'comparing' stamp: 'DA 5/12/2023 18:54:54'!
isFacingTo: anOrientation 
	self shouldBeImplemented.! !
!MarsRover methodsFor: 'comparing' stamp: 'DA 5/12/2023 18:55:11' prior: 50606226!
isFacingTo: anOrientation 
	^ facing = anOrientation! !

!testRun: #TestsMarsRover #test01SuccessfullLanding stamp: 'DA 5/12/2023 18:55:13'!
PASSED!

!methodRemoval: MarsRover #actualPosition stamp: 'DA 5/12/2023 18:55:38'!
actualPosition
	^ point!

----SNAPSHOT----(12 May 2023 18:55:51) CuisUniversity-5690.image priorSource: 8688384!
!TestsMarsRover methodsFor: 'as yet unclassified' stamp: 'DA 5/12/2023 18:56:58'!
test02ReadingEmptyCommandStayInSamePlace
	|marsRover|
	
	marsRover := MarsRover startOn: 1@1 facing: #Norte.
	
	marsRover readCommands: ''.
	
	self assert: marsRover hasPosition: 1@1 facing: #Norte.
	"Norte es subclase de Direccion (state)"! !

!methodRemoval: TestsMarsRover #test02 stamp: 'DA 5/12/2023 18:57:03'!
test02
	"Si lee el comando vacio se queda en el lugar"
	|marsRover|
	
	marsRover := MarsRover startOn: 1@1 facing: #Norte.
	
	"Primera implementacion de read commands no hace nada (metodo vacio)"
	marsRover readCommands: ''.
	
	self assert: marsRover hasPosition: 1@1 facing: #Norte.
	"Norte es subclase de Direccion (state)"!

!testRun: #TestsMarsRover #test02ReadingEmptyCommandStayInSamePlace stamp: 'DA 5/12/2023 18:57:06'!
ERROR!
!MarsRover methodsFor: 'move' stamp: 'DA 5/12/2023 18:57:23'!
readCommands: aRenameMe1 
	self shouldBeImplemented.! !
!MarsRover methodsFor: 'move' stamp: 'DA 5/12/2023 18:58:04' prior: 50606271!
readCommands: aListOfCommands
! !

!testRun: #TestsMarsRover #test02ReadingEmptyCommandStayInSamePlace stamp: 'DA 5/12/2023 18:58:07'!
PASSED!

!testRun: #TestsMarsRover #test01SuccessfullLanding stamp: 'DA 5/12/2023 18:58:07'!
PASSED!

!testRun: #TestsMarsRover #test02ReadingEmptyCommandStayInSamePlace stamp: 'DA 5/12/2023 18:58:07'!
PASSED!

----SNAPSHOT----(12 May 2023 18:58:25) CuisUniversity-5690.image priorSource: 8786904!
!TestsMarsRover methodsFor: 'as yet unclassified' stamp: 'DA 5/12/2023 19:02:24'!
test03movingFowardChangePosition
	|marsRover|
	
	marsRover := MarsRover startOn: 1@1 facing: #Norte.
	
	marsRover readCommands: ''.
	
	self assert: marsRover hasPosition: 1@2 facing: #Norte.
	"Norte es subclase de Direccion (state)"! !
!TestsMarsRover methodsFor: 'as yet unclassified' stamp: 'DA 5/12/2023 19:06:58' prior: 50606293!
test03movingFowardChangePosition
	|marsRover|
	
	marsRover := MarsRover startOn: 1@1 facing: #Norte.
	
	marsRover readACommand: 'f'.
	
	self assert: marsRover hasPosition: 1@2 facing: #Norte.
	"Norte es subclase de Direccion (state)"! !

!testRun: #TestsMarsRover #test03movingFowardChangePosition stamp: 'DA 5/12/2023 19:07:02'!
ERROR!
!MarsRover methodsFor: 'category-name' stamp: 'DA 5/12/2023 19:07:12'!
readACommand: aRenameMe1 
	self shouldBeImplemented.! !
!MarsRover methodsFor: 'category-name' stamp: 'DA 5/12/2023 19:11:20' prior: 50606317!
readACommand: aCommand 
	(aCommand = 'f') ifTrue: [
		(facing = #Norte) ifTrue: [point + 0@1] 
		]! !

!testRun: #TestsMarsRover #test03movingFowardChangePosition stamp: 'DA 5/12/2023 19:11:24'!
ERROR!
!MarsRover methodsFor: 'category-name' stamp: 'DA 5/12/2023 19:11:58' prior: 50606322!
readACommand: aCommand 
	(aCommand = 'f') ifTrue: [
		(facing = #Norte) ifTrue: [point := point + 0@1] 
		]! !

!testRun: #TestsMarsRover #test01SuccessfullLanding stamp: 'DA 5/12/2023 19:11:59'!
PASSED!

!testRun: #TestsMarsRover #test02ReadingEmptyCommandStayInSamePlace stamp: 'DA 5/12/2023 19:11:59'!
PASSED!

!testRun: #TestsMarsRover #test03movingFowardChangePosition stamp: 'DA 5/12/2023 19:11:59'!
ERROR!

!testRun: #TestsMarsRover #test03movingFowardChangePosition stamp: 'DA 5/12/2023 19:11:59'!
ERROR!

Object subclass: #MarsRover
	instanceVariableNames: 'point facing'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Mars Rover'!

!classDefinition: #MarsRover category: 'Mars Rover' stamp: 'DA 5/12/2023 19:13:03'!
Object subclass: #MarsRover
	instanceVariableNames: 'point facing'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Mars Rover'!

!classDefinition: #MarsRover category: 'Mars Rover' stamp: 'DA 5/12/2023 19:13:18'!
Object subclass: #MarsRover
	instanceVariableNames: 'actualPoint facing'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Mars Rover'!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'DA 5/12/2023 19:13:18' prior: 50603234!
initializeStartOn: aPoint facing: anOrientation 
	actualPoint := aPoint.
	facing := anOrientation.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'DA 5/12/2023 19:13:18' prior: 50606332!
readACommand: aCommand 
	(aCommand = 'f') ifTrue: [
		(facing = #Norte) ifTrue: [actualPoint := actualPoint + 0@1] 
		]! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'DA 5/12/2023 19:13:18' prior: 50606218!
isActualPosition: aPoint 
	^ (actualPoint x = aPoint x) and: (actualPoint y = aPoint y) ! !

!testRun: #TestsMarsRover #test01SuccessfullLanding stamp: 'DA 5/12/2023 19:13:29'!
PASSED!

!testRun: #TestsMarsRover #test02ReadingEmptyCommandStayInSamePlace stamp: 'DA 5/12/2023 19:13:29'!
PASSED!

!testRun: #TestsMarsRover #test03movingFowardChangePosition stamp: 'DA 5/12/2023 19:13:29'!
ERROR!

!testRun: #TestsMarsRover #test03movingFowardChangePosition stamp: 'DA 5/12/2023 19:13:29'!
ERROR!
!MarsRover methodsFor: 'category-name' stamp: 'DA 5/12/2023 19:14:28' prior: 50606377!
readACommand: aCommand 
	(aCommand = 'f') ifTrue: [
		(facing = #Norte) ifTrue: [actualPoint := actualPoint + (0@1)] 
		]! !

!testRun: #TestsMarsRover #test01SuccessfullLanding stamp: 'DA 5/12/2023 19:14:31'!
PASSED!

!testRun: #TestsMarsRover #test02ReadingEmptyCommandStayInSamePlace stamp: 'DA 5/12/2023 19:14:31'!
PASSED!

!testRun: #TestsMarsRover #test03movingFowardChangePosition stamp: 'DA 5/12/2023 19:14:31'!
PASSED!
!TestsMarsRover methodsFor: 'as yet unclassified' stamp: 'DA 5/12/2023 19:15:04'!
test03movingBackwardChangePosition
	|marsRover|
	
	marsRover := MarsRover startOn: 1@1 facing: #Norte.
	
	marsRover readACommand: 'b'.
	
	self assert: marsRover hasPosition: 1@0 facing: #Norte.
	"Norte es subclase de Direccion (state)"! !
!TestsMarsRover methodsFor: 'as yet unclassified' stamp: 'DA 5/12/2023 19:15:11'!
test04movingBackwardChangePosition
	|marsRover|
	
	marsRover := MarsRover startOn: 1@1 facing: #Norte.
	
	marsRover readACommand: 'b'.
	
	self assert: marsRover hasPosition: 1@0 facing: #Norte.
	"Norte es subclase de Direccion (state)"! !

!methodRemoval: TestsMarsRover #test03movingBackwardChangePosition stamp: 'DA 5/12/2023 19:15:15'!
test03movingBackwardChangePosition
	|marsRover|
	
	marsRover := MarsRover startOn: 1@1 facing: #Norte.
	
	marsRover readACommand: 'b'.
	
	self assert: marsRover hasPosition: 1@0 facing: #Norte.
	"Norte es subclase de Direccion (state)"!

!testRun: #TestsMarsRover #test04movingBackwardChangePosition stamp: 'DA 5/12/2023 19:15:19'!
PASSED!

!testRun: #TestsMarsRover #test01SuccessfullLanding stamp: 'DA 5/12/2023 19:15:19'!
PASSED!

!testRun: #TestsMarsRover #test02ReadingEmptyCommandStayInSamePlace stamp: 'DA 5/12/2023 19:15:19'!
PASSED!

!testRun: #TestsMarsRover #test03movingFowardChangePosition stamp: 'DA 5/12/2023 19:15:19'!
PASSED!

!testRun: #TestsMarsRover #test04movingBackwardChangePosition stamp: 'DA 5/12/2023 19:15:19'!
PASSED!

!testRun: #TestsMarsRover #test04movingBackwardChangePosition stamp: 'DA 5/12/2023 19:15:50'!
PASSED!

!testRun: #TestsMarsRover #test01SuccessfullLanding stamp: 'DA 5/12/2023 19:15:50'!
PASSED!

!testRun: #TestsMarsRover #test02ReadingEmptyCommandStayInSamePlace stamp: 'DA 5/12/2023 19:15:50'!
PASSED!

!testRun: #TestsMarsRover #test03movingFowardChangePosition stamp: 'DA 5/12/2023 19:15:50'!
PASSED!

!testRun: #TestsMarsRover #test04movingBackwardChangePosition stamp: 'DA 5/12/2023 19:15:50'!
PASSED!
!TestsMarsRover methodsFor: 'as yet unclassified' stamp: 'DA 5/12/2023 19:16:22' prior: 50606430!
test04movingBackwardChangePosition
	|marsRover|
	
	marsRover := MarsRover startOn: 1@1 facing: #Norte.
	
	marsRover readACommand: ':'.
	
	self assert: marsRover hasPosition: 1@0 facing: #Norte.
	"Norte es subclase de Direccion (state)"! !

!testRun: #TestsMarsRover #test04movingBackwardChangePosition stamp: 'DA 5/12/2023 19:16:22'!
PASSED!

!testRun: #TestsMarsRover #test01SuccessfullLanding stamp: 'DA 5/12/2023 19:16:22'!
PASSED!

!testRun: #TestsMarsRover #test02ReadingEmptyCommandStayInSamePlace stamp: 'DA 5/12/2023 19:16:22'!
PASSED!

!testRun: #TestsMarsRover #test03movingFowardChangePosition stamp: 'DA 5/12/2023 19:16:22'!
PASSED!

!testRun: #TestsMarsRover #test04movingBackwardChangePosition stamp: 'DA 5/12/2023 19:16:22'!
PASSED!

!testRun: #TestsMarsRover #test04movingBackwardChangePosition stamp: 'DA 5/12/2023 19:16:25'!
PASSED!

!testRun: #TestsMarsRover #test01SuccessfullLanding stamp: 'DA 5/12/2023 19:16:25'!
PASSED!

!testRun: #TestsMarsRover #test02ReadingEmptyCommandStayInSamePlace stamp: 'DA 5/12/2023 19:16:26'!
PASSED!

!testRun: #TestsMarsRover #test03movingFowardChangePosition stamp: 'DA 5/12/2023 19:16:26'!
PASSED!

!testRun: #TestsMarsRover #test04movingBackwardChangePosition stamp: 'DA 5/12/2023 19:16:26'!
PASSED!
!TestsMarsRover methodsFor: 'as yet unclassified' stamp: 'DA 5/12/2023 19:16:29' prior: 50606483!
test04movingBackwardChangePosition
	|marsRover|
	
	marsRover := MarsRover startOn: 1@1 facing: #Norte.
	
	marsRover readACommand: 'b'.
	
	self assert: marsRover hasPosition: 1@0 facing: #Norte.
	"Norte es subclase de Direccion (state)"! !
!MarsRover methodsFor: 'category-name' stamp: 'DA 5/12/2023 19:17:03' prior: 50606403!
readACommand: aCommand 
	(aCommand == 'f') ifTrue: [
		(facing = #Norte) ifTrue: [actualPoint := actualPoint + (0@1)] 
		].! !

!testRun: #TestsMarsRover #test01SuccessfullLanding stamp: 'DA 5/12/2023 19:17:09'!
PASSED!

!testRun: #TestsMarsRover #test02ReadingEmptyCommandStayInSamePlace stamp: 'DA 5/12/2023 19:17:09'!
PASSED!

!testRun: #TestsMarsRover #test03movingFowardChangePosition stamp: 'DA 5/12/2023 19:17:09'!
PASSED!

!testRun: #TestsMarsRover #test04movingBackwardChangePosition stamp: 'DA 5/12/2023 19:17:09'!
PASSED!
!TestsMarsRover methodsFor: 'as yet unclassified' stamp: 'DA 5/12/2023 19:17:59' prior: 50606304!
test03movingFowardChangePosition
	|marsRover|
	
	marsRover := MarsRover startOn: 1@1 facing: #Norte.
	
	marsRover readACommand: $f.
	
	self assert: marsRover hasPosition: 1@2 facing: #Norte.
	"Norte es subclase de Direccion (state)"! !

!testRun: #TestsMarsRover #test03movingFowardChangePosition stamp: 'DA 5/12/2023 19:18:03'!
PASSED!

!testRun: #TestsMarsRover #test01SuccessfullLanding stamp: 'DA 5/12/2023 19:18:03'!
PASSED!

!testRun: #TestsMarsRover #test02ReadingEmptyCommandStayInSamePlace stamp: 'DA 5/12/2023 19:18:03'!
PASSED!

!testRun: #TestsMarsRover #test03movingFowardChangePosition stamp: 'DA 5/12/2023 19:18:03'!
PASSED!

!testRun: #TestsMarsRover #test04movingBackwardChangePosition stamp: 'DA 5/12/2023 19:18:03'!
PASSED!
!TestsMarsRover methodsFor: 'as yet unclassified' stamp: 'DA 5/12/2023 19:18:10' prior: 50606526!
test04movingBackwardChangePosition
	|marsRover|
	
	marsRover := MarsRover startOn: 1@1 facing: #Norte.
	
	marsRover readACommand: $b.
	
	self assert: marsRover hasPosition: 1@0 facing: #Norte.
	"Norte es subclase de Direccion (state)"! !

!testRun: #TestsMarsRover #test04movingBackwardChangePosition stamp: 'DA 5/12/2023 19:18:14'!
PASSED!

!testRun: #TestsMarsRover #test01SuccessfullLanding stamp: 'DA 5/12/2023 19:18:14'!
PASSED!

!testRun: #TestsMarsRover #test02ReadingEmptyCommandStayInSamePlace stamp: 'DA 5/12/2023 19:18:14'!
PASSED!

!testRun: #TestsMarsRover #test03movingFowardChangePosition stamp: 'DA 5/12/2023 19:18:14'!
PASSED!

!testRun: #TestsMarsRover #test04movingBackwardChangePosition stamp: 'DA 5/12/2023 19:18:14'!
PASSED!
!MarsRover methodsFor: 'category-name' stamp: 'DA 5/12/2023 19:18:47' prior: 50606537!
readACommand: aCommand 
	(aCommand = $f) ifTrue: [
		(facing = #Norte) ifTrue: [actualPoint := actualPoint + (0@1)] 
		].! !

!testRun: #TestsMarsRover #test01SuccessfullLanding stamp: 'DA 5/12/2023 19:19:10'!
PASSED!

!testRun: #TestsMarsRover #test02ReadingEmptyCommandStayInSamePlace stamp: 'DA 5/12/2023 19:19:10'!
PASSED!

!testRun: #TestsMarsRover #test03movingFowardChangePosition stamp: 'DA 5/12/2023 19:19:10'!
PASSED!

!testRun: #TestsMarsRover #test04movingBackwardChangePosition stamp: 'DA 5/12/2023 19:19:10'!
PASSED!
!MarsRover methodsFor: 'comparing' stamp: 'DA 5/12/2023 19:21:54' prior: 50606384!
isActualPosition: aPoint 
	^ (actualPoint x = aPoint x) & (actualPoint y = aPoint y) ! !

!testRun: #TestsMarsRover #test04movingBackwardChangePosition stamp: 'DA 5/12/2023 19:22:00'!
PASSED!
!MarsRover methodsFor: 'comparing' stamp: 'DA 5/12/2023 19:24:04' prior: 50606631!
isActualPosition: aPoint 
	"^ (actualPoint x = aPoint x) & (actualPoint y = aPoint y) "
	^ actualPoint = aPoint! !

!testRun: #TestsMarsRover #test01SuccessfullLanding stamp: 'DA 5/12/2023 19:24:05'!
PASSED!

!testRun: #TestsMarsRover #test02ReadingEmptyCommandStayInSamePlace stamp: 'DA 5/12/2023 19:24:05'!
PASSED!

!testRun: #TestsMarsRover #test03movingFowardChangePosition stamp: 'DA 5/12/2023 19:24:05'!
PASSED!

!testRun: #TestsMarsRover #test04movingBackwardChangePosition stamp: 'DA 5/12/2023 19:24:05'!
PASSED!
!TestsMarsRover methodsFor: 'as yet unclassified' stamp: 'DA 5/12/2023 19:30:50'!
hasPosition: aPoint facing: anOrientation
	^(self isActualPosition: aPoint ) and: (self isFacingTo: anOrientation)
	! !

!methodRemoval: TestsMarsRover #assert:hasPosition:facing: stamp: 'DA 5/12/2023 19:31:16'!
assert: marsRover hasPosition: aPoint facing: anOrientation
	^ (marsRover isActualPosition: aPoint ) and: (marsRover isFacingTo: anOrientation)
	!
!TestsMarsRover methodsFor: 'as yet unclassified' stamp: 'DA 5/12/2023 19:31:32' prior: 50603169!
test01SuccessfullLanding

	|marsRover|
	
	marsRover := MarsRover startOn: 1@1 facing: #Norte.
	
	self assert: (marsRover hasPosition: 1@1 facing: #Norte).! !
!TestsMarsRover methodsFor: 'as yet unclassified' stamp: 'DA 5/12/2023 19:31:43' prior: 50606245!
test02ReadingEmptyCommandStayInSamePlace
	|marsRover|
	
	marsRover := MarsRover startOn: 1@1 facing: #Norte.
	
	marsRover readCommands: ''.
	
	self assert: (marsRover hasPosition: 1@1 facing: #Norte).
	"Norte es subclase de Direccion (state)"! !
!TestsMarsRover methodsFor: 'as yet unclassified' stamp: 'DA 5/12/2023 19:32:44'!
assert: marsRover hasPosition: aPoint facing: anOrientation
	self assert: ((self isActualPosition: aPoint ) and: (self isFacingTo: anOrientation))
	! !

!methodRemoval: TestsMarsRover #hasPosition:facing: stamp: 'DA 5/12/2023 19:32:49'!
hasPosition: aPoint facing: anOrientation
	^(self isActualPosition: aPoint ) and: (self isFacingTo: anOrientation)
	!
!TestsMarsRover methodsFor: 'as yet unclassified' stamp: 'DA 5/12/2023 19:33:02' prior: 50606674!
test01SuccessfullLanding

	|marsRover|
	
	marsRover := MarsRover startOn: 1@1 facing: #Norte.
	
	self assert: marsRover hasPosition: 1@1 facing: #Norte.! !
!TestsMarsRover methodsFor: 'as yet unclassified' stamp: 'DA 5/12/2023 19:33:10' prior: 50606682!
test02ReadingEmptyCommandStayInSamePlace
	|marsRover|
	
	marsRover := MarsRover startOn: 1@1 facing: #Norte.
	
	marsRover readCommands: ''.
	
	self assert: marsRover hasPosition: 1@1 facing: #Norte.
	"Norte es subclase de Direccion (state)"! !

!testRun: #TestsMarsRover #test04movingBackwardChangePosition stamp: 'DA 5/12/2023 19:33:17'!
ERROR!
!TestsMarsRover methodsFor: 'as yet unclassified' stamp: 'DA 5/12/2023 19:33:48' prior: 50606693!
assert: marsRover hasPosition: aPoint facing: anOrientation
	self assert: ((marsRover isActualPosition: aPoint ) and: (marsRover isFacingTo: anOrientation))
	! !

!testRun: #TestsMarsRover #test01SuccessfullLanding stamp: 'DA 5/12/2023 19:33:49'!
PASSED!

!testRun: #TestsMarsRover #test02ReadingEmptyCommandStayInSamePlace stamp: 'DA 5/12/2023 19:33:49'!
PASSED!

!testRun: #TestsMarsRover #test03movingFowardChangePosition stamp: 'DA 5/12/2023 19:33:49'!
PASSED!

!testRun: #TestsMarsRover #test04movingBackwardChangePosition stamp: 'DA 5/12/2023 19:33:49'!
FAILURE!

!testRun: #TestsMarsRover #test04movingBackwardChangePosition stamp: 'DA 5/12/2023 19:33:49'!
FAILURE!

!testRun: #TestsMarsRover #test04movingBackwardChangePosition stamp: 'DA 5/12/2023 19:33:59'!
FAILURE!
!TestsMarsRover methodsFor: 'as yet unclassified' stamp: 'DA 5/12/2023 19:35:51'!
hasPosition: aPoint facing: anOrientation
	^ (self isActualPosition: aPoint)  and: (self isFacingTo: anOrientation)
	! !
!MarsRover methodsFor: 'comparing' stamp: 'DA 5/12/2023 19:36:43'!
hasPosition: aPoint facing: anOrientation
	^ (self isActualPosition: aPoint)  and: (self isFacingTo: anOrientation)! !

!methodRemoval: TestsMarsRover #hasPosition:facing: stamp: 'DA 5/12/2023 19:36:48'!
hasPosition: aPoint facing: anOrientation
	^ (self isActualPosition: aPoint)  and: (self isFacingTo: anOrientation)
	!

!testRun: #TestsMarsRover #test01SuccessfullLanding stamp: 'DA 5/12/2023 19:36:57'!
PASSED!

!testRun: #TestsMarsRover #test01SuccessfullLanding stamp: 'DA 5/12/2023 19:36:57'!
PASSED!

!testRun: #TestsMarsRover #test02ReadingEmptyCommandStayInSamePlace stamp: 'DA 5/12/2023 19:36:57'!
PASSED!

!testRun: #TestsMarsRover #test03movingFowardChangePosition stamp: 'DA 5/12/2023 19:36:57'!
PASSED!

!testRun: #TestsMarsRover #test04movingBackwardChangePosition stamp: 'DA 5/12/2023 19:36:57'!
FAILURE!

!testRun: #TestsMarsRover #test04movingBackwardChangePosition stamp: 'DA 5/12/2023 19:36:57'!
FAILURE!
!TestsMarsRover methodsFor: 'as yet unclassified' stamp: 'DA 5/12/2023 19:37:13' prior: 50606708!
test01SuccessfullLanding

	|marsRover|
	
	marsRover := MarsRover startOn: 1@1 facing: #Norte.
	
	self assert: (marsRover hasPosition: 1@1 facing: #Norte).! !
!TestsMarsRover methodsFor: 'as yet unclassified' stamp: 'DA 5/12/2023 19:37:19' prior: 50606716!
test02ReadingEmptyCommandStayInSamePlace
	|marsRover|
	
	marsRover := MarsRover startOn: 1@1 facing: #Norte.
	
	marsRover readCommands: ''.
	
	self assert: (marsRover hasPosition: 1@1 facing: #Norte).
	"Norte es subclase de Direccion (state)"! !
!TestsMarsRover methodsFor: 'as yet unclassified' stamp: 'DA 5/12/2023 19:37:29' prior: 50606557!
test03movingFowardChangePosition
	|marsRover|
	
	marsRover := MarsRover startOn: 1@1 facing: #Norte.
	
	marsRover readACommand: $f.
	
	self assert: (marsRover hasPosition: 1@2 facing: #Norte).
	"Norte es subclase de Direccion (state)"! !
!TestsMarsRover methodsFor: 'as yet unclassified' stamp: 'DA 5/12/2023 19:37:35' prior: 50606584!
test04movingBackwardChangePosition
	|marsRover|
	
	marsRover := MarsRover startOn: 1@1 facing: #Norte.
	
	marsRover readACommand: $b.
	
	self assert: (marsRover hasPosition: 1@0 facing: #Norte).
	"Norte es subclase de Direccion (state)"! !

!testRun: #TestsMarsRover #test04movingBackwardChangePosition stamp: 'DA 5/12/2023 19:37:37'!
FAILURE!

!methodRemoval: TestsMarsRover #assert:hasPosition:facing: stamp: 'DA 5/12/2023 19:38:21'!
assert: marsRover hasPosition: aPoint facing: anOrientation
	self assert: ((marsRover isActualPosition: aPoint ) and: (marsRover isFacingTo: anOrientation))
	!
!MarsRover methodsFor: 'category-name' stamp: 'DA 5/12/2023 19:40:02' prior: 50606611!
readACommand: aCommand 
	(aCommand = $f) ifTrue: [
		(facing = #Norte) ifTrue: [actualPoint := actualPoint + (0@1)] 
		].
	(aCommand = $b) ifTrue: [
		(facing = #Norte) ifTrue: [actualPoint := actualPoint - (0@1)] 
		].! !

!testRun: #TestsMarsRover #test01SuccessfullLanding stamp: 'DA 5/12/2023 19:40:05'!
PASSED!

!testRun: #TestsMarsRover #test02ReadingEmptyCommandStayInSamePlace stamp: 'DA 5/12/2023 19:40:05'!
PASSED!

!testRun: #TestsMarsRover #test03movingFowardChangePosition stamp: 'DA 5/12/2023 19:40:05'!
PASSED!

!testRun: #TestsMarsRover #test04movingBackwardChangePosition stamp: 'DA 5/12/2023 19:40:05'!
PASSED!
!TestsMarsRover methodsFor: 'as yet unclassified' stamp: 'DA 5/12/2023 19:41:58'!
test05RotatingLeftFromNorthLeavesFacingWest
	|marsRover|
	
	marsRover := MarsRover startOn: 1@1 facing: #Norte.
	
	marsRover readACommand: $l.
	
	self assert: (marsRover hasPosition: 1@1 facing: #West).! !

!testRun: #TestsMarsRover #test05RotatingLeftFromNorthLeavesFacingWest stamp: 'DA 5/12/2023 19:42:00'!
FAILURE!
!MarsRover methodsFor: 'category-name' stamp: 'DA 5/12/2023 19:42:48' prior: 50606848!
readACommand: aCommand 
	(aCommand = $f) ifTrue: [
		(facing = #Norte) ifTrue: [actualPoint := actualPoint + (0@1)] 
		].
	(aCommand = $b) ifTrue: [
		(facing = #Norte) ifTrue: [actualPoint := actualPoint - (0@1)] 
		].
	(aCommand = $l) ifTrue: [
		(facing = #Norte) ifTrue: [facing := #West] 
		]! !

!testRun: #TestsMarsRover #test01SuccessfullLanding stamp: 'DA 5/12/2023 19:43:16'!
PASSED!

!testRun: #TestsMarsRover #test02ReadingEmptyCommandStayInSamePlace stamp: 'DA 5/12/2023 19:43:16'!
PASSED!

!testRun: #TestsMarsRover #test03movingFowardChangePosition stamp: 'DA 5/12/2023 19:43:16'!
PASSED!

!testRun: #TestsMarsRover #test04movingBackwardChangePosition stamp: 'DA 5/12/2023 19:43:16'!
PASSED!

!testRun: #TestsMarsRover #test05RotatingLeftFromNorthLeavesFacingWest stamp: 'DA 5/12/2023 19:43:16'!
PASSED!
!TestsMarsRover methodsFor: 'as yet unclassified' stamp: 'DA 5/12/2023 19:43:40'!
test04MovingBackwardChangePosition
	|marsRover|
	
	marsRover := MarsRover startOn: 1@1 facing: #Norte.
	
	marsRover readACommand: $b.
	
	self assert: (marsRover hasPosition: 1@0 facing: #Norte).
	"Norte es subclase de Direccion (state)"! !
!TestsMarsRover methodsFor: 'as yet unclassified' stamp: 'DA 5/12/2023 19:43:55'!
test03MovingFowardChangePosition
	|marsRover|
	
	marsRover := MarsRover startOn: 1@1 facing: #Norte.
	
	marsRover readACommand: $f.
	
	self assert: (marsRover hasPosition: 1@2 facing: #Norte).
	"Norte es subclase de Direccion (state)"! !

!methodRemoval: TestsMarsRover #test03movingFowardChangePosition stamp: 'DA 5/12/2023 19:43:55'!
test03movingFowardChangePosition
	|marsRover|
	
	marsRover := MarsRover startOn: 1@1 facing: #Norte.
	
	marsRover readACommand: $f.
	
	self assert: (marsRover hasPosition: 1@2 facing: #Norte).
	"Norte es subclase de Direccion (state)"!

!methodRemoval: TestsMarsRover #test04movingBackwardChangePosition stamp: 'DA 5/12/2023 19:43:59'!
test04movingBackwardChangePosition
	|marsRover|
	
	marsRover := MarsRover startOn: 1@1 facing: #Norte.
	
	marsRover readACommand: $b.
	
	self assert: (marsRover hasPosition: 1@0 facing: #Norte).
	"Norte es subclase de Direccion (state)"!
!TestsMarsRover methodsFor: 'as yet unclassified' stamp: 'DA 5/12/2023 19:44:22'!
test05RotatingRigthFromNorthLeavesFacingEast
	|marsRover|
	
	marsRover := MarsRover startOn: 1@1 facing: #Norte.
	
	marsRover readACommand: $r.
	
	self assert: (marsRover hasPosition: 1@1 facing: #East).! !

!testRun: #TestsMarsRover #test05RotatingRigthFromNorthLeavesFacingEast stamp: 'DA 5/12/2023 19:44:24'!
FAILURE!
!MarsRover methodsFor: 'category-name' stamp: 'DA 5/12/2023 19:44:58' prior: 50606884!
readACommand: aCommand 
	(aCommand = $f) ifTrue: [
		(facing = #Norte) ifTrue: [actualPoint := actualPoint + (0@1)] 
		].
	(aCommand = $b) ifTrue: [
		(facing = #Norte) ifTrue: [actualPoint := actualPoint - (0@1)] 
		].
	(aCommand = $l) ifTrue: [
		(facing = #Norte) ifTrue: [facing := #West] 
		].
	(aCommand = $r) ifTrue: [
		(facing = #Norte) ifTrue: [facing := #East] 
		]! !

!testRun: #TestsMarsRover #test01SuccessfullLanding stamp: 'DA 5/12/2023 19:44:59'!
PASSED!

!testRun: #TestsMarsRover #test02ReadingEmptyCommandStayInSamePlace stamp: 'DA 5/12/2023 19:44:59'!
PASSED!

!testRun: #TestsMarsRover #test03MovingFowardChangePosition stamp: 'DA 5/12/2023 19:44:59'!
PASSED!

!testRun: #TestsMarsRover #test04MovingBackwardChangePosition stamp: 'DA 5/12/2023 19:44:59'!
PASSED!

!testRun: #TestsMarsRover #test05RotatingLeftFromNorthLeavesFacingWest stamp: 'DA 5/12/2023 19:44:59'!
PASSED!

!testRun: #TestsMarsRover #test05RotatingRigthFromNorthLeavesFacingEast stamp: 'DA 5/12/2023 19:44:59'!
PASSED!
!TestsMarsRover methodsFor: 'as yet unclassified' stamp: 'DA 5/12/2023 19:53:44'!
test03MoveFowardMoveNorthOnePointWhenHeadingNorth
	|marsRover|
	
	marsRover := MarsRover startOn: 1@1 facing: #Norte.
	
	marsRover readACommand: $f.
	
	self assert: (marsRover hasPosition: 1@2 facing: #Norte).
	"Norte es subclase de Direccion (state)"! !

!methodRemoval: TestsMarsRover #test03MovingFowardChangePosition stamp: 'DA 5/12/2023 19:53:49'!
test03MovingFowardChangePosition
	|marsRover|
	
	marsRover := MarsRover startOn: 1@1 facing: #Norte.
	
	marsRover readACommand: $f.
	
	self assert: (marsRover hasPosition: 1@2 facing: #Norte).
	"Norte es subclase de Direccion (state)"!
!TestsMarsRover methodsFor: 'as yet unclassified' stamp: 'DA 5/12/2023 19:54:34'!
test04MoveBackwardMoveSouthOnePointWhenFacingNorth
	|marsRover|
	
	marsRover := MarsRover startOn: 1@1 facing: #Norte.
	
	marsRover readACommand: $b.
	
	self assert: (marsRover hasPosition: 1@0 facing: #Norte).
	"Norte es subclase de Direccion (state)"! !

!methodRemoval: TestsMarsRover #test04MovingBackwardChangePosition stamp: 'DA 5/12/2023 19:54:34'!
test04MovingBackwardChangePosition
	|marsRover|
	
	marsRover := MarsRover startOn: 1@1 facing: #Norte.
	
	marsRover readACommand: $b.
	
	self assert: (marsRover hasPosition: 1@0 facing: #Norte).
	"Norte es subclase de Direccion (state)"!
!TestsMarsRover methodsFor: 'as yet unclassified' stamp: 'DA 5/12/2023 19:54:46'!
test03MoveFowardMoveNorthOnePointWhenFacingNorth
	|marsRover|
	
	marsRover := MarsRover startOn: 1@1 facing: #Norte.
	
	marsRover readACommand: $f.
	
	self assert: (marsRover hasPosition: 1@2 facing: #Norte).
	"Norte es subclase de Direccion (state)"! !

!methodRemoval: TestsMarsRover #test03MoveFowardMoveNorthOnePointWhenHeadingNorth stamp: 'DA 5/12/2023 19:54:46'!
test03MoveFowardMoveNorthOnePointWhenHeadingNorth
	|marsRover|
	
	marsRover := MarsRover startOn: 1@1 facing: #Norte.
	
	marsRover readACommand: $f.
	
	self assert: (marsRover hasPosition: 1@2 facing: #Norte).
	"Norte es subclase de Direccion (state)"!
!TestsMarsRover methodsFor: 'as yet unclassified' stamp: 'DA 5/12/2023 19:55:19'!
test05RotatingRightFromNorthLeavesFacingEast
	|marsRover|
	
	marsRover := MarsRover startOn: 1@1 facing: #Norte.
	
	marsRover readACommand: $r.
	
	self assert: (marsRover hasPosition: 1@1 facing: #East).! !

!methodRemoval: TestsMarsRover #test05RotatingRigthFromNorthLeavesFacingEast stamp: 'DA 5/12/2023 19:55:19'!
test05RotatingRigthFromNorthLeavesFacingEast
	|marsRover|
	
	marsRover := MarsRover startOn: 1@1 facing: #Norte.
	
	marsRover readACommand: $r.
	
	self assert: (marsRover hasPosition: 1@1 facing: #East).!
!TestsMarsRover methodsFor: 'as yet unclassified' stamp: 'DA 5/12/2023 19:55:33'!
test06RotatingRightFromNorthLeavesFacingEast
	|marsRover|
	
	marsRover := MarsRover startOn: 1@1 facing: #Norte.
	
	marsRover readACommand: $r.
	
	self assert: (marsRover hasPosition: 1@1 facing: #East).! !

!methodRemoval: TestsMarsRover #test05RotatingRightFromNorthLeavesFacingEast stamp: 'DA 5/12/2023 19:55:33'!
test05RotatingRightFromNorthLeavesFacingEast
	|marsRover|
	
	marsRover := MarsRover startOn: 1@1 facing: #Norte.
	
	marsRover readACommand: $r.
	
	self assert: (marsRover hasPosition: 1@1 facing: #East).!

!testRun: #TestsMarsRover #test06RotatingRightFromNorthLeavesFacingEast stamp: 'DA 5/12/2023 19:55:49'!
PASSED!

!testRun: #TestsMarsRover #test01SuccessfullLanding stamp: 'DA 5/12/2023 19:55:49'!
PASSED!

!testRun: #TestsMarsRover #test02ReadingEmptyCommandStayInSamePlace stamp: 'DA 5/12/2023 19:55:49'!
PASSED!

!testRun: #TestsMarsRover #test03MoveFowardMoveNorthOnePointWhenFacingNorth stamp: 'DA 5/12/2023 19:55:49'!
PASSED!

!testRun: #TestsMarsRover #test04MoveBackwardMoveSouthOnePointWhenFacingNorth stamp: 'DA 5/12/2023 19:55:49'!
PASSED!

!testRun: #TestsMarsRover #test05RotatingLeftFromNorthLeavesFacingWest stamp: 'DA 5/12/2023 19:55:49'!
PASSED!

!testRun: #TestsMarsRover #test06RotatingRightFromNorthLeavesFacingEast stamp: 'DA 5/12/2023 19:55:50'!
PASSED!
!TestsMarsRover methodsFor: 'as yet unclassified' stamp: 'DA 5/12/2023 20:01:43'!
test06RotateRightAndMoveFowardMovesOnePointEastWhenFacingNorth
	|marsRover|
	
	marsRover := MarsRover startOn: 1@1 facing: #Norte.
	
	marsRover readCommands: 'rf'.
	
	self assert: (marsRover hasPosition: 1@2 facing: #East).! !
!TestsMarsRover methodsFor: 'as yet unclassified' stamp: 'DA 5/12/2023 20:01:54'!
test07RotateRightAndMoveFowardMovesOnePointEastWhenFacingNorth
	|marsRover|
	
	marsRover := MarsRover startOn: 1@1 facing: #Norte.
	
	marsRover readCommands: 'rf'.
	
	self assert: (marsRover hasPosition: 1@2 facing: #East).! !

!methodRemoval: TestsMarsRover #test06RotateRightAndMoveFowardMovesOnePointEastWhenFacingNorth stamp: 'DA 5/12/2023 20:01:54'!
test06RotateRightAndMoveFowardMovesOnePointEastWhenFacingNorth
	|marsRover|
	
	marsRover := MarsRover startOn: 1@1 facing: #Norte.
	
	marsRover readCommands: 'rf'.
	
	self assert: (marsRover hasPosition: 1@2 facing: #East).!

!testRun: #TestsMarsRover #test07RotateRightAndMoveFowardMovesOnePointEastWhenFacingNorth stamp: 'DA 5/12/2023 20:01:57'!
FAILURE!
!MarsRover methodsFor: 'move' stamp: 'DA 5/12/2023 20:05:47' prior: 50606276!
readCommands: aCommandSequence
	self readACommand: (aCommandSequence at: 1).
	self readACommand: (aCommandSequence at: 2).! !

!testRun: #TestsMarsRover #test06RotatingRightFromNorthLeavesFacingEast stamp: 'DA 5/12/2023 20:05:56'!
PASSED!

!testRun: #TestsMarsRover #test01SuccessfullLanding stamp: 'DA 5/12/2023 20:05:56'!
PASSED!

!testRun: #TestsMarsRover #test02ReadingEmptyCommandStayInSamePlace stamp: 'DA 5/12/2023 20:05:56'!
ERROR!

!testRun: #TestsMarsRover #test03MoveFowardMoveNorthOnePointWhenFacingNorth stamp: 'DA 5/12/2023 20:05:56'!
PASSED!

!testRun: #TestsMarsRover #test04MoveBackwardMoveSouthOnePointWhenFacingNorth stamp: 'DA 5/12/2023 20:05:56'!
PASSED!

!testRun: #TestsMarsRover #test05RotatingLeftFromNorthLeavesFacingWest stamp: 'DA 5/12/2023 20:05:56'!
PASSED!

!testRun: #TestsMarsRover #test06RotatingRightFromNorthLeavesFacingEast stamp: 'DA 5/12/2023 20:05:56'!
PASSED!

!testRun: #TestsMarsRover #test07RotateRightAndMoveFowardMovesOnePointEastWhenFacingNorth stamp: 'DA 5/12/2023 20:05:56'!
FAILURE!
!MarsRover methodsFor: 'move' stamp: 'DA 5/12/2023 20:07:20' prior: 50607166!
readCommands: aCommandSequence
	(aCommandSequence isEmpty) ifTrue:[].
	(aCommandSequence size = 2) ifTrue:[
	self readACommand: (aCommandSequence at: 1).
	self readACommand: (aCommandSequence at: 2).].! !

!testRun: #TestsMarsRover #test07RotateRightAndMoveFowardMovesOnePointEastWhenFacingNorth stamp: 'DA 5/12/2023 20:07:27'!
FAILURE!
!MarsRover methodsFor: 'category-name' stamp: 'DA 5/12/2023 20:08:04' prior: 50606968!
readACommand: aCommand 
	(aCommand = $f) ifTrue: [
		(facing = #Norte) ifTrue: [actualPoint := actualPoint + (0@1)]. 
		(facing = #East) ifTrue: [actualPoint := actualPoint + (1@0)] 
		].
	(aCommand = $b) ifTrue: [
		(facing = #Norte) ifTrue: [actualPoint := actualPoint - (0@1)] 
		].
	(aCommand = $l) ifTrue: [
		(facing = #Norte) ifTrue: [facing := #West] 
		].
	(aCommand = $r) ifTrue: [
		(facing = #Norte) ifTrue: [facing := #East] 
		]! !

!testRun: #TestsMarsRover #test01SuccessfullLanding stamp: 'DA 5/12/2023 20:08:05'!
PASSED!

!testRun: #TestsMarsRover #test02ReadingEmptyCommandStayInSamePlace stamp: 'DA 5/12/2023 20:08:05'!
PASSED!

!testRun: #TestsMarsRover #test03MoveFowardMoveNorthOnePointWhenFacingNorth stamp: 'DA 5/12/2023 20:08:05'!
PASSED!

!testRun: #TestsMarsRover #test04MoveBackwardMoveSouthOnePointWhenFacingNorth stamp: 'DA 5/12/2023 20:08:05'!
PASSED!

!testRun: #TestsMarsRover #test05RotatingLeftFromNorthLeavesFacingWest stamp: 'DA 5/12/2023 20:08:05'!
PASSED!

!testRun: #TestsMarsRover #test06RotatingRightFromNorthLeavesFacingEast stamp: 'DA 5/12/2023 20:08:05'!
PASSED!

!testRun: #TestsMarsRover #test07RotateRightAndMoveFowardMovesOnePointEastWhenFacingNorth stamp: 'DA 5/12/2023 20:08:05'!
FAILURE!

!testRun: #TestsMarsRover #test07RotateRightAndMoveFowardMovesOnePointEastWhenFacingNorth stamp: 'DA 5/12/2023 20:08:05'!
FAILURE!

!testRun: #TestsMarsRover #test01SuccessfullLanding stamp: 'DA 5/12/2023 20:08:26'!
PASSED!

!testRun: #TestsMarsRover #test02ReadingEmptyCommandStayInSamePlace stamp: 'DA 5/12/2023 20:08:26'!
PASSED!

!testRun: #TestsMarsRover #test03MoveFowardMoveNorthOnePointWhenFacingNorth stamp: 'DA 5/12/2023 20:08:26'!
PASSED!

!testRun: #TestsMarsRover #test04MoveBackwardMoveSouthOnePointWhenFacingNorth stamp: 'DA 5/12/2023 20:08:26'!
PASSED!

!testRun: #TestsMarsRover #test05RotatingLeftFromNorthLeavesFacingWest stamp: 'DA 5/12/2023 20:08:27'!
PASSED!

!testRun: #TestsMarsRover #test06RotatingRightFromNorthLeavesFacingEast stamp: 'DA 5/12/2023 20:08:27'!
PASSED!

!testRun: #TestsMarsRover #test07RotateRightAndMoveFowardMovesOnePointEastWhenFacingNorth stamp: 'DA 5/12/2023 20:08:27'!
FAILURE!

!testRun: #TestsMarsRover #test07RotateRightAndMoveFowardMovesOnePointEastWhenFacingNorth stamp: 'DA 5/12/2023 20:08:27'!
FAILURE!
!TestsMarsRover methodsFor: 'as yet unclassified' stamp: 'DA 5/12/2023 20:08:48' prior: 50607141!
test07RotateRightAndMoveFowardMovesOnePointEastWhenFacingNorth
	|marsRover|
	
	marsRover := MarsRover startOn: 1@1 facing: #Norte.
	
	marsRover readCommands: 'rf'.
	
	self assert: (marsRover hasPosition: 2@1 facing: #East).! !

!testRun: #TestsMarsRover #test07RotateRightAndMoveFowardMovesOnePointEastWhenFacingNorth stamp: 'DA 5/12/2023 20:08:50'!
PASSED!

!testRun: #TestsMarsRover #test01SuccessfullLanding stamp: 'DA 5/12/2023 20:08:50'!
PASSED!

!testRun: #TestsMarsRover #test02ReadingEmptyCommandStayInSamePlace stamp: 'DA 5/12/2023 20:08:50'!
PASSED!

!testRun: #TestsMarsRover #test03MoveFowardMoveNorthOnePointWhenFacingNorth stamp: 'DA 5/12/2023 20:08:50'!
PASSED!

!testRun: #TestsMarsRover #test04MoveBackwardMoveSouthOnePointWhenFacingNorth stamp: 'DA 5/12/2023 20:08:50'!
PASSED!

!testRun: #TestsMarsRover #test05RotatingLeftFromNorthLeavesFacingWest stamp: 'DA 5/12/2023 20:08:50'!
PASSED!

!testRun: #TestsMarsRover #test06RotatingRightFromNorthLeavesFacingEast stamp: 'DA 5/12/2023 20:08:50'!
PASSED!

!testRun: #TestsMarsRover #test07RotateRightAndMoveFowardMovesOnePointEastWhenFacingNorth stamp: 'DA 5/12/2023 20:08:50'!
PASSED!

----SNAPSHOT----(12 May 2023 20:09:01) CuisUniversity-5690.image priorSource: 8788440!
!TestsMarsRover methodsFor: 'as yet unclassified' stamp: 'DA 5/12/2023 20:22:06'!
test08RotateRight2TimesAndMoveFowardMovesOnePointSouthWhenFacingNorth
	|marsRover|
	
	marsRover := MarsRover startOn: 1@1 facing: #Norte.
	
	marsRover readCommands: 'rrf'.
	
	self assert: (marsRover hasPosition: 1@0 facing: #South).! !

!testRun: #TestsMarsRover #test08RotateRight2TimesAndMoveFowardMovesOnePointSouthWhenFacingNorth stamp: 'DA 5/12/2023 20:22:51'!
FAILURE!
!MarsRover methodsFor: 'move' stamp: 'DA 5/12/2023 20:24:12' prior: 50607201!
readCommands: aCommandSequence
	(aCommandSequence isEmpty) ifTrue:[].
	(aCommandSequence size = 2) ifTrue:[
	self readACommand: (aCommandSequence at: 1).
	self readACommand: (aCommandSequence at: 2).].
	(aCommandSequence size = 3) ifTrue:[
		self readACommand: (aCommandSequence at: 1).
		self readACommand: (aCommandSequence at: 2).
		self readACommand: (aCommandSequence at: 3).
		].! !

!testRun: #TestsMarsRover #test01SuccessfullLanding stamp: 'DA 5/12/2023 20:24:16'!
PASSED!

!testRun: #TestsMarsRover #test02ReadingEmptyCommandStayInSamePlace stamp: 'DA 5/12/2023 20:24:16'!
PASSED!

!testRun: #TestsMarsRover #test03MoveFowardMoveNorthOnePointWhenFacingNorth stamp: 'DA 5/12/2023 20:24:16'!
PASSED!

!testRun: #TestsMarsRover #test04MoveBackwardMoveSouthOnePointWhenFacingNorth stamp: 'DA 5/12/2023 20:24:16'!
PASSED!

!testRun: #TestsMarsRover #test05RotatingLeftFromNorthLeavesFacingWest stamp: 'DA 5/12/2023 20:24:16'!
PASSED!

!testRun: #TestsMarsRover #test06RotatingRightFromNorthLeavesFacingEast stamp: 'DA 5/12/2023 20:24:16'!
PASSED!

!testRun: #TestsMarsRover #test07RotateRightAndMoveFowardMovesOnePointEastWhenFacingNorth stamp: 'DA 5/12/2023 20:24:16'!
PASSED!

!testRun: #TestsMarsRover #test08RotateRight2TimesAndMoveFowardMovesOnePointSouthWhenFacingNorth stamp: 'DA 5/12/2023 20:24:16'!
FAILURE!

!testRun: #TestsMarsRover #test08RotateRight2TimesAndMoveFowardMovesOnePointSouthWhenFacingNorth stamp: 'DA 5/12/2023 20:24:16'!
FAILURE!
!MarsRover methodsFor: 'move' stamp: 'DA 5/12/2023 20:25:10' prior: 50607215!
readACommand: aCommand 
	(aCommand = $f) ifTrue: [
		(facing = #Norte) ifTrue: [actualPoint := actualPoint + (0@1)]. 
		(facing = #East) ifTrue: [actualPoint := actualPoint + (1@0)] 
		].
	(aCommand = $b) ifTrue: [
		(facing = #Norte) ifTrue: [actualPoint := actualPoint - (0@1)] 
		].
	(aCommand = $l) ifTrue: [
		(facing = #Norte) ifTrue: [facing := #West] 
		].
	(aCommand = $r) ifTrue: [
		(facing = #Norte) ifTrue: [facing := #East].
		(facing = #East) ifTrue: [facing := #South]. 
		]! !

!testRun: #TestsMarsRover #test01SuccessfullLanding stamp: 'DA 5/12/2023 20:25:13'!
PASSED!

!testRun: #TestsMarsRover #test02ReadingEmptyCommandStayInSamePlace stamp: 'DA 5/12/2023 20:25:13'!
PASSED!

!testRun: #TestsMarsRover #test03MoveFowardMoveNorthOnePointWhenFacingNorth stamp: 'DA 5/12/2023 20:25:13'!
PASSED!

!testRun: #TestsMarsRover #test04MoveBackwardMoveSouthOnePointWhenFacingNorth stamp: 'DA 5/12/2023 20:25:13'!
PASSED!

!testRun: #TestsMarsRover #test05RotatingLeftFromNorthLeavesFacingWest stamp: 'DA 5/12/2023 20:25:13'!
PASSED!

!testRun: #TestsMarsRover #test06RotatingRightFromNorthLeavesFacingEast stamp: 'DA 5/12/2023 20:25:13'!
FAILURE!

!testRun: #TestsMarsRover #test07RotateRightAndMoveFowardMovesOnePointEastWhenFacingNorth stamp: 'DA 5/12/2023 20:25:13'!
FAILURE!

!testRun: #TestsMarsRover #test08RotateRight2TimesAndMoveFowardMovesOnePointSouthWhenFacingNorth stamp: 'DA 5/12/2023 20:25:13'!
FAILURE!
!MarsRover methodsFor: 'move' stamp: 'DA 5/12/2023 20:25:52' prior: 50607396!
readACommand: aCommand 
	(aCommand = $f) ifTrue: [
		(facing = #Norte) ifTrue: [actualPoint := actualPoint + (0@1)]. 
		(facing = #East) ifTrue: [actualPoint := actualPoint + (1@0)].
		(facing = #South) ifTrue: [actualPoint := actualPoint - (0@1)].
		].
	(aCommand = $b) ifTrue: [
		(facing = #Norte) ifTrue: [actualPoint := actualPoint - (0@1)] 
		].
	(aCommand = $l) ifTrue: [
		(facing = #Norte) ifTrue: [facing := #West] 
		].
	(aCommand = $r) ifTrue: [
		(facing = #Norte) ifTrue: [facing := #East].
		(facing = #East) ifTrue: [facing := #South]. 
		]! !

!testRun: #TestsMarsRover #test01SuccessfullLanding stamp: 'DA 5/12/2023 20:25:53'!
PASSED!

!testRun: #TestsMarsRover #test02ReadingEmptyCommandStayInSamePlace stamp: 'DA 5/12/2023 20:25:53'!
PASSED!

!testRun: #TestsMarsRover #test03MoveFowardMoveNorthOnePointWhenFacingNorth stamp: 'DA 5/12/2023 20:25:53'!
PASSED!

!testRun: #TestsMarsRover #test04MoveBackwardMoveSouthOnePointWhenFacingNorth stamp: 'DA 5/12/2023 20:25:54'!
PASSED!

!testRun: #TestsMarsRover #test05RotatingLeftFromNorthLeavesFacingWest stamp: 'DA 5/12/2023 20:25:54'!
PASSED!

!testRun: #TestsMarsRover #test06RotatingRightFromNorthLeavesFacingEast stamp: 'DA 5/12/2023 20:25:54'!
FAILURE!

!testRun: #TestsMarsRover #test07RotateRightAndMoveFowardMovesOnePointEastWhenFacingNorth stamp: 'DA 5/12/2023 20:25:54'!
FAILURE!

!testRun: #TestsMarsRover #test08RotateRight2TimesAndMoveFowardMovesOnePointSouthWhenFacingNorth stamp: 'DA 5/12/2023 20:25:54'!
PASSED!

!testRun: #TestsMarsRover #test06RotatingRightFromNorthLeavesFacingEast stamp: 'DA 5/12/2023 20:26:53'!
FAILURE!

!testRun: #TestsMarsRover #test07RotateRightAndMoveFowardMovesOnePointEastWhenFacingNorth stamp: 'DA 5/12/2023 20:27:17'!
FAILURE!

!testRun: #TestsMarsRover #test01SuccessfullLanding stamp: 'DA 5/12/2023 20:27:34'!
PASSED!

!testRun: #TestsMarsRover #test02ReadingEmptyCommandStayInSamePlace stamp: 'DA 5/12/2023 20:27:34'!
PASSED!

!testRun: #TestsMarsRover #test03MoveFowardMoveNorthOnePointWhenFacingNorth stamp: 'DA 5/12/2023 20:27:34'!
PASSED!

!testRun: #TestsMarsRover #test04MoveBackwardMoveSouthOnePointWhenFacingNorth stamp: 'DA 5/12/2023 20:27:34'!
PASSED!

!testRun: #TestsMarsRover #test05RotatingLeftFromNorthLeavesFacingWest stamp: 'DA 5/12/2023 20:27:34'!
PASSED!

!testRun: #TestsMarsRover #test08RotateRight2TimesAndMoveFowardMovesOnePointSouthWhenFacingNorth stamp: 'DA 5/12/2023 20:27:34'!
PASSED!

!testRun: #TestsMarsRover #test06RotatingRightFromNorthLeavesFacingEast stamp: 'DA 5/12/2023 20:27:34'!
FAILURE!

!testRun: #TestsMarsRover #test07RotateRightAndMoveFowardMovesOnePointEastWhenFacingNorth stamp: 'DA 5/12/2023 20:27:34'!
FAILURE!
!MarsRover methodsFor: 'move' stamp: 'DA 5/12/2023 20:28:44' prior: 50607444!
readACommand: aCommand 
	(aCommand = $f) ifTrue: [
		(facing = #Norte) ifTrue: [actualPoint := actualPoint + (0@1)]. 
		(facing = #East) ifTrue: [actualPoint := actualPoint + (1@0)].
		(facing = #South) ifTrue: [actualPoint := actualPoint - (0@1)].
		].
	(aCommand = $b) ifTrue: [
		(facing = #Norte) ifTrue: [actualPoint := actualPoint - (0@1)] 
		].
	(aCommand = $l) ifTrue: [
		(facing = #Norte) ifTrue: [facing := #West]. 
		].
	(aCommand = $r) ifTrue: [
		(facing = #Norte) ifTrue: [facing := #East].
		(facing = #East) ifTrue: [facing := #South]. 
		].
	^self ! !

!testRun: #TestsMarsRover #test01SuccessfullLanding stamp: 'DA 5/12/2023 20:28:45'!
PASSED!

!testRun: #TestsMarsRover #test02ReadingEmptyCommandStayInSamePlace stamp: 'DA 5/12/2023 20:28:45'!
PASSED!

!testRun: #TestsMarsRover #test03MoveFowardMoveNorthOnePointWhenFacingNorth stamp: 'DA 5/12/2023 20:28:45'!
PASSED!

!testRun: #TestsMarsRover #test04MoveBackwardMoveSouthOnePointWhenFacingNorth stamp: 'DA 5/12/2023 20:28:45'!
PASSED!

!testRun: #TestsMarsRover #test05RotatingLeftFromNorthLeavesFacingWest stamp: 'DA 5/12/2023 20:28:45'!
PASSED!

!testRun: #TestsMarsRover #test06RotatingRightFromNorthLeavesFacingEast stamp: 'DA 5/12/2023 20:28:45'!
FAILURE!

!testRun: #TestsMarsRover #test07RotateRightAndMoveFowardMovesOnePointEastWhenFacingNorth stamp: 'DA 5/12/2023 20:28:45'!
FAILURE!

!testRun: #TestsMarsRover #test08RotateRight2TimesAndMoveFowardMovesOnePointSouthWhenFacingNorth stamp: 'DA 5/12/2023 20:28:45'!
PASSED!

!testRun: #TestsMarsRover #test06RotatingRightFromNorthLeavesFacingEast stamp: 'DA 5/12/2023 20:28:48'!
FAILURE!

!testRun: #TestsMarsRover #test06RotatingRightFromNorthLeavesFacingEast stamp: 'DA 5/12/2023 20:29:24'!
PASSED!

!testRun: #TestsMarsRover #test01SuccessfullLanding stamp: 'DA 5/12/2023 20:29:39'!
PASSED!

!testRun: #TestsMarsRover #test02ReadingEmptyCommandStayInSamePlace stamp: 'DA 5/12/2023 20:29:39'!
PASSED!

!testRun: #TestsMarsRover #test03MoveFowardMoveNorthOnePointWhenFacingNorth stamp: 'DA 5/12/2023 20:29:39'!
PASSED!

!testRun: #TestsMarsRover #test04MoveBackwardMoveSouthOnePointWhenFacingNorth stamp: 'DA 5/12/2023 20:29:39'!
PASSED!

!testRun: #TestsMarsRover #test05RotatingLeftFromNorthLeavesFacingWest stamp: 'DA 5/12/2023 20:29:39'!
PASSED!

!testRun: #TestsMarsRover #test06RotatingRightFromNorthLeavesFacingEast stamp: 'DA 5/12/2023 20:29:39'!
FAILURE!

!testRun: #TestsMarsRover #test07RotateRightAndMoveFowardMovesOnePointEastWhenFacingNorth stamp: 'DA 5/12/2023 20:29:39'!
FAILURE!

!testRun: #TestsMarsRover #test08RotateRight2TimesAndMoveFowardMovesOnePointSouthWhenFacingNorth stamp: 'DA 5/12/2023 20:29:39'!
PASSED!
!MarsRover methodsFor: 'move' stamp: 'DA 5/12/2023 20:30:14' prior: 50607347!
readCommands: aCommandSequence
	(aCommandSequence isEmpty) ifTrue:[].
	(aCommandSequence size = 2) ifTrue:[
	self readACommand: (aCommandSequence at: 1).
	self readACommand: (aCommandSequence at: 2).].
	"(aCommandSequence size = 3) ifTrue:[
		self readACommand: (aCommandSequence at: 1).
		self readACommand: (aCommandSequence at: 2).
		self readACommand: (aCommandSequence at: 3).
		]."! !

!testRun: #TestsMarsRover #test06RotatingRightFromNorthLeavesFacingEast stamp: 'DA 5/12/2023 20:30:19'!
FAILURE!

!testRun: #TestsMarsRover #test06RotatingRightFromNorthLeavesFacingEast stamp: 'DA 5/12/2023 20:30:19'!
FAILURE!
!MarsRover methodsFor: 'move' stamp: 'DA 5/12/2023 20:30:47' prior: 50607530!
readACommand: aCommand 
	(aCommand = $f) ifTrue: [
		(facing = #Norte) ifTrue: [actualPoint := actualPoint + (0@1)]. 
		(facing = #East) ifTrue: [actualPoint := actualPoint + (1@0)].
		"(facing = #South) ifTrue: [actualPoint := actualPoint - (0@1)]."
		].
	(aCommand = $b) ifTrue: [
		(facing = #Norte) ifTrue: [actualPoint := actualPoint - (0@1)] 
		].
	(aCommand = $l) ifTrue: [
		(facing = #Norte) ifTrue: [facing := #West]. 
		].
	(aCommand = $r) ifTrue: [
		(facing = #Norte) ifTrue: [facing := #East].
		"(facing = #East) ifTrue: [facing := #South]. "
		].
	^self ! !

!testRun: #TestsMarsRover #test06RotatingRightFromNorthLeavesFacingEast stamp: 'DA 5/12/2023 20:30:53'!
PASSED!
!MarsRover methodsFor: 'move' stamp: 'DA 5/12/2023 20:32:06' prior: 50607638!
readACommand: aCommand 
	(aCommand = $f) ifTrue: [
		(facing = #Norte) ifTrue: [actualPoint := actualPoint + (0@1)]. 
		(facing = #East) ifTrue: [actualPoint := actualPoint + (1@0)].
		"(facing = #South) ifTrue: [actualPoint := actualPoint - (0@1)]."
		].
	(aCommand = $b) ifTrue: [
		(facing = #Norte) ifTrue: [actualPoint := actualPoint - (0@1)] 
		].
	(aCommand = $l) ifTrue: [
		(facing = #Norte) ifTrue: [facing := #West]. 
		].
	(aCommand = $r) ifTrue: [
		(facing = #Norte) ifTrue: [facing := #East. ^self.].
		"(facing = #East) ifTrue: [facing := #South]. "
		].
	^self ! !

!testRun: #TestsMarsRover #test06RotatingRightFromNorthLeavesFacingEast stamp: 'DA 5/12/2023 20:32:11'!
PASSED!
!MarsRover methodsFor: 'move' stamp: 'DA 5/12/2023 20:33:18' prior: 50607662!
readACommand: aCommand 
	(aCommand = $f) ifTrue: [
		(facing = #Norte) ifTrue: [actualPoint := actualPoint + (0@1)]. 
		(facing = #East) ifTrue: [actualPoint := actualPoint + (1@0)].
		(facing = #South) ifTrue: [actualPoint := actualPoint - (0@1)].
		].
	(aCommand = $b) ifTrue: [
		(facing = #Norte) ifTrue: [actualPoint := actualPoint - (0@1)] 
		].
	(aCommand = $l) ifTrue: [
		(facing = #Norte) ifTrue: [facing := #West. ^self.]. 
		].
	(aCommand = $r) ifTrue: [
		(facing = #Norte) ifTrue: [facing := #East. ^self.].
		(facing = #East) ifTrue: [facing := #South. ^self.]. 
		].
	! !
!MarsRover methodsFor: 'move' stamp: 'DA 5/12/2023 20:33:24' prior: 50607616!
readCommands: aCommandSequence
	(aCommandSequence isEmpty) ifTrue:[].
	(aCommandSequence size = 2) ifTrue:[
	self readACommand: (aCommandSequence at: 1).
	self readACommand: (aCommandSequence at: 2).].
	(aCommandSequence size = 3) ifTrue:[
		self readACommand: (aCommandSequence at: 1).
		self readACommand: (aCommandSequence at: 2).
		self readACommand: (aCommandSequence at: 3).
		].! !

!testRun: #TestsMarsRover #test01SuccessfullLanding stamp: 'DA 5/12/2023 20:33:24'!
PASSED!

!testRun: #TestsMarsRover #test02ReadingEmptyCommandStayInSamePlace stamp: 'DA 5/12/2023 20:33:24'!
PASSED!

!testRun: #TestsMarsRover #test03MoveFowardMoveNorthOnePointWhenFacingNorth stamp: 'DA 5/12/2023 20:33:24'!
PASSED!

!testRun: #TestsMarsRover #test04MoveBackwardMoveSouthOnePointWhenFacingNorth stamp: 'DA 5/12/2023 20:33:24'!
PASSED!

!testRun: #TestsMarsRover #test05RotatingLeftFromNorthLeavesFacingWest stamp: 'DA 5/12/2023 20:33:24'!
PASSED!

!testRun: #TestsMarsRover #test06RotatingRightFromNorthLeavesFacingEast stamp: 'DA 5/12/2023 20:33:24'!
PASSED!

!testRun: #TestsMarsRover #test07RotateRightAndMoveFowardMovesOnePointEastWhenFacingNorth stamp: 'DA 5/12/2023 20:33:24'!
PASSED!

!testRun: #TestsMarsRover #test08RotateRight2TimesAndMoveFowardMovesOnePointSouthWhenFacingNorth stamp: 'DA 5/12/2023 20:33:24'!
PASSED!
!TestsMarsRover methodsFor: 'as yet unclassified' stamp: 'DA 5/12/2023 20:34:51'!
test08Rotate4TimesLeftDoNotChangeOrientation
	|marsRover|
	
	marsRover := MarsRover startOn: 1@1 facing: #North.
	
	marsRover readCommands: 'llll'.
	
	self assert: (marsRover hasPosition: 1@1 facing: #North).! !
!TestsMarsRover methodsFor: 'as yet unclassified' stamp: 'DA 5/12/2023 20:35:01'!
test09Rotate4TimesLeftDoNotChangeOrientation
	|marsRover|
	
	marsRover := MarsRover startOn: 1@1 facing: #North.
	
	marsRover readCommands: 'llll'.
	
	self assert: (marsRover hasPosition: 1@1 facing: #North).! !

!methodRemoval: TestsMarsRover #test08Rotate4TimesLeftDoNotChangeOrientation stamp: 'DA 5/12/2023 20:35:01'!
test08Rotate4TimesLeftDoNotChangeOrientation
	|marsRover|
	
	marsRover := MarsRover startOn: 1@1 facing: #North.
	
	marsRover readCommands: 'llll'.
	
	self assert: (marsRover hasPosition: 1@1 facing: #North).!
!TestsMarsRover methodsFor: 'as yet unclassified' stamp: 'DA 5/12/2023 20:35:19' prior: 50606796!
test01SuccessfullLanding

	|marsRover|
	
	marsRover := MarsRover startOn: 1@1 facing: #North.
	
	self assert: (marsRover hasPosition: 1@1 facing: #North).! !
!TestsMarsRover methodsFor: 'as yet unclassified' stamp: 'DA 5/12/2023 20:35:27' prior: 50606804!
test02ReadingEmptyCommandStayInSamePlace
	|marsRover|
	
	marsRover := MarsRover startOn: 1@1 facing: #North.
	
	marsRover readCommands: ''.
	
	self assert: (marsRover hasPosition: 1@1 facing: #North).
	"Norte es subclase de Direccion (state)"! !
!TestsMarsRover methodsFor: 'as yet unclassified' stamp: 'DA 5/12/2023 20:35:33' prior: 50607046!
test03MoveFowardMoveNorthOnePointWhenFacingNorth
	|marsRover|
	
	marsRover := MarsRover startOn: 1@1 facing: #North.
	
	marsRover readACommand: $f.
	
	self assert: (marsRover hasPosition: 1@2 facing: #North).
	"Norte es subclase de Direccion (state)"! !
!TestsMarsRover methodsFor: 'as yet unclassified' stamp: 'DA 5/12/2023 20:35:40' prior: 50607024!
test04MoveBackwardMoveSouthOnePointWhenFacingNorth
	|marsRover|
	
	marsRover := MarsRover startOn: 1@1 facing: #North.
	
	marsRover readACommand: $b.
	
	self assert: (marsRover hasPosition: 1@0 facing: #North).
	"Norte es subclase de Direccion (state)"! !
!TestsMarsRover methodsFor: 'as yet unclassified' stamp: 'DA 5/12/2023 20:35:44' prior: 50606871!
test05RotatingLeftFromNorthLeavesFacingWest
	|marsRover|
	
	marsRover := MarsRover startOn: 1@1 facing: #North.
	
	marsRover readACommand: $l.
	
	self assert: (marsRover hasPosition: 1@1 facing: #West).! !
!TestsMarsRover methodsFor: 'as yet unclassified' stamp: 'DA 5/12/2023 20:35:53' prior: 50607087!
test06RotatingRightFromNorthLeavesFacingEast
	|marsRover|
	
	marsRover := MarsRover startOn: 1@1 facing: #North.
	
	marsRover readACommand: $r.
	
	self assert: (marsRover hasPosition: 1@1 facing: #East).! !
!TestsMarsRover methodsFor: 'as yet unclassified' stamp: 'DA 5/12/2023 20:35:58' prior: 50607290!
test07RotateRightAndMoveFowardMovesOnePointEastWhenFacingNorth
	|marsRover|
	
	marsRover := MarsRover startOn: 1@1 facing: #North.
	
	marsRover readCommands: 'rf'.
	
	self assert: (marsRover hasPosition: 2@1 facing: #East).! !
!TestsMarsRover methodsFor: 'as yet unclassified' stamp: 'DA 5/12/2023 20:36:03' prior: 50607332!
test08RotateRight2TimesAndMoveFowardMovesOnePointSouthWhenFacingNorth
	|marsRover|
	
	marsRover := MarsRover startOn: 1@1 facing: #North.
	
	marsRover readCommands: 'rrf'.
	
	self assert: (marsRover hasPosition: 1@0 facing: #South).! !
!MarsRover methodsFor: 'move' stamp: 'DA 5/12/2023 20:37:17' prior: 50607708!
readCommands: aCommandSequence
	aCommandSequence do: [:command | self readACommand: command].
	"
	(aCommandSequence isEmpty) ifTrue:[].
	(aCommandSequence size = 2) ifTrue:[
	self readACommand: (aCommandSequence at: 1).
	self readACommand: (aCommandSequence at: 2).].
	(aCommandSequence size = 3) ifTrue:[
		self readACommand: (aCommandSequence at: 1).
		self readACommand: (aCommandSequence at: 2).
		self readACommand: (aCommandSequence at: 3).
		]."! !

!testRun: #TestsMarsRover #test01SuccessfullLanding stamp: 'DA 5/12/2023 20:37:23'!
PASSED!

!testRun: #TestsMarsRover #test02ReadingEmptyCommandStayInSamePlace stamp: 'DA 5/12/2023 20:37:23'!
PASSED!

!testRun: #TestsMarsRover #test03MoveFowardMoveNorthOnePointWhenFacingNorth stamp: 'DA 5/12/2023 20:37:23'!
FAILURE!

!testRun: #TestsMarsRover #test04MoveBackwardMoveSouthOnePointWhenFacingNorth stamp: 'DA 5/12/2023 20:37:23'!
FAILURE!

!testRun: #TestsMarsRover #test05RotatingLeftFromNorthLeavesFacingWest stamp: 'DA 5/12/2023 20:37:23'!
FAILURE!

!testRun: #TestsMarsRover #test06RotatingRightFromNorthLeavesFacingEast stamp: 'DA 5/12/2023 20:37:23'!
FAILURE!

!testRun: #TestsMarsRover #test07RotateRightAndMoveFowardMovesOnePointEastWhenFacingNorth stamp: 'DA 5/12/2023 20:37:23'!
FAILURE!

!testRun: #TestsMarsRover #test08RotateRight2TimesAndMoveFowardMovesOnePointSouthWhenFacingNorth stamp: 'DA 5/12/2023 20:37:23'!
FAILURE!

!testRun: #TestsMarsRover #test09Rotate4TimesLeftDoNotChangeOrientation stamp: 'DA 5/12/2023 20:37:23'!
PASSED!
!MarsRover methodsFor: 'move' stamp: 'DA 5/12/2023 20:38:39' prior: 50607687!
readACommand: aCommand 
	(aCommand = $f) ifTrue: [
		(facing = #North) ifTrue: [actualPoint := actualPoint + (0@1)]. 
		(facing = #East) ifTrue: [actualPoint := actualPoint + (1@0)].
		(facing = #South) ifTrue: [actualPoint := actualPoint - (0@1)].
		].
	(aCommand = $b) ifTrue: [
		(facing = #North) ifTrue: [actualPoint := actualPoint - (0@1)] 
		].
	(aCommand = $l) ifTrue: [
		(facing = #North) ifTrue: [facing := #West. ^self.]. 
		(facing = #West) ifTrue: [facing := #South. ^self.]. 
		(facing = #South) ifTrue: [facing := #East. ^self.]. 
		(facing = #East) ifTrue: [facing := #North. ^self.]. 
		].
	(aCommand = $r) ifTrue: [
		(facing = #Norte) ifTrue: [facing := #East. ^self.].
		(facing = #East) ifTrue: [facing := #South. ^self.]. 
		].
	! !

!testRun: #TestsMarsRover #test01SuccessfullLanding stamp: 'DA 5/12/2023 20:38:40'!
PASSED!

!testRun: #TestsMarsRover #test02ReadingEmptyCommandStayInSamePlace stamp: 'DA 5/12/2023 20:38:40'!
PASSED!

!testRun: #TestsMarsRover #test03MoveFowardMoveNorthOnePointWhenFacingNorth stamp: 'DA 5/12/2023 20:38:40'!
PASSED!

!testRun: #TestsMarsRover #test04MoveBackwardMoveSouthOnePointWhenFacingNorth stamp: 'DA 5/12/2023 20:38:40'!
PASSED!

!testRun: #TestsMarsRover #test05RotatingLeftFromNorthLeavesFacingWest stamp: 'DA 5/12/2023 20:38:40'!
PASSED!

!testRun: #TestsMarsRover #test06RotatingRightFromNorthLeavesFacingEast stamp: 'DA 5/12/2023 20:38:40'!
FAILURE!

!testRun: #TestsMarsRover #test07RotateRightAndMoveFowardMovesOnePointEastWhenFacingNorth stamp: 'DA 5/12/2023 20:38:40'!
FAILURE!

!testRun: #TestsMarsRover #test08RotateRight2TimesAndMoveFowardMovesOnePointSouthWhenFacingNorth stamp: 'DA 5/12/2023 20:38:40'!
FAILURE!

!testRun: #TestsMarsRover #test09Rotate4TimesLeftDoNotChangeOrientation stamp: 'DA 5/12/2023 20:38:40'!
PASSED!

!testRun: #TestsMarsRover #test01SuccessfullLanding stamp: 'DA 5/12/2023 20:38:53'!
PASSED!

!testRun: #TestsMarsRover #test02ReadingEmptyCommandStayInSamePlace stamp: 'DA 5/12/2023 20:38:53'!
PASSED!

!testRun: #TestsMarsRover #test03MoveFowardMoveNorthOnePointWhenFacingNorth stamp: 'DA 5/12/2023 20:38:53'!
PASSED!

!testRun: #TestsMarsRover #test04MoveBackwardMoveSouthOnePointWhenFacingNorth stamp: 'DA 5/12/2023 20:38:53'!
PASSED!

!testRun: #TestsMarsRover #test05RotatingLeftFromNorthLeavesFacingWest stamp: 'DA 5/12/2023 20:38:53'!
PASSED!

!testRun: #TestsMarsRover #test06RotatingRightFromNorthLeavesFacingEast stamp: 'DA 5/12/2023 20:38:53'!
FAILURE!

!testRun: #TestsMarsRover #test07RotateRightAndMoveFowardMovesOnePointEastWhenFacingNorth stamp: 'DA 5/12/2023 20:38:53'!
FAILURE!

!testRun: #TestsMarsRover #test08RotateRight2TimesAndMoveFowardMovesOnePointSouthWhenFacingNorth stamp: 'DA 5/12/2023 20:38:53'!
FAILURE!

!testRun: #TestsMarsRover #test09Rotate4TimesLeftDoNotChangeOrientation stamp: 'DA 5/12/2023 20:38:53'!
PASSED!

!testRun: #TestsMarsRover #test09Rotate4TimesLeftDoNotChangeOrientation stamp: 'DA 5/12/2023 20:39:56'!
PASSED!

!testRun: #TestsMarsRover #test01SuccessfullLanding stamp: 'DA 5/12/2023 20:39:56'!
PASSED!

!testRun: #TestsMarsRover #test02ReadingEmptyCommandStayInSamePlace stamp: 'DA 5/12/2023 20:39:56'!
PASSED!

!testRun: #TestsMarsRover #test03MoveFowardMoveNorthOnePointWhenFacingNorth stamp: 'DA 5/12/2023 20:39:56'!
PASSED!

!testRun: #TestsMarsRover #test04MoveBackwardMoveSouthOnePointWhenFacingNorth stamp: 'DA 5/12/2023 20:39:56'!
PASSED!

!testRun: #TestsMarsRover #test05RotatingLeftFromNorthLeavesFacingWest stamp: 'DA 5/12/2023 20:39:56'!
PASSED!

!testRun: #TestsMarsRover #test06RotatingRightFromNorthLeavesFacingEast stamp: 'DA 5/12/2023 20:39:56'!
FAILURE!

!testRun: #TestsMarsRover #test07RotateRightAndMoveFowardMovesOnePointEastWhenFacingNorth stamp: 'DA 5/12/2023 20:39:56'!
FAILURE!

!testRun: #TestsMarsRover #test08RotateRight2TimesAndMoveFowardMovesOnePointSouthWhenFacingNorth stamp: 'DA 5/12/2023 20:39:56'!
FAILURE!

!testRun: #TestsMarsRover #test09Rotate4TimesLeftDoNotChangeOrientation stamp: 'DA 5/12/2023 20:39:56'!
PASSED!

!testRun: #TestsMarsRover #test01SuccessfullLanding stamp: 'DA 5/12/2023 20:40:15'!
PASSED!

!testRun: #TestsMarsRover #test02ReadingEmptyCommandStayInSamePlace stamp: 'DA 5/12/2023 20:40:15'!
PASSED!

!testRun: #TestsMarsRover #test03MoveFowardMoveNorthOnePointWhenFacingNorth stamp: 'DA 5/12/2023 20:40:15'!
PASSED!

!testRun: #TestsMarsRover #test04MoveBackwardMoveSouthOnePointWhenFacingNorth stamp: 'DA 5/12/2023 20:40:15'!
PASSED!

!testRun: #TestsMarsRover #test05RotatingLeftFromNorthLeavesFacingWest stamp: 'DA 5/12/2023 20:40:15'!
PASSED!

!testRun: #TestsMarsRover #test06RotatingRightFromNorthLeavesFacingEast stamp: 'DA 5/12/2023 20:40:15'!
FAILURE!

!testRun: #TestsMarsRover #test07RotateRightAndMoveFowardMovesOnePointEastWhenFacingNorth stamp: 'DA 5/12/2023 20:40:15'!
FAILURE!

!testRun: #TestsMarsRover #test08RotateRight2TimesAndMoveFowardMovesOnePointSouthWhenFacingNorth stamp: 'DA 5/12/2023 20:40:15'!
FAILURE!

!testRun: #TestsMarsRover #test09Rotate4TimesLeftDoNotChangeOrientation stamp: 'DA 5/12/2023 20:40:15'!
PASSED!

!testRun: #TestsMarsRover #test08RotateRight2TimesAndMoveFowardMovesOnePointSouthWhenFacingNorth stamp: 'DA 5/12/2023 20:40:42'!
FAILURE!

!testRun: #TestsMarsRover #test08RotateRight2TimesAndMoveFowardMovesOnePointSouthWhenFacingNorth stamp: 'DA 5/12/2023 20:40:50'!
FAILURE!

!testRun: #TestsMarsRover #test06RotatingRightFromNorthLeavesFacingEast stamp: 'DA 5/12/2023 20:40:59'!
FAILURE!

!testRun: #TestsMarsRover #test06RotatingRightFromNorthLeavesFacingEast stamp: 'DA 5/12/2023 20:41:17'!
FAILURE!

!testRun: #TestsMarsRover #test01SuccessfullLanding stamp: 'DA 5/12/2023 20:41:52'!
PASSED!

!testRun: #TestsMarsRover #test02ReadingEmptyCommandStayInSamePlace stamp: 'DA 5/12/2023 20:41:52'!
PASSED!

!testRun: #TestsMarsRover #test03MoveFowardMoveNorthOnePointWhenFacingNorth stamp: 'DA 5/12/2023 20:41:52'!
PASSED!

!testRun: #TestsMarsRover #test04MoveBackwardMoveSouthOnePointWhenFacingNorth stamp: 'DA 5/12/2023 20:41:52'!
PASSED!

!testRun: #TestsMarsRover #test05RotatingLeftFromNorthLeavesFacingWest stamp: 'DA 5/12/2023 20:41:52'!
PASSED!

!testRun: #TestsMarsRover #test06RotatingRightFromNorthLeavesFacingEast stamp: 'DA 5/12/2023 20:41:52'!
FAILURE!

!testRun: #TestsMarsRover #test07RotateRightAndMoveFowardMovesOnePointEastWhenFacingNorth stamp: 'DA 5/12/2023 20:41:52'!
FAILURE!

!testRun: #TestsMarsRover #test08RotateRight2TimesAndMoveFowardMovesOnePointSouthWhenFacingNorth stamp: 'DA 5/12/2023 20:41:52'!
FAILURE!

!testRun: #TestsMarsRover #test09Rotate4TimesLeftDoNotChangeOrientation stamp: 'DA 5/12/2023 20:41:52'!
PASSED!

!testRun: #TestsMarsRover #test06RotatingRightFromNorthLeavesFacingEast stamp: 'DA 5/12/2023 20:41:55'!
FAILURE!

!testRun: #TestsMarsRover #test08RotateRight2TimesAndMoveFowardMovesOnePointSouthWhenFacingNorth stamp: 'DA 5/12/2023 20:42:00'!
FAILURE!

!testRun: #TestsMarsRover #test08RotateRight2TimesAndMoveFowardMovesOnePointSouthWhenFacingNorth stamp: 'DA 5/12/2023 20:42:07'!
FAILURE!
!MarsRover methodsFor: 'move' stamp: 'DA 5/12/2023 20:45:06' prior: 50607915!
readACommand: aCommand 
	(aCommand = $f) ifTrue: [
		(facing = #North) ifTrue: [actualPoint := actualPoint + (0@1)]. 
		(facing = #East) ifTrue: [actualPoint := actualPoint + (1@0)].
		(facing = #South) ifTrue: [actualPoint := actualPoint - (0@1)].
		].
	(aCommand = $b) ifTrue: [
		(facing = #North) ifTrue: [actualPoint := actualPoint - (0@1)] 
		].
	(aCommand = $l) ifTrue: [
		(facing = #North) ifTrue: [facing := #West. ^self.]. 
		(facing = #West) ifTrue: [facing := #South. ^self.]. 
		(facing = #South) ifTrue: [facing := #East. ^self.]. 
		(facing = #East) ifTrue: [facing := #North. ^self.]. 
		].
	(aCommand = $r) ifTrue: [
		(facing = #North) ifTrue: [facing := #East. ^self.].
		(facing = #East) ifTrue: [facing := #South. ^self.]. 
		].
	! !

!testRun: #TestsMarsRover #test01SuccessfullLanding stamp: 'DA 5/12/2023 20:45:08'!
PASSED!

!testRun: #TestsMarsRover #test02ReadingEmptyCommandStayInSamePlace stamp: 'DA 5/12/2023 20:45:08'!
PASSED!

!testRun: #TestsMarsRover #test03MoveFowardMoveNorthOnePointWhenFacingNorth stamp: 'DA 5/12/2023 20:45:08'!
PASSED!

!testRun: #TestsMarsRover #test04MoveBackwardMoveSouthOnePointWhenFacingNorth stamp: 'DA 5/12/2023 20:45:08'!
PASSED!

!testRun: #TestsMarsRover #test05RotatingLeftFromNorthLeavesFacingWest stamp: 'DA 5/12/2023 20:45:09'!
PASSED!

!testRun: #TestsMarsRover #test06RotatingRightFromNorthLeavesFacingEast stamp: 'DA 5/12/2023 20:45:09'!
PASSED!

!testRun: #TestsMarsRover #test07RotateRightAndMoveFowardMovesOnePointEastWhenFacingNorth stamp: 'DA 5/12/2023 20:45:09'!
PASSED!

!testRun: #TestsMarsRover #test08RotateRight2TimesAndMoveFowardMovesOnePointSouthWhenFacingNorth stamp: 'DA 5/12/2023 20:45:09'!
PASSED!

!testRun: #TestsMarsRover #test09Rotate4TimesLeftDoNotChangeOrientation stamp: 'DA 5/12/2023 20:45:09'!
PASSED!

----SNAPSHOT----(12 May 2023 20:46:00) CuisUniversity-5690.image priorSource: 8821695!

----SNAPSHOT----(12 May 2023 20:47:21) CuisUniversity-5690.image priorSource: 8849448!
!TestsMarsRover methodsFor: 'as yet unclassified' stamp: 'DA 5/12/2023 22:11:03'!
test02DoesNotMoveWhenNoCommand
	|marsRover|
	
	marsRover := MarsRover startOn: 1@1 facing: #North.
	
	marsRover readCommands: ''.
	
	self assert: (marsRover hasPosition: 1@1 facing: #North).
	"Norte es subclase de Direccion (state)"! !

!methodRemoval: TestsMarsRover #test02ReadingEmptyCommandStayInSamePlace stamp: 'DA 5/12/2023 22:11:03'!
test02ReadingEmptyCommandStayInSamePlace
	|marsRover|
	
	marsRover := MarsRover startOn: 1@1 facing: #North.
	
	marsRover readCommands: ''.
	
	self assert: (marsRover hasPosition: 1@1 facing: #North).
	"Norte es subclase de Direccion (state)"!
!TestsMarsRover methodsFor: 'as yet unclassified' stamp: 'DA 5/12/2023 22:11:12' prior: 50608202!
test02DoesNotMoveWhenNoCommand
	|marsRover|
	
	marsRover := MarsRover startOn: 1@1 facing: #North.
	
	marsRover readACommand: ''.
	
	self assert: (marsRover hasPosition: 1@1 facing: #North).
	"Norte es subclase de Direccion (state)"! !
!TestsMarsRover methodsFor: 'as yet unclassified' stamp: 'DA 5/12/2023 22:11:30'!
test09RotateFourTimesLeftDoNotChangeOrientation
	|marsRover|
	
	marsRover := MarsRover startOn: 1@1 facing: #North.
	
	marsRover readCommands: 'llll'.
	
	self assert: (marsRover hasPosition: 1@1 facing: #North).! !

!methodRemoval: TestsMarsRover #test09Rotate4TimesLeftDoNotChangeOrientation stamp: 'DA 5/12/2023 22:11:30'!
test09Rotate4TimesLeftDoNotChangeOrientation
	|marsRover|
	
	marsRover := MarsRover startOn: 1@1 facing: #North.
	
	marsRover readCommands: 'llll'.
	
	self assert: (marsRover hasPosition: 1@1 facing: #North).!
!TestsMarsRover methodsFor: 'as yet unclassified' stamp: 'DA 5/12/2023 22:11:40'!
test08RotateRightTwoTimesAndMoveFowardMovesOnePointSouthWhenFacingNorth
	|marsRover|
	
	marsRover := MarsRover startOn: 1@1 facing: #North.
	
	marsRover readCommands: 'rrf'.
	
	self assert: (marsRover hasPosition: 1@0 facing: #South).! !

!methodRemoval: TestsMarsRover #test08RotateRight2TimesAndMoveFowardMovesOnePointSouthWhenFacingNorth stamp: 'DA 5/12/2023 22:11:40'!
test08RotateRight2TimesAndMoveFowardMovesOnePointSouthWhenFacingNorth
	|marsRover|
	
	marsRover := MarsRover startOn: 1@1 facing: #North.
	
	marsRover readCommands: 'rrf'.
	
	self assert: (marsRover hasPosition: 1@0 facing: #South).!
!TestsMarsRover methodsFor: 'as yet unclassified' stamp: 'DA 5/12/2023 22:13:52'!
test03IncrementXAfterMovingFowardWhenFacingNorth
	|marsRover|
	
	marsRover := MarsRover startOn: 1@1 facing: #North.
	
	marsRover readACommand: $f.
	
	self assert: (marsRover hasPosition: 1@2 facing: #North).
	"Norte es subclase de Direccion (state)"! !

!methodRemoval: TestsMarsRover #test03MoveFowardMoveNorthOnePointWhenFacingNorth stamp: 'DA 5/12/2023 22:13:52'!
test03MoveFowardMoveNorthOnePointWhenFacingNorth
	|marsRover|
	
	marsRover := MarsRover startOn: 1@1 facing: #North.
	
	marsRover readACommand: $f.
	
	self assert: (marsRover hasPosition: 1@2 facing: #North).
	"Norte es subclase de Direccion (state)"!
!TestsMarsRover methodsFor: 'as yet unclassified' stamp: 'DA 5/12/2023 22:14:46'!
test04DecrementYAfterMovingBackwardWhenFacingNorth
	|marsRover|
	
	marsRover := MarsRover startOn: 1@1 facing: #North.
	
	marsRover readACommand: $b.
	
	self assert: (marsRover hasPosition: 1@0 facing: #North).
	"Norte es subclase de Direccion (state)"! !

!methodRemoval: TestsMarsRover #test04MoveBackwardMoveSouthOnePointWhenFacingNorth stamp: 'DA 5/12/2023 22:14:46'!
test04MoveBackwardMoveSouthOnePointWhenFacingNorth
	|marsRover|
	
	marsRover := MarsRover startOn: 1@1 facing: #North.
	
	marsRover readACommand: $b.
	
	self assert: (marsRover hasPosition: 1@0 facing: #North).
	"Norte es subclase de Direccion (state)"!
!TestsMarsRover methodsFor: 'as yet unclassified' stamp: 'DA 5/12/2023 22:15:26'!
test05FacingWestAfterRotatingLeftWhenFacingNorth
	|marsRover|
	
	marsRover := MarsRover startOn: 1@1 facing: #North.
	
	marsRover readACommand: $l.
	
	self assert: (marsRover hasPosition: 1@1 facing: #West).! !

!methodRemoval: TestsMarsRover #test05RotatingLeftFromNorthLeavesFacingWest stamp: 'DA 5/12/2023 22:15:26'!
test05RotatingLeftFromNorthLeavesFacingWest
	|marsRover|
	
	marsRover := MarsRover startOn: 1@1 facing: #North.
	
	marsRover readACommand: $l.
	
	self assert: (marsRover hasPosition: 1@1 facing: #West).!
!TestsMarsRover methodsFor: 'as yet unclassified' stamp: 'DA 5/12/2023 22:16:08'!
test06FacingEastAfterRotatingRightWhenFacingNorth
	|marsRover|
	
	marsRover := MarsRover startOn: 1@1 facing: #North.
	
	marsRover readACommand: $r.
	
	self assert: (marsRover hasPosition: 1@1 facing: #East).! !

!methodRemoval: TestsMarsRover #test06RotatingRightFromNorthLeavesFacingEast stamp: 'DA 5/12/2023 22:16:08'!
test06RotatingRightFromNorthLeavesFacingEast
	|marsRover|
	
	marsRover := MarsRover startOn: 1@1 facing: #North.
	
	marsRover readACommand: $r.
	
	self assert: (marsRover hasPosition: 1@1 facing: #East).!
!TestsMarsRover methodsFor: 'as yet unclassified' stamp: 'DA 5/12/2023 22:16:40'!
test07IncrementXAfterRotateRightAndMoveFowardWhenFacingNorth
	|marsRover|
	
	marsRover := MarsRover startOn: 1@1 facing: #North.
	
	marsRover readCommands: 'rf'.
	
	self assert: (marsRover hasPosition: 2@1 facing: #East).! !

!methodRemoval: TestsMarsRover #test07RotateRightAndMoveFowardMovesOnePointEastWhenFacingNorth stamp: 'DA 5/12/2023 22:16:40'!
test07RotateRightAndMoveFowardMovesOnePointEastWhenFacingNorth
	|marsRover|
	
	marsRover := MarsRover startOn: 1@1 facing: #North.
	
	marsRover readCommands: 'rf'.
	
	self assert: (marsRover hasPosition: 2@1 facing: #East).!
!TestsMarsRover methodsFor: 'as yet unclassified' stamp: 'DA 5/12/2023 22:17:09'!
test08DecrementYAfterRotateRightTwoTimesAndMoveFowardWhenFacingNorth
	|marsRover|
	
	marsRover := MarsRover startOn: 1@1 facing: #North.
	
	marsRover readCommands: 'rrf'.
	
	self assert: (marsRover hasPosition: 1@0 facing: #South).! !

!methodRemoval: TestsMarsRover #test08RotateRightTwoTimesAndMoveFowardMovesOnePointSouthWhenFacingNorth stamp: 'DA 5/12/2023 22:17:09'!
test08RotateRightTwoTimesAndMoveFowardMovesOnePointSouthWhenFacingNorth
	|marsRover|
	
	marsRover := MarsRover startOn: 1@1 facing: #North.
	
	marsRover readCommands: 'rrf'.
	
	self assert: (marsRover hasPosition: 1@0 facing: #South).!
!MarsRover methodsFor: 'move' stamp: 'DA 5/12/2023 22:18:32' prior: 50607865!
readCommands: aCommandSequence
	aCommandSequence do: [:command | self readACommand: command].
! !
!MarsRover methodsFor: 'comparing' stamp: 'DA 5/12/2023 22:19:00' prior: 50606640!
isActualPosition: aPoint 
	^ actualPoint = aPoint! !
!TestsMarsRover methodsFor: 'tests' stamp: 'DA 5/12/2023 23:00:15'!
test10MoveBackwardAndFowardLeavesInSamePlace
	|marsRover|
	
	marsRover := MarsRover startOn: 1@1 facing: #North.
	
	marsRover readCommands: 'bbff'.
	
	self assert: (marsRover hasPosition: 1@1 facing: #North).! !

!testRun: #TestsMarsRover #test10MoveBackwardAndFowardLeavesInSamePlace stamp: 'DA 5/12/2023 23:00:17'!
PASSED!

!testRun: #TestsMarsRover #test01SuccessfullLanding stamp: 'DA 5/12/2023 23:00:17'!
PASSED!

!testRun: #TestsMarsRover #test02DoesNotMoveWhenNoCommand stamp: 'DA 5/12/2023 23:00:17'!
PASSED!

!testRun: #TestsMarsRover #test03IncrementXAfterMovingFowardWhenFacingNorth stamp: 'DA 5/12/2023 23:00:17'!
PASSED!

!testRun: #TestsMarsRover #test04DecrementYAfterMovingBackwardWhenFacingNorth stamp: 'DA 5/12/2023 23:00:17'!
PASSED!

!testRun: #TestsMarsRover #test05FacingWestAfterRotatingLeftWhenFacingNorth stamp: 'DA 5/12/2023 23:00:17'!
PASSED!

!testRun: #TestsMarsRover #test06FacingEastAfterRotatingRightWhenFacingNorth stamp: 'DA 5/12/2023 23:00:17'!
PASSED!

!testRun: #TestsMarsRover #test07IncrementXAfterRotateRightAndMoveFowardWhenFacingNorth stamp: 'DA 5/12/2023 23:00:17'!
PASSED!

!testRun: #TestsMarsRover #test08DecrementYAfterRotateRightTwoTimesAndMoveFowardWhenFacingNorth stamp: 'DA 5/12/2023 23:00:17'!
PASSED!

!testRun: #TestsMarsRover #test09RotateFourTimesLeftDoNotChangeOrientation stamp: 'DA 5/12/2023 23:00:17'!
PASSED!

!testRun: #TestsMarsRover #test10MoveBackwardAndFowardLeavesInSamePlace stamp: 'DA 5/12/2023 23:00:17'!
PASSED!

!testRun: #TestsMarsRover #test10MoveBackwardAndFowardLeavesInSamePlace stamp: 'DA 5/12/2023 23:00:20'!
PASSED!

!testRun: #TestsMarsRover #test01SuccessfullLanding stamp: 'DA 5/12/2023 23:00:20'!
PASSED!

!testRun: #TestsMarsRover #test02DoesNotMoveWhenNoCommand stamp: 'DA 5/12/2023 23:00:20'!
PASSED!

!testRun: #TestsMarsRover #test03IncrementXAfterMovingFowardWhenFacingNorth stamp: 'DA 5/12/2023 23:00:20'!
PASSED!

!testRun: #TestsMarsRover #test04DecrementYAfterMovingBackwardWhenFacingNorth stamp: 'DA 5/12/2023 23:00:20'!
PASSED!

!testRun: #TestsMarsRover #test05FacingWestAfterRotatingLeftWhenFacingNorth stamp: 'DA 5/12/2023 23:00:20'!
PASSED!

!testRun: #TestsMarsRover #test06FacingEastAfterRotatingRightWhenFacingNorth stamp: 'DA 5/12/2023 23:00:20'!
PASSED!

!testRun: #TestsMarsRover #test07IncrementXAfterRotateRightAndMoveFowardWhenFacingNorth stamp: 'DA 5/12/2023 23:00:20'!
PASSED!

!testRun: #TestsMarsRover #test08DecrementYAfterRotateRightTwoTimesAndMoveFowardWhenFacingNorth stamp: 'DA 5/12/2023 23:00:20'!
PASSED!

!testRun: #TestsMarsRover #test09RotateFourTimesLeftDoNotChangeOrientation stamp: 'DA 5/12/2023 23:00:20'!
PASSED!

!testRun: #TestsMarsRover #test10MoveBackwardAndFowardLeavesInSamePlace stamp: 'DA 5/12/2023 23:00:20'!
PASSED!
!TestsMarsRover methodsFor: 'tests' stamp: 'DA 5/12/2023 23:00:52' prior: 50608413!
test10MoveBackwardAndFowardLeavesInSamePlace
	|marsRover|
	
	marsRover := MarsRover startOn: 1@1 facing: #South.
	
	marsRover readCommands: 'bbff'.
	
	self assert: (marsRover hasPosition: 1@1 facing: #South).! !

!testRun: #TestsMarsRover #test10MoveBackwardAndFowardLeavesInSamePlace stamp: 'DA 5/12/2023 23:00:54'!
FAILURE!
!MarsRover methodsFor: 'move' stamp: 'DA 5/12/2023 23:02:05' prior: 50608137!
readACommand: aCommand 
	(aCommand = $f) ifTrue: [
		(facing = #North) ifTrue: [actualPoint := actualPoint + (0@1)]. 
		(facing = #East) ifTrue: [actualPoint := actualPoint + (1@0)].
		(facing = #South) ifTrue: [actualPoint := actualPoint - (0@1)].
		].
	(aCommand = $b) ifTrue: [
		(facing = #North) ifTrue: [actualPoint := actualPoint - (0@1)]. 
		(facing = #South) ifTrue: [actualPoint := actualPoint + (0@1)]. 
		].
	(aCommand = $l) ifTrue: [
		(facing = #North) ifTrue: [facing := #West. ^self.]. 
		(facing = #West) ifTrue: [facing := #South. ^self.]. 
		(facing = #South) ifTrue: [facing := #East. ^self.]. 
		(facing = #East) ifTrue: [facing := #North. ^self.]. 
		].
	(aCommand = $r) ifTrue: [
		(facing = #North) ifTrue: [facing := #East. ^self.].
		(facing = #East) ifTrue: [facing := #South. ^self.]. 
		].
	! !

!testRun: #TestsMarsRover #test01SuccessfullLanding stamp: 'DA 5/12/2023 23:02:06'!
PASSED!

!testRun: #TestsMarsRover #test02DoesNotMoveWhenNoCommand stamp: 'DA 5/12/2023 23:02:06'!
PASSED!

!testRun: #TestsMarsRover #test03IncrementXAfterMovingFowardWhenFacingNorth stamp: 'DA 5/12/2023 23:02:06'!
PASSED!

!testRun: #TestsMarsRover #test04DecrementYAfterMovingBackwardWhenFacingNorth stamp: 'DA 5/12/2023 23:02:06'!
PASSED!

!testRun: #TestsMarsRover #test05FacingWestAfterRotatingLeftWhenFacingNorth stamp: 'DA 5/12/2023 23:02:06'!
PASSED!

!testRun: #TestsMarsRover #test06FacingEastAfterRotatingRightWhenFacingNorth stamp: 'DA 5/12/2023 23:02:06'!
PASSED!

!testRun: #TestsMarsRover #test07IncrementXAfterRotateRightAndMoveFowardWhenFacingNorth stamp: 'DA 5/12/2023 23:02:06'!
PASSED!

!testRun: #TestsMarsRover #test08DecrementYAfterRotateRightTwoTimesAndMoveFowardWhenFacingNorth stamp: 'DA 5/12/2023 23:02:06'!
PASSED!

!testRun: #TestsMarsRover #test09RotateFourTimesLeftDoNotChangeOrientation stamp: 'DA 5/12/2023 23:02:06'!
PASSED!

!testRun: #TestsMarsRover #test10MoveBackwardAndFowardLeavesInSamePlace stamp: 'DA 5/12/2023 23:02:06'!
PASSED!
!TestsMarsRover methodsFor: 'tests' stamp: 'DA 5/12/2023 23:08:47'!
test11FacingWestAfterRotatingRightAndMovingBackwardsFromSouth
	|marsRover|
	
	marsRover := MarsRover startOn: 1@1 facing: #South.
	
	marsRover readCommands: 'rb'.
	
	self assert: (marsRover hasPosition: 1@1 facing: #West).! !
!TestsMarsRover methodsFor: 'tests' stamp: 'DA 5/12/2023 23:09:53'!
test11IncrementXFacingWestAfterRotatingRightAndMovingBackwardsFromSouth
	|marsRover|
	
	marsRover := MarsRover startOn: 1@1 facing: #South.
	
	marsRover readCommands: 'rb'.
	
	self assert: (marsRover hasPosition: 2@1 facing: #West).! !

!testRun: #TestsMarsRover #test11IncrementXFacingWestAfterRotatingRightAndMovingBackwardsFromSouth stamp: 'DA 5/12/2023 23:09:55'!
FAILURE!
!MarsRover methodsFor: 'move' stamp: 'DA 5/12/2023 23:10:48' prior: 50608515!
readACommand: aCommand 
	(aCommand = $f) ifTrue: [
		(facing = #North) ifTrue: [actualPoint := actualPoint + (0@1)]. 
		(facing = #East) ifTrue: [actualPoint := actualPoint + (1@0)].
		(facing = #South) ifTrue: [actualPoint := actualPoint - (0@1)].
		].
	(aCommand = $b) ifTrue: [
		(facing = #North) ifTrue: [actualPoint := actualPoint - (0@1)]. 
		(facing = #South) ifTrue: [actualPoint := actualPoint + (0@1)]. 
		(facing = #West) ifTrue: [actualPoint := actualPoint + (1@0)]. 
		].
	(aCommand = $l) ifTrue: [
		(facing = #North) ifTrue: [facing := #West. ^self.]. 
		(facing = #West) ifTrue: [facing := #South. ^self.]. 
		(facing = #South) ifTrue: [facing := #East. ^self.]. 
		(facing = #East) ifTrue: [facing := #North. ^self.]. 
		].
	(aCommand = $r) ifTrue: [
		(facing = #North) ifTrue: [facing := #East. ^self.].
		(facing = #East) ifTrue: [facing := #South. ^self.]. 
		(facing = #South) ifTrue: [facing := #West. ^self.]. 
		].
	! !

!testRun: #TestsMarsRover #test01SuccessfullLanding stamp: 'DA 5/12/2023 23:10:50'!
PASSED!

!testRun: #TestsMarsRover #test02DoesNotMoveWhenNoCommand stamp: 'DA 5/12/2023 23:10:50'!
PASSED!

!testRun: #TestsMarsRover #test03IncrementXAfterMovingFowardWhenFacingNorth stamp: 'DA 5/12/2023 23:10:50'!
PASSED!

!testRun: #TestsMarsRover #test04DecrementYAfterMovingBackwardWhenFacingNorth stamp: 'DA 5/12/2023 23:10:50'!
PASSED!

!testRun: #TestsMarsRover #test05FacingWestAfterRotatingLeftWhenFacingNorth stamp: 'DA 5/12/2023 23:10:50'!
PASSED!

!testRun: #TestsMarsRover #test06FacingEastAfterRotatingRightWhenFacingNorth stamp: 'DA 5/12/2023 23:10:50'!
PASSED!

!testRun: #TestsMarsRover #test07IncrementXAfterRotateRightAndMoveFowardWhenFacingNorth stamp: 'DA 5/12/2023 23:10:50'!
PASSED!

!testRun: #TestsMarsRover #test08DecrementYAfterRotateRightTwoTimesAndMoveFowardWhenFacingNorth stamp: 'DA 5/12/2023 23:10:50'!
PASSED!

!testRun: #TestsMarsRover #test09RotateFourTimesLeftDoNotChangeOrientation stamp: 'DA 5/12/2023 23:10:50'!
PASSED!

!testRun: #TestsMarsRover #test10MoveBackwardAndFowardLeavesInSamePlace stamp: 'DA 5/12/2023 23:10:50'!
PASSED!

!testRun: #TestsMarsRover #test11FacingWestAfterRotatingRightAndMovingBackwardsFromSouth stamp: 'DA 5/12/2023 23:10:50'!
FAILURE!

!testRun: #TestsMarsRover #test11IncrementXFacingWestAfterRotatingRightAndMovingBackwardsFromSouth stamp: 'DA 5/12/2023 23:10:50'!
PASSED!

!testRun: #TestsMarsRover #test11FacingWestAfterRotatingRightAndMovingBackwardsFromSouth stamp: 'DA 5/12/2023 23:10:50'!
FAILURE!

!methodRemoval: TestsMarsRover #test11FacingWestAfterRotatingRightAndMovingBackwardsFromSouth stamp: 'DA 5/12/2023 23:11:47'!
test11FacingWestAfterRotatingRightAndMovingBackwardsFromSouth
	|marsRover|
	
	marsRover := MarsRover startOn: 1@1 facing: #South.
	
	marsRover readCommands: 'rb'.
	
	self assert: (marsRover hasPosition: 1@1 facing: #West).!

!testRun: #TestsMarsRover #test11IncrementXFacingWestAfterRotatingRightAndMovingBackwardsFromSouth stamp: 'DA 5/12/2023 23:11:50'!
PASSED!

!testRun: #TestsMarsRover #test01SuccessfullLanding stamp: 'DA 5/12/2023 23:11:50'!
PASSED!

!testRun: #TestsMarsRover #test02DoesNotMoveWhenNoCommand stamp: 'DA 5/12/2023 23:11:50'!
PASSED!

!testRun: #TestsMarsRover #test03IncrementXAfterMovingFowardWhenFacingNorth stamp: 'DA 5/12/2023 23:11:50'!
PASSED!

!testRun: #TestsMarsRover #test04DecrementYAfterMovingBackwardWhenFacingNorth stamp: 'DA 5/12/2023 23:11:50'!
PASSED!

!testRun: #TestsMarsRover #test05FacingWestAfterRotatingLeftWhenFacingNorth stamp: 'DA 5/12/2023 23:11:50'!
PASSED!

!testRun: #TestsMarsRover #test06FacingEastAfterRotatingRightWhenFacingNorth stamp: 'DA 5/12/2023 23:11:50'!
PASSED!

!testRun: #TestsMarsRover #test07IncrementXAfterRotateRightAndMoveFowardWhenFacingNorth stamp: 'DA 5/12/2023 23:11:50'!
PASSED!

!testRun: #TestsMarsRover #test08DecrementYAfterRotateRightTwoTimesAndMoveFowardWhenFacingNorth stamp: 'DA 5/12/2023 23:11:50'!
PASSED!

!testRun: #TestsMarsRover #test09RotateFourTimesLeftDoNotChangeOrientation stamp: 'DA 5/12/2023 23:11:50'!
PASSED!

!testRun: #TestsMarsRover #test10MoveBackwardAndFowardLeavesInSamePlace stamp: 'DA 5/12/2023 23:11:50'!
PASSED!

!testRun: #TestsMarsRover #test11IncrementXFacingWestAfterRotatingRightAndMovingBackwardsFromSouth stamp: 'DA 5/12/2023 23:11:50'!
PASSED!
!TestsMarsRover methodsFor: 'tests' stamp: 'DA 5/12/2023 23:19:17'!
test11DecrementXTwoTimesFacingEastAfterMovingAndRotatingFromWest
	|marsRover|
	
	marsRover := MarsRover startOn: 2@2 facing: #West.
	
	marsRover readCommands: 'frrb'.
	
	self assert: (marsRover hasPosition: 0@2 facing: #East).! !
!TestsMarsRover methodsFor: 'tests' stamp: 'DA 5/12/2023 23:19:31'!
test12DecrementXTwoTimesFacingEastAfterMovingAndRotatingFromWest
	|marsRover|
	
	marsRover := MarsRover startOn: 2@2 facing: #West.
	
	marsRover readCommands: 'frrb'.
	
	self assert: (marsRover hasPosition: 0@2 facing: #East).! !

!methodRemoval: TestsMarsRover #test11DecrementXTwoTimesFacingEastAfterMovingAndRotatingFromWest stamp: 'DA 5/12/2023 23:19:31'!
test11DecrementXTwoTimesFacingEastAfterMovingAndRotatingFromWest
	|marsRover|
	
	marsRover := MarsRover startOn: 2@2 facing: #West.
	
	marsRover readCommands: 'frrb'.
	
	self assert: (marsRover hasPosition: 0@2 facing: #East).!

!testRun: #TestsMarsRover #test12DecrementXTwoTimesFacingEastAfterMovingAndRotatingFromWest stamp: 'DA 5/12/2023 23:20:03'!
FAILURE!
!TestsMarsRover methodsFor: 'tests' stamp: 'DA 5/12/2023 23:22:06'!
test12MovingHorizontallyAfterRotating180Degrees
	|marsRover|
	
	marsRover := MarsRover startOn: 2@2 facing: #West.
	
	marsRover readCommands: 'frrb'.
	
	self assert: (marsRover hasPosition: 0@2 facing: #East).! !

!methodRemoval: TestsMarsRover #test12DecrementXTwoTimesFacingEastAfterMovingAndRotatingFromWest stamp: 'DA 5/12/2023 23:22:09'!
test12DecrementXTwoTimesFacingEastAfterMovingAndRotatingFromWest
	|marsRover|
	
	marsRover := MarsRover startOn: 2@2 facing: #West.
	
	marsRover readCommands: 'frrb'.
	
	self assert: (marsRover hasPosition: 0@2 facing: #East).!

!testRun: #TestsMarsRover #test12MovingHorizontallyAfterRotating180Degrees stamp: 'DA 5/12/2023 23:22:13'!
FAILURE!
!MarsRover methodsFor: 'move' stamp: 'DA 5/12/2023 23:23:08' prior: 50608605!
readACommand: aCommand 
	(aCommand = $f) ifTrue: [
		(facing = #North) ifTrue: [actualPoint := actualPoint + (0@1)]. 
		(facing = #East) ifTrue: [actualPoint := actualPoint + (1@0)].
		(facing = #South) ifTrue: [actualPoint := actualPoint - (0@1)].
		(facing = #West) ifTrue: [actualPoint := actualPoint - (1@0)].
		].
	(aCommand = $b) ifTrue: [
		(facing = #North) ifTrue: [actualPoint := actualPoint - (0@1)]. 
		(facing = #South) ifTrue: [actualPoint := actualPoint + (0@1)]. 
		(facing = #West) ifTrue: [actualPoint := actualPoint + (1@0)]. 
		(facing = #East) ifTrue: [actualPoint := actualPoint - (0@1)].
		].
	(aCommand = $l) ifTrue: [
		(facing = #North) ifTrue: [facing := #West. ^self.]. 
		(facing = #West) ifTrue: [facing := #South. ^self.]. 
		(facing = #South) ifTrue: [facing := #East. ^self.]. 
		(facing = #East) ifTrue: [facing := #North. ^self.]. 
		].
	(aCommand = $r) ifTrue: [
		(facing = #North) ifTrue: [facing := #East. ^self.].
		(facing = #East) ifTrue: [facing := #South. ^self.]. 
		(facing = #South) ifTrue: [facing := #West. ^self.]. 
		].
	! !

!testRun: #TestsMarsRover #test01SuccessfullLanding stamp: 'DA 5/12/2023 23:23:10'!
PASSED!

!testRun: #TestsMarsRover #test02DoesNotMoveWhenNoCommand stamp: 'DA 5/12/2023 23:23:10'!
PASSED!

!testRun: #TestsMarsRover #test03IncrementXAfterMovingFowardWhenFacingNorth stamp: 'DA 5/12/2023 23:23:10'!
PASSED!

!testRun: #TestsMarsRover #test04DecrementYAfterMovingBackwardWhenFacingNorth stamp: 'DA 5/12/2023 23:23:10'!
PASSED!

!testRun: #TestsMarsRover #test05FacingWestAfterRotatingLeftWhenFacingNorth stamp: 'DA 5/12/2023 23:23:10'!
PASSED!

!testRun: #TestsMarsRover #test06FacingEastAfterRotatingRightWhenFacingNorth stamp: 'DA 5/12/2023 23:23:10'!
PASSED!

!testRun: #TestsMarsRover #test07IncrementXAfterRotateRightAndMoveFowardWhenFacingNorth stamp: 'DA 5/12/2023 23:23:10'!
PASSED!

!testRun: #TestsMarsRover #test08DecrementYAfterRotateRightTwoTimesAndMoveFowardWhenFacingNorth stamp: 'DA 5/12/2023 23:23:10'!
PASSED!

!testRun: #TestsMarsRover #test09RotateFourTimesLeftDoNotChangeOrientation stamp: 'DA 5/12/2023 23:23:10'!
PASSED!

!testRun: #TestsMarsRover #test10MoveBackwardAndFowardLeavesInSamePlace stamp: 'DA 5/12/2023 23:23:10'!
PASSED!

!testRun: #TestsMarsRover #test11IncrementXFacingWestAfterRotatingRightAndMovingBackwardsFromSouth stamp: 'DA 5/12/2023 23:23:10'!
PASSED!

!testRun: #TestsMarsRover #test12MovingHorizontallyAfterRotating180Degrees stamp: 'DA 5/12/2023 23:23:10'!
FAILURE!

!testRun: #TestsMarsRover #test12MovingHorizontallyAfterRotating180Degrees stamp: 'DA 5/12/2023 23:23:10'!
FAILURE!
!MarsRover methodsFor: 'move' stamp: 'DA 5/12/2023 23:23:40' prior: 50608801!
readACommand: aCommand 
	(aCommand = $f) ifTrue: [
		(facing = #North) ifTrue: [actualPoint := actualPoint + (0@1)]. 
		(facing = #East) ifTrue: [actualPoint := actualPoint + (1@0)].
		(facing = #South) ifTrue: [actualPoint := actualPoint - (0@1)].
		(facing = #West) ifTrue: [actualPoint := actualPoint - (1@0)].
		].
	(aCommand = $b) ifTrue: [
		(facing = #North) ifTrue: [actualPoint := actualPoint - (0@1)]. 
		(facing = #South) ifTrue: [actualPoint := actualPoint + (0@1)]. 
		(facing = #West) ifTrue: [actualPoint := actualPoint + (1@0)]. 
		(facing = #East) ifTrue: [actualPoint := actualPoint - (0@1)].
		].
	(aCommand = $l) ifTrue: [
		(facing = #North) ifTrue: [facing := #West. ^self.]. 
		(facing = #West) ifTrue: [facing := #South. ^self.]. 
		(facing = #South) ifTrue: [facing := #East. ^self.]. 
		(facing = #East) ifTrue: [facing := #North. ^self.]. 
		].
	(aCommand = $r) ifTrue: [
		(facing = #North) ifTrue: [facing := #East. ^self.].
		(facing = #East) ifTrue: [facing := #South. ^self.]. 
		(facing = #South) ifTrue: [facing := #West. ^self.]. 
		(facing = #West) ifTrue: [facing := #North. ^self.].
		].
	! !

!testRun: #TestsMarsRover #test01SuccessfullLanding stamp: 'DA 5/12/2023 23:23:41'!
PASSED!

!testRun: #TestsMarsRover #test02DoesNotMoveWhenNoCommand stamp: 'DA 5/12/2023 23:23:41'!
PASSED!

!testRun: #TestsMarsRover #test03IncrementXAfterMovingFowardWhenFacingNorth stamp: 'DA 5/12/2023 23:23:41'!
PASSED!

!testRun: #TestsMarsRover #test04DecrementYAfterMovingBackwardWhenFacingNorth stamp: 'DA 5/12/2023 23:23:41'!
PASSED!

!testRun: #TestsMarsRover #test05FacingWestAfterRotatingLeftWhenFacingNorth stamp: 'DA 5/12/2023 23:23:41'!
PASSED!

!testRun: #TestsMarsRover #test06FacingEastAfterRotatingRightWhenFacingNorth stamp: 'DA 5/12/2023 23:23:41'!
PASSED!

!testRun: #TestsMarsRover #test07IncrementXAfterRotateRightAndMoveFowardWhenFacingNorth stamp: 'DA 5/12/2023 23:23:41'!
PASSED!

!testRun: #TestsMarsRover #test08DecrementYAfterRotateRightTwoTimesAndMoveFowardWhenFacingNorth stamp: 'DA 5/12/2023 23:23:41'!
PASSED!

!testRun: #TestsMarsRover #test09RotateFourTimesLeftDoNotChangeOrientation stamp: 'DA 5/12/2023 23:23:41'!
PASSED!

!testRun: #TestsMarsRover #test10MoveBackwardAndFowardLeavesInSamePlace stamp: 'DA 5/12/2023 23:23:42'!
PASSED!

!testRun: #TestsMarsRover #test11IncrementXFacingWestAfterRotatingRightAndMovingBackwardsFromSouth stamp: 'DA 5/12/2023 23:23:42'!
PASSED!

!testRun: #TestsMarsRover #test12MovingHorizontallyAfterRotating180Degrees stamp: 'DA 5/12/2023 23:23:42'!
FAILURE!

!testRun: #TestsMarsRover #test12MovingHorizontallyAfterRotating180Degrees stamp: 'DA 5/12/2023 23:23:42'!
FAILURE!

!testRun: #TestsMarsRover #test01SuccessfullLanding stamp: 'DA 5/12/2023 23:23:46'!
PASSED!

!testRun: #TestsMarsRover #test02DoesNotMoveWhenNoCommand stamp: 'DA 5/12/2023 23:23:46'!
PASSED!

!testRun: #TestsMarsRover #test03IncrementXAfterMovingFowardWhenFacingNorth stamp: 'DA 5/12/2023 23:23:46'!
PASSED!

!testRun: #TestsMarsRover #test04DecrementYAfterMovingBackwardWhenFacingNorth stamp: 'DA 5/12/2023 23:23:46'!
PASSED!

!testRun: #TestsMarsRover #test05FacingWestAfterRotatingLeftWhenFacingNorth stamp: 'DA 5/12/2023 23:23:46'!
PASSED!

!testRun: #TestsMarsRover #test06FacingEastAfterRotatingRightWhenFacingNorth stamp: 'DA 5/12/2023 23:23:46'!
PASSED!

!testRun: #TestsMarsRover #test07IncrementXAfterRotateRightAndMoveFowardWhenFacingNorth stamp: 'DA 5/12/2023 23:23:46'!
PASSED!

!testRun: #TestsMarsRover #test08DecrementYAfterRotateRightTwoTimesAndMoveFowardWhenFacingNorth stamp: 'DA 5/12/2023 23:23:46'!
PASSED!

!testRun: #TestsMarsRover #test09RotateFourTimesLeftDoNotChangeOrientation stamp: 'DA 5/12/2023 23:23:46'!
PASSED!

!testRun: #TestsMarsRover #test10MoveBackwardAndFowardLeavesInSamePlace stamp: 'DA 5/12/2023 23:23:46'!
PASSED!

!testRun: #TestsMarsRover #test11IncrementXFacingWestAfterRotatingRightAndMovingBackwardsFromSouth stamp: 'DA 5/12/2023 23:23:46'!
PASSED!

!testRun: #TestsMarsRover #test12MovingHorizontallyAfterRotating180Degrees stamp: 'DA 5/12/2023 23:23:46'!
FAILURE!

!testRun: #TestsMarsRover #test12MovingHorizontallyAfterRotating180Degrees stamp: 'DA 5/12/2023 23:23:46'!
FAILURE!
!MarsRover methodsFor: 'move' stamp: 'DA 5/12/2023 23:24:00' prior: 50608885!
readACommand: aCommand 
	(aCommand = $f) ifTrue: [
		(facing = #North) ifTrue: [actualPoint := actualPoint + (0@1)]. 
		(facing = #East) ifTrue: [actualPoint := actualPoint + (1@0)].
		(facing = #South) ifTrue: [actualPoint := actualPoint - (0@1)].
		(facing = #West) ifTrue: [actualPoint := actualPoint - (1@0)].
		].
	(aCommand = $b) ifTrue: [
		(facing = #North) ifTrue: [actualPoint := actualPoint - (0@1)]. 
		(facing = #South) ifTrue: [actualPoint := actualPoint + (0@1)]. 
		(facing = #West) ifTrue: [actualPoint := actualPoint + (1@0)]. 
		(facing = #East) ifTrue: [actualPoint := actualPoint - (1@0)].
		].
	(aCommand = $l) ifTrue: [
		(facing = #North) ifTrue: [facing := #West. ^self.]. 
		(facing = #West) ifTrue: [facing := #South. ^self.]. 
		(facing = #South) ifTrue: [facing := #East. ^self.]. 
		(facing = #East) ifTrue: [facing := #North. ^self.]. 
		].
	(aCommand = $r) ifTrue: [
		(facing = #North) ifTrue: [facing := #East. ^self.].
		(facing = #East) ifTrue: [facing := #South. ^self.]. 
		(facing = #South) ifTrue: [facing := #West. ^self.]. 
		(facing = #West) ifTrue: [facing := #North. ^self.].
		].
	! !

!testRun: #TestsMarsRover #test01SuccessfullLanding stamp: 'DA 5/12/2023 23:24:01'!
PASSED!

!testRun: #TestsMarsRover #test02DoesNotMoveWhenNoCommand stamp: 'DA 5/12/2023 23:24:01'!
PASSED!

!testRun: #TestsMarsRover #test03IncrementXAfterMovingFowardWhenFacingNorth stamp: 'DA 5/12/2023 23:24:01'!
PASSED!

!testRun: #TestsMarsRover #test04DecrementYAfterMovingBackwardWhenFacingNorth stamp: 'DA 5/12/2023 23:24:01'!
PASSED!

!testRun: #TestsMarsRover #test05FacingWestAfterRotatingLeftWhenFacingNorth stamp: 'DA 5/12/2023 23:24:01'!
PASSED!

!testRun: #TestsMarsRover #test06FacingEastAfterRotatingRightWhenFacingNorth stamp: 'DA 5/12/2023 23:24:01'!
PASSED!

!testRun: #TestsMarsRover #test07IncrementXAfterRotateRightAndMoveFowardWhenFacingNorth stamp: 'DA 5/12/2023 23:24:01'!
PASSED!

!testRun: #TestsMarsRover #test08DecrementYAfterRotateRightTwoTimesAndMoveFowardWhenFacingNorth stamp: 'DA 5/12/2023 23:24:01'!
PASSED!

!testRun: #TestsMarsRover #test09RotateFourTimesLeftDoNotChangeOrientation stamp: 'DA 5/12/2023 23:24:01'!
PASSED!

!testRun: #TestsMarsRover #test10MoveBackwardAndFowardLeavesInSamePlace stamp: 'DA 5/12/2023 23:24:01'!
PASSED!

!testRun: #TestsMarsRover #test11IncrementXFacingWestAfterRotatingRightAndMovingBackwardsFromSouth stamp: 'DA 5/12/2023 23:24:01'!
PASSED!

!testRun: #TestsMarsRover #test12MovingHorizontallyAfterRotating180Degrees stamp: 'DA 5/12/2023 23:24:01'!
PASSED!
!TestsMarsRover methodsFor: 'tests' stamp: 'DA 5/12/2023 23:34:12'!
test13InvalidCommand
	|marsRover|
	
	marsRover := MarsRover startOn: 2@2 facing: #West.
	
	self 
		should: [ marsRover readACommand: $ñ.] 
		raise: Error 
		withExceptionDo: [ :anError | 
			self assert: anError messageText equals: marsRover invalidCommandError.
			self assert: (marsRover hasPosition: 2@2  facing: #West).]! !

!testRun: #TestsMarsRover #test13InvalidCommand stamp: 'DA 5/12/2023 23:34:38'!
FAILURE!
!TestsMarsRover methodsFor: 'tests' stamp: 'DA 5/12/2023 23:40:41' prior: 50609101!
test13InvalidCommand
	|marsRover|
	
	marsRover := MarsRover startOn: 2@2 facing: #West.
	
	self 
		should: [ marsRover readACommand: $ñ.] 
		raise: Error 
		withExceptionDo: [ :anError | 
			self assert: anError messageText equals: MarsRover invalidCommandError.
			self assert: (marsRover hasPosition: 2@2  facing: #West).]! !
!MarsRover class methodsFor: 'instance creation' stamp: 'DA 5/12/2023 23:41:32'!
invalidCommandErrorDescription
	^ 'Comando erroneo'! !
!TestsMarsRover methodsFor: 'tests' stamp: 'DA 5/12/2023 23:42:33' prior: 50609117!
test13InvalidCommand
	|marsRover|
	
	marsRover := MarsRover startOn: 2@2 facing: #West.
	
	self 
		should: [ marsRover readACommand: $ñ.] 
		raise: Error 
		withExceptionDo: [ :anError | 
			self assert: anError messageText equals: MarsRover invalidCommandErrorDescription.
			self assert: (marsRover hasPosition: 2@2  facing: #West).]! !

!testRun: #TestsMarsRover #test13InvalidCommand stamp: 'DA 5/12/2023 23:42:37'!
FAILURE!
!MarsRover methodsFor: 'move' stamp: 'DA 5/12/2023 23:44:35' prior: 50609019!
readACommand: aCommand 
	(aCommand = $f) ifTrue: [
		(facing = #North) ifTrue: [actualPoint := actualPoint + (0@1)]. 
		(facing = #East) ifTrue: [actualPoint := actualPoint + (1@0)].
		(facing = #South) ifTrue: [actualPoint := actualPoint - (0@1)].
		(facing = #West) ifTrue: [actualPoint := actualPoint - (1@0)].
		].
	(aCommand = $b) ifTrue: [
		(facing = #North) ifTrue: [actualPoint := actualPoint - (0@1)]. 
		(facing = #South) ifTrue: [actualPoint := actualPoint + (0@1)]. 
		(facing = #West) ifTrue: [actualPoint := actualPoint + (1@0)]. 
		(facing = #East) ifTrue: [actualPoint := actualPoint - (1@0)].
		].
	(aCommand = $l) ifTrue: [
		(facing = #North) ifTrue: [facing := #West. ^self.]. 
		(facing = #West) ifTrue: [facing := #South. ^self.]. 
		(facing = #South) ifTrue: [facing := #East. ^self.]. 
		(facing = #East) ifTrue: [facing := #North. ^self.]. 
		].
	(aCommand = $r) ifTrue: [
		(facing = #North) ifTrue: [facing := #East. ^self.].
		(facing = #East) ifTrue: [facing := #South. ^self.]. 
		(facing = #South) ifTrue: [facing := #West. ^self.]. 
		(facing = #West) ifTrue: [facing := #North. ^self.].
		].
	self error: MarsRover invalidCommandErrorDescription.! !

!testRun: #TestsMarsRover #test01SuccessfullLanding stamp: 'DA 5/12/2023 23:44:37'!
PASSED!

!testRun: #TestsMarsRover #test02DoesNotMoveWhenNoCommand stamp: 'DA 5/12/2023 23:44:37'!
ERROR!

!testRun: #TestsMarsRover #test03IncrementXAfterMovingFowardWhenFacingNorth stamp: 'DA 5/12/2023 23:44:37'!
ERROR!

!testRun: #TestsMarsRover #test04DecrementYAfterMovingBackwardWhenFacingNorth stamp: 'DA 5/12/2023 23:44:37'!
ERROR!

!testRun: #TestsMarsRover #test05FacingWestAfterRotatingLeftWhenFacingNorth stamp: 'DA 5/12/2023 23:44:37'!
PASSED!

!testRun: #TestsMarsRover #test06FacingEastAfterRotatingRightWhenFacingNorth stamp: 'DA 5/12/2023 23:44:37'!
PASSED!

!testRun: #TestsMarsRover #test07IncrementXAfterRotateRightAndMoveFowardWhenFacingNorth stamp: 'DA 5/12/2023 23:44:37'!
ERROR!

!testRun: #TestsMarsRover #test08DecrementYAfterRotateRightTwoTimesAndMoveFowardWhenFacingNorth stamp: 'DA 5/12/2023 23:44:37'!
ERROR!

!testRun: #TestsMarsRover #test09RotateFourTimesLeftDoNotChangeOrientation stamp: 'DA 5/12/2023 23:44:37'!
PASSED!

!testRun: #TestsMarsRover #test10MoveBackwardAndFowardLeavesInSamePlace stamp: 'DA 5/12/2023 23:44:37'!
ERROR!

!testRun: #TestsMarsRover #test11IncrementXFacingWestAfterRotatingRightAndMovingBackwardsFromSouth stamp: 'DA 5/12/2023 23:44:37'!
ERROR!

!testRun: #TestsMarsRover #test12MovingHorizontallyAfterRotating180Degrees stamp: 'DA 5/12/2023 23:44:37'!
ERROR!

!testRun: #TestsMarsRover #test13InvalidCommand stamp: 'DA 5/12/2023 23:44:37'!
PASSED!

!testRun: #TestsMarsRover #test01SuccessfullLanding stamp: 'DA 5/12/2023 23:46:37'!
PASSED!

!testRun: #TestsMarsRover #test02DoesNotMoveWhenNoCommand stamp: 'DA 5/12/2023 23:46:37'!
ERROR!

!testRun: #TestsMarsRover #test03IncrementXAfterMovingFowardWhenFacingNorth stamp: 'DA 5/12/2023 23:46:37'!
ERROR!

!testRun: #TestsMarsRover #test04DecrementYAfterMovingBackwardWhenFacingNorth stamp: 'DA 5/12/2023 23:46:37'!
ERROR!

!testRun: #TestsMarsRover #test05FacingWestAfterRotatingLeftWhenFacingNorth stamp: 'DA 5/12/2023 23:46:37'!
PASSED!

!testRun: #TestsMarsRover #test06FacingEastAfterRotatingRightWhenFacingNorth stamp: 'DA 5/12/2023 23:46:37'!
PASSED!

!testRun: #TestsMarsRover #test07IncrementXAfterRotateRightAndMoveFowardWhenFacingNorth stamp: 'DA 5/12/2023 23:46:37'!
ERROR!

!testRun: #TestsMarsRover #test08DecrementYAfterRotateRightTwoTimesAndMoveFowardWhenFacingNorth stamp: 'DA 5/12/2023 23:46:37'!
ERROR!

!testRun: #TestsMarsRover #test09RotateFourTimesLeftDoNotChangeOrientation stamp: 'DA 5/12/2023 23:46:37'!
PASSED!

!testRun: #TestsMarsRover #test10MoveBackwardAndFowardLeavesInSamePlace stamp: 'DA 5/12/2023 23:46:37'!
ERROR!

!testRun: #TestsMarsRover #test11IncrementXFacingWestAfterRotatingRightAndMovingBackwardsFromSouth stamp: 'DA 5/12/2023 23:46:37'!
ERROR!

!testRun: #TestsMarsRover #test12MovingHorizontallyAfterRotating180Degrees stamp: 'DA 5/12/2023 23:46:37'!
ERROR!

!testRun: #TestsMarsRover #test13InvalidCommand stamp: 'DA 5/12/2023 23:46:37'!
PASSED!
!MarsRover methodsFor: 'move' stamp: 'DA 5/12/2023 23:46:55' prior: 50609151!
readACommand: aCommand 
	(aCommand = $f) ifTrue: [
		(facing = #North) ifTrue: [actualPoint := actualPoint + (0@1)]. 
		(facing = #East) ifTrue: [actualPoint := actualPoint + (1@0)].
		(facing = #South) ifTrue: [actualPoint := actualPoint - (0@1)].
		(facing = #West) ifTrue: [actualPoint := actualPoint - (1@0)].
		].
	(aCommand = $b) ifTrue: [
		(facing = #North) ifTrue: [actualPoint := actualPoint - (0@1)]. 
		(facing = #South) ifTrue: [actualPoint := actualPoint + (0@1)]. 
		(facing = #West) ifTrue: [actualPoint := actualPoint + (1@0)]. 
		(facing = #East) ifTrue: [actualPoint := actualPoint - (1@0)].
		].
	(aCommand = $l) ifTrue: [
		(facing = #North) ifTrue: [facing := #West. ^self.]. 
		(facing = #West) ifTrue: [facing := #South. ^self.]. 
		(facing = #South) ifTrue: [facing := #East. ^self.]. 
		(facing = #East) ifTrue: [facing := #North. ^self.]. 
		].
	(aCommand = $r) ifTrue: [
		(facing = #North) ifTrue: [facing := #East. ^self.].
		(facing = #East) ifTrue: [facing := #South. ^self.]. 
		(facing = #South) ifTrue: [facing := #West. ^self.]. 
		(facing = #West) ifTrue: [facing := #North. ^self.].
		] ifFalse:[
	self error: MarsRover invalidCommandErrorDescription.]! !

!testRun: #TestsMarsRover #test01SuccessfullLanding stamp: 'DA 5/12/2023 23:46:57'!
PASSED!

!testRun: #TestsMarsRover #test02DoesNotMoveWhenNoCommand stamp: 'DA 5/12/2023 23:46:57'!
ERROR!

!testRun: #TestsMarsRover #test03IncrementXAfterMovingFowardWhenFacingNorth stamp: 'DA 5/12/2023 23:46:57'!
ERROR!

!testRun: #TestsMarsRover #test04DecrementYAfterMovingBackwardWhenFacingNorth stamp: 'DA 5/12/2023 23:46:57'!
ERROR!

!testRun: #TestsMarsRover #test05FacingWestAfterRotatingLeftWhenFacingNorth stamp: 'DA 5/12/2023 23:46:57'!
PASSED!

!testRun: #TestsMarsRover #test06FacingEastAfterRotatingRightWhenFacingNorth stamp: 'DA 5/12/2023 23:46:57'!
PASSED!

!testRun: #TestsMarsRover #test07IncrementXAfterRotateRightAndMoveFowardWhenFacingNorth stamp: 'DA 5/12/2023 23:46:57'!
ERROR!

!testRun: #TestsMarsRover #test08DecrementYAfterRotateRightTwoTimesAndMoveFowardWhenFacingNorth stamp: 'DA 5/12/2023 23:46:57'!
ERROR!

!testRun: #TestsMarsRover #test09RotateFourTimesLeftDoNotChangeOrientation stamp: 'DA 5/12/2023 23:46:57'!
PASSED!

!testRun: #TestsMarsRover #test10MoveBackwardAndFowardLeavesInSamePlace stamp: 'DA 5/12/2023 23:46:57'!
ERROR!

!testRun: #TestsMarsRover #test11IncrementXFacingWestAfterRotatingRightAndMovingBackwardsFromSouth stamp: 'DA 5/12/2023 23:46:57'!
ERROR!

!testRun: #TestsMarsRover #test12MovingHorizontallyAfterRotating180Degrees stamp: 'DA 5/12/2023 23:46:57'!
ERROR!

!testRun: #TestsMarsRover #test13InvalidCommand stamp: 'DA 5/12/2023 23:46:57'!
PASSED!
!MarsRover methodsFor: 'move' stamp: 'DA 5/12/2023 23:48:21' prior: 50609284!
readACommand: aCommand 
	(aCommand = $f) ifTrue: [
		(facing = #North) ifTrue: [actualPoint := actualPoint + (0@1)]. 
		(facing = #East) ifTrue: [actualPoint := actualPoint + (1@0)].
		(facing = #South) ifTrue: [actualPoint := actualPoint - (0@1)].
		(facing = #West) ifTrue: [actualPoint := actualPoint - (1@0)].
		].
	(aCommand = $b) ifTrue: [
		(facing = #North) ifTrue: [actualPoint := actualPoint - (0@1)]. 
		(facing = #South) ifTrue: [actualPoint := actualPoint + (0@1)]. 
		(facing = #West) ifTrue: [actualPoint := actualPoint + (1@0)]. 
		(facing = #East) ifTrue: [actualPoint := actualPoint - (1@0)].
		].
	(aCommand = $l) ifTrue: [
		(facing = #North) ifTrue: [facing := #West. ^self.]. 
		(facing = #West) ifTrue: [facing := #South. ^self.]. 
		(facing = #South) ifTrue: [facing := #East. ^self.]. 
		(facing = #East) ifTrue: [facing := #North. ^self.]. 
		].
	(aCommand = $r) ifTrue: [
		(facing = #North) ifTrue: [facing := #East. ^self.].
		(facing = #East) ifTrue: [facing := #South. ^self.]. 
		(facing = #South) ifTrue: [facing := #West. ^self.]. 
		(facing = #West) ifTrue: [facing := #North. ^self.].
		].
	(self isValidCommand: aCommand) ifFalse: [self error: MarsRover invalidCommandErrorDescription.]! !

!testRun: #TestsMarsRover #test01SuccessfullLanding stamp: 'DA 5/12/2023 23:48:24'!
PASSED!

!testRun: #TestsMarsRover #test02DoesNotMoveWhenNoCommand stamp: 'DA 5/12/2023 23:48:24'!
ERROR!

!testRun: #TestsMarsRover #test03IncrementXAfterMovingFowardWhenFacingNorth stamp: 'DA 5/12/2023 23:48:24'!
ERROR!

!testRun: #TestsMarsRover #test04DecrementYAfterMovingBackwardWhenFacingNorth stamp: 'DA 5/12/2023 23:48:24'!
ERROR!

!testRun: #TestsMarsRover #test05FacingWestAfterRotatingLeftWhenFacingNorth stamp: 'DA 5/12/2023 23:48:24'!
PASSED!

!testRun: #TestsMarsRover #test06FacingEastAfterRotatingRightWhenFacingNorth stamp: 'DA 5/12/2023 23:48:24'!
PASSED!

!testRun: #TestsMarsRover #test07IncrementXAfterRotateRightAndMoveFowardWhenFacingNorth stamp: 'DA 5/12/2023 23:48:24'!
ERROR!

!testRun: #TestsMarsRover #test08DecrementYAfterRotateRightTwoTimesAndMoveFowardWhenFacingNorth stamp: 'DA 5/12/2023 23:48:24'!
ERROR!

!testRun: #TestsMarsRover #test09RotateFourTimesLeftDoNotChangeOrientation stamp: 'DA 5/12/2023 23:48:24'!
PASSED!

!testRun: #TestsMarsRover #test10MoveBackwardAndFowardLeavesInSamePlace stamp: 'DA 5/12/2023 23:48:24'!
ERROR!

!testRun: #TestsMarsRover #test11IncrementXFacingWestAfterRotatingRightAndMovingBackwardsFromSouth stamp: 'DA 5/12/2023 23:48:24'!
ERROR!

!testRun: #TestsMarsRover #test12MovingHorizontallyAfterRotating180Degrees stamp: 'DA 5/12/2023 23:48:24'!
ERROR!

!testRun: #TestsMarsRover #test13InvalidCommand stamp: 'DA 5/12/2023 23:48:24'!
FAILURE!

!testRun: #TestsMarsRover #test02DoesNotMoveWhenNoCommand stamp: 'DA 5/12/2023 23:48:26'!
ERROR!
!MarsRover methodsFor: 'category-name' stamp: 'DA 5/12/2023 23:48:35'!
isValidCommand: aCommand 
	self shouldBeImplemented.! !
!MarsRover methodsFor: 'category-name' stamp: 'DA 5/12/2023 23:48:58' prior: 50609462!
isValidCommand: aCommand 
	^(aCommand = $ñ) not! !

!testRun: #TestsMarsRover #test02DoesNotMoveWhenNoCommand stamp: 'DA 5/12/2023 23:49:00'!
PASSED!

!testRun: #TestsMarsRover #test01SuccessfullLanding stamp: 'DA 5/12/2023 23:49:01'!
PASSED!

!testRun: #TestsMarsRover #test05FacingWestAfterRotatingLeftWhenFacingNorth stamp: 'DA 5/12/2023 23:49:01'!
PASSED!

!testRun: #TestsMarsRover #test06FacingEastAfterRotatingRightWhenFacingNorth stamp: 'DA 5/12/2023 23:49:01'!
PASSED!

!testRun: #TestsMarsRover #test09RotateFourTimesLeftDoNotChangeOrientation stamp: 'DA 5/12/2023 23:49:01'!
PASSED!

!testRun: #TestsMarsRover #test02DoesNotMoveWhenNoCommand stamp: 'DA 5/12/2023 23:49:01'!
PASSED!

!testRun: #TestsMarsRover #test03IncrementXAfterMovingFowardWhenFacingNorth stamp: 'DA 5/12/2023 23:49:01'!
PASSED!

!testRun: #TestsMarsRover #test04DecrementYAfterMovingBackwardWhenFacingNorth stamp: 'DA 5/12/2023 23:49:01'!
PASSED!

!testRun: #TestsMarsRover #test07IncrementXAfterRotateRightAndMoveFowardWhenFacingNorth stamp: 'DA 5/12/2023 23:49:01'!
PASSED!

!testRun: #TestsMarsRover #test08DecrementYAfterRotateRightTwoTimesAndMoveFowardWhenFacingNorth stamp: 'DA 5/12/2023 23:49:01'!
PASSED!

!testRun: #TestsMarsRover #test10MoveBackwardAndFowardLeavesInSamePlace stamp: 'DA 5/12/2023 23:49:01'!
PASSED!

!testRun: #TestsMarsRover #test11IncrementXFacingWestAfterRotatingRightAndMovingBackwardsFromSouth stamp: 'DA 5/12/2023 23:49:01'!
PASSED!

!testRun: #TestsMarsRover #test12MovingHorizontallyAfterRotating180Degrees stamp: 'DA 5/12/2023 23:49:01'!
PASSED!

!testRun: #TestsMarsRover #test13InvalidCommand stamp: 'DA 5/12/2023 23:49:01'!
PASSED!
!TestsMarsRover methodsFor: 'tests' stamp: 'DA 5/12/2023 23:50:03'!
test13InvalidCommandNotAllowed
	|marsRover|
	
	marsRover := MarsRover startOn: 2@2 facing: #West.
	
	self 
		should: [ marsRover readACommand: $ñ.] 
		raise: Error 
		withExceptionDo: [ :anError | 
			self assert: anError messageText equals: MarsRover invalidCommandErrorDescription.
			self assert: (marsRover hasPosition: 2@2  facing: #West).]! !

!methodRemoval: TestsMarsRover #test13InvalidCommand stamp: 'DA 5/12/2023 23:50:03'!
test13InvalidCommand
	|marsRover|
	
	marsRover := MarsRover startOn: 2@2 facing: #West.
	
	self 
		should: [ marsRover readACommand: $ñ.] 
		raise: Error 
		withExceptionDo: [ :anError | 
			self assert: anError messageText equals: MarsRover invalidCommandErrorDescription.
			self assert: (marsRover hasPosition: 2@2  facing: #West).]!
!TestsMarsRover methodsFor: 'tests' stamp: 'DA 5/12/2023 23:57:21'!
test14OnlyExecutePreviousCommandsBeforeInvalidOne
	|marsRover|
	
	marsRover := MarsRover startOn: 2@2 facing: #West.
	
	self 
		should: [	marsRover readCommands: 'fyb'.]
		raise: Error
		withExceptionDo: [:anError |
			self assert: anError messageText equals: MarsRover invalidCommandErrorDescription.
			self assert: (marsRover hasPosition: 1@2 facing: #West).]
			 ! !

!testRun: #TestsMarsRover #test14OnlyExecutePreviousCommandsBeforeInvalidOne stamp: 'DA 5/12/2023 23:57:24'!
FAILURE!
!MarsRover methodsFor: 'category-name' stamp: 'DA 5/12/2023 23:58:32' prior: 50609467!
isValidCommand: aCommand 
	^(aCommand = $y) not! !

!testRun: #TestsMarsRover #test01SuccessfullLanding stamp: 'DA 5/12/2023 23:58:33'!
PASSED!

!testRun: #TestsMarsRover #test02DoesNotMoveWhenNoCommand stamp: 'DA 5/12/2023 23:58:33'!
PASSED!

!testRun: #TestsMarsRover #test03IncrementXAfterMovingFowardWhenFacingNorth stamp: 'DA 5/12/2023 23:58:33'!
PASSED!

!testRun: #TestsMarsRover #test04DecrementYAfterMovingBackwardWhenFacingNorth stamp: 'DA 5/12/2023 23:58:33'!
PASSED!

!testRun: #TestsMarsRover #test05FacingWestAfterRotatingLeftWhenFacingNorth stamp: 'DA 5/12/2023 23:58:33'!
PASSED!

!testRun: #TestsMarsRover #test06FacingEastAfterRotatingRightWhenFacingNorth stamp: 'DA 5/12/2023 23:58:33'!
PASSED!

!testRun: #TestsMarsRover #test07IncrementXAfterRotateRightAndMoveFowardWhenFacingNorth stamp: 'DA 5/12/2023 23:58:33'!
PASSED!

!testRun: #TestsMarsRover #test08DecrementYAfterRotateRightTwoTimesAndMoveFowardWhenFacingNorth stamp: 'DA 5/12/2023 23:58:33'!
PASSED!

!testRun: #TestsMarsRover #test09RotateFourTimesLeftDoNotChangeOrientation stamp: 'DA 5/12/2023 23:58:33'!
PASSED!

!testRun: #TestsMarsRover #test10MoveBackwardAndFowardLeavesInSamePlace stamp: 'DA 5/12/2023 23:58:33'!
PASSED!

!testRun: #TestsMarsRover #test11IncrementXFacingWestAfterRotatingRightAndMovingBackwardsFromSouth stamp: 'DA 5/12/2023 23:58:33'!
PASSED!

!testRun: #TestsMarsRover #test12MovingHorizontallyAfterRotating180Degrees stamp: 'DA 5/12/2023 23:58:33'!
PASSED!

!testRun: #TestsMarsRover #test13InvalidCommandNotAllowed stamp: 'DA 5/12/2023 23:58:33'!
FAILURE!

!testRun: #TestsMarsRover #test14OnlyExecutePreviousCommandsBeforeInvalidOne stamp: 'DA 5/12/2023 23:58:33'!
PASSED!

!testRun: #TestsMarsRover #test13InvalidCommandNotAllowed stamp: 'DA 5/12/2023 23:58:33'!
FAILURE!
!MarsRover methodsFor: 'commands' stamp: 'DA 5/13/2023 00:00:20'!
isFowardCommand: aCommand
	^ aCommand = $f! !
!MarsRover methodsFor: 'commands' stamp: 'DA 5/13/2023 00:00:30'!
isBackwardCommand: aCommand
	^ aCommand = $b! !
!MarsRover methodsFor: 'commands' stamp: 'DA 5/13/2023 00:00:41'!
isRightCommand: aCommand
	^ aCommand = $r! !
!MarsRover methodsFor: 'commands' stamp: 'DA 5/13/2023 00:00:48'!
isLeftCommand: aCommand
	^ aCommand = $l! !
!MarsRover methodsFor: 'commands' stamp: 'DA 5/13/2023 00:01:43'!
isInvalidCommand: aCommand 
	^(aCommand = $y) not! !

!methodRemoval: MarsRover #isValidCommand: stamp: 'DA 5/13/2023 00:01:51'!
isValidCommand: aCommand 
	^(aCommand = $y) not!
!MarsRover methodsFor: 'commands' stamp: 'DA 5/13/2023 00:02:05'!
isRotateLeftCommand: aCommand
	^ aCommand = $l! !

!methodRemoval: MarsRover #isLeftCommand: stamp: 'DA 5/13/2023 00:02:05'!
isLeftCommand: aCommand
	^ aCommand = $l!
!MarsRover methodsFor: 'commands' stamp: 'DA 5/13/2023 00:02:14'!
isRotateRightCommand: aCommand
	^ aCommand = $r! !

!methodRemoval: MarsRover #isRightCommand: stamp: 'DA 5/13/2023 00:02:14'!
isRightCommand: aCommand
	^ aCommand = $r!
!MarsRover methodsFor: 'commands' stamp: 'DA 5/13/2023 00:02:48' prior: 50609641!
isInvalidCommand: aCommand 
	^(aCommand = $y) or: (aCommand = $ñ)! !
!MarsRover methodsFor: 'move' stamp: 'DA 5/13/2023 00:03:07' prior: 50609371!
readACommand: aCommand 
	(aCommand = $f) ifTrue: [
		(facing = #North) ifTrue: [actualPoint := actualPoint + (0@1)]. 
		(facing = #East) ifTrue: [actualPoint := actualPoint + (1@0)].
		(facing = #South) ifTrue: [actualPoint := actualPoint - (0@1)].
		(facing = #West) ifTrue: [actualPoint := actualPoint - (1@0)].
		].
	(aCommand = $b) ifTrue: [
		(facing = #North) ifTrue: [actualPoint := actualPoint - (0@1)]. 
		(facing = #South) ifTrue: [actualPoint := actualPoint + (0@1)]. 
		(facing = #West) ifTrue: [actualPoint := actualPoint + (1@0)]. 
		(facing = #East) ifTrue: [actualPoint := actualPoint - (1@0)].
		].
	(aCommand = $l) ifTrue: [
		(facing = #North) ifTrue: [facing := #West. ^self.]. 
		(facing = #West) ifTrue: [facing := #South. ^self.]. 
		(facing = #South) ifTrue: [facing := #East. ^self.]. 
		(facing = #East) ifTrue: [facing := #North. ^self.]. 
		].
	(aCommand = $r) ifTrue: [
		(facing = #North) ifTrue: [facing := #East. ^self.].
		(facing = #East) ifTrue: [facing := #South. ^self.]. 
		(facing = #South) ifTrue: [facing := #West. ^self.]. 
		(facing = #West) ifTrue: [facing := #North. ^self.].
		].
	(self isInvalidCommand: aCommand) ifTrue: [self error: MarsRover invalidCommandErrorDescription.]! !

!testRun: #TestsMarsRover #test01SuccessfullLanding stamp: 'DA 5/13/2023 00:03:08'!
PASSED!

!testRun: #TestsMarsRover #test02DoesNotMoveWhenNoCommand stamp: 'DA 5/13/2023 00:03:08'!
PASSED!

!testRun: #TestsMarsRover #test03IncrementXAfterMovingFowardWhenFacingNorth stamp: 'DA 5/13/2023 00:03:08'!
PASSED!

!testRun: #TestsMarsRover #test04DecrementYAfterMovingBackwardWhenFacingNorth stamp: 'DA 5/13/2023 00:03:08'!
PASSED!

!testRun: #TestsMarsRover #test05FacingWestAfterRotatingLeftWhenFacingNorth stamp: 'DA 5/13/2023 00:03:08'!
PASSED!

!testRun: #TestsMarsRover #test06FacingEastAfterRotatingRightWhenFacingNorth stamp: 'DA 5/13/2023 00:03:08'!
PASSED!

!testRun: #TestsMarsRover #test07IncrementXAfterRotateRightAndMoveFowardWhenFacingNorth stamp: 'DA 5/13/2023 00:03:08'!
PASSED!

!testRun: #TestsMarsRover #test08DecrementYAfterRotateRightTwoTimesAndMoveFowardWhenFacingNorth stamp: 'DA 5/13/2023 00:03:08'!
PASSED!

!testRun: #TestsMarsRover #test09RotateFourTimesLeftDoNotChangeOrientation stamp: 'DA 5/13/2023 00:03:08'!
PASSED!

!testRun: #TestsMarsRover #test10MoveBackwardAndFowardLeavesInSamePlace stamp: 'DA 5/13/2023 00:03:08'!
PASSED!

!testRun: #TestsMarsRover #test11IncrementXFacingWestAfterRotatingRightAndMovingBackwardsFromSouth stamp: 'DA 5/13/2023 00:03:08'!
PASSED!

!testRun: #TestsMarsRover #test12MovingHorizontallyAfterRotating180Degrees stamp: 'DA 5/13/2023 00:03:08'!
PASSED!

!testRun: #TestsMarsRover #test13InvalidCommandNotAllowed stamp: 'DA 5/13/2023 00:03:08'!
PASSED!

!testRun: #TestsMarsRover #test14OnlyExecutePreviousCommandsBeforeInvalidOne stamp: 'DA 5/13/2023 00:03:08'!
PASSED!

Object subclass: #MarsRoverFacing
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Mars Rover'!

!classDefinition: #MarsRoverFacing category: 'Mars Rover' stamp: 'DA 5/13/2023 00:04:40'!
Object subclass: #MarsRoverFacing
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Mars Rover'!

MarsRoverFacing subclass: #MarsRoverFacingNorth
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Mars Rover'!

!classDefinition: #MarsRoverFacingNorth category: 'Mars Rover' stamp: 'DA 5/13/2023 00:05:05'!
MarsRoverFacing subclass: #MarsRoverFacingNorth
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Mars Rover'!

MarsRoverFacing subclass: #MarsRoverFacingSouth
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Mars Rover'!

!classDefinition: #MarsRoverFacingSouth category: 'Mars Rover' stamp: 'DA 5/13/2023 00:05:10'!
MarsRoverFacing subclass: #MarsRoverFacingSouth
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Mars Rover'!

MarsRoverFacing subclass: #MarsRoverFacingEast
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Mars Rover'!

!classDefinition: #MarsRoverFacingEast category: 'Mars Rover' stamp: 'DA 5/13/2023 00:05:13'!
MarsRoverFacing subclass: #MarsRoverFacingEast
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Mars Rover'!

MarsRoverFacing subclass: #MarsRoverFacingWest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Mars Rover'!

!classDefinition: #MarsRoverFacingWest category: 'Mars Rover' stamp: 'DA 5/13/2023 00:05:18'!
MarsRoverFacing subclass: #MarsRoverFacingWest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Mars Rover'!
!MarsRoverFacing methodsFor: 'no messages' stamp: 'DA 5/13/2023 00:06:25'!
moveFoward
	^self subclassResponsibility ! !
!MarsRoverFacing methodsFor: 'as yet unclassified' stamp: 'DA 5/13/2023 00:06:31'!
moveBackward
	^self subclassResponsibility ! !
!MarsRoverFacing methodsFor: 'as yet unclassified' stamp: 'DA 5/13/2023 00:06:38'!
rotateLeft
	^self subclassResponsibility ! !
!MarsRoverFacing methodsFor: 'as yet unclassified' stamp: 'DA 5/13/2023 00:06:44'!
rotateRight
	^self subclassResponsibility ! !

Object subclass: #MarsRoverFacing
	instanceVariableNames: 'marsRover'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Mars Rover'!

!classDefinition: #MarsRoverFacing category: 'Mars Rover' stamp: 'DA 5/13/2023 00:07:33'!
Object subclass: #MarsRoverFacing
	instanceVariableNames: 'marsRover'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Mars Rover'!
!MarsRoverFacing class methodsFor: 'no messages' stamp: 'DA 5/13/2023 00:08:15'!
for: aMarsRover
	^ self initializeFor: aMarsRover! !
!MarsRoverFacing methodsFor: 'nil' stamp: 'DA 5/13/2023 00:08:36'!
initializeFor: aMarsRover
	marsRover := aMarsRover ! !

----SNAPSHOT----(13 May 2023 00:12:08) CuisUniversity-5690.image priorSource: 8849536!
!MarsRover methodsFor: 'move' stamp: 'DA 5/13/2023 00:21:15' prior: 50609670!
readACommand: aCommand 
	(aCommand = $f) ifTrue: [
		(facing = #North) ifTrue: [(actualPoint := actualPoint + (0@1))]. 
		(facing = #East) ifTrue: [actualPoint := actualPoint + (1@0)].
		(facing = #South) ifTrue: [actualPoint := actualPoint - (0@1)].
		(facing = #West) ifTrue: [actualPoint := actualPoint - (1@0)].
		].
	(aCommand = $b) ifTrue: [
		(facing = #North) ifTrue: [actualPoint := actualPoint - (0@1)]. 
		(facing = #South) ifTrue: [(actualPoint := actualPoint + (0@1))]. 
		(facing = #West) ifTrue: [actualPoint := actualPoint + (1@0)]. 
		(facing = #East) ifTrue: [actualPoint := actualPoint - (1@0)].
		].
	(aCommand = $l) ifTrue: [
		(facing = #North) ifTrue: [facing := #West. ^self.]. 
		(facing = #West) ifTrue: [facing := #South. ^self.]. 
		(facing = #South) ifTrue: [facing := #East. ^self.]. 
		(facing = #East) ifTrue: [facing := #North. ^self.]. 
		].
	(aCommand = $r) ifTrue: [
		(facing = #North) ifTrue: [facing := #East. ^self.].
		(facing = #East) ifTrue: [facing := #South. ^self.]. 
		(facing = #South) ifTrue: [facing := #West. ^self.]. 
		(facing = #West) ifTrue: [facing := #North. ^self.].
		].
	(self isInvalidCommand: aCommand) ifTrue: [self error: MarsRover invalidCommandErrorDescription.]! !
!MarsRover methodsFor: 'nil' stamp: 'DA 5/13/2023 00:21:56'!
moveNorth
	actualPoint := actualPoint + (0@1)! !
!MarsRover methodsFor: 'move' stamp: 'DA 5/13/2023 00:22:25' prior: 50609862!
readACommand: aCommand 
	(aCommand = $f) ifTrue: [
		(facing = #North) ifTrue: [^ self moveNorth ]. 
		(facing = #East) ifTrue: [actualPoint := actualPoint + (1@0)].
		(facing = #South) ifTrue: [actualPoint := actualPoint - (0@1)].
		(facing = #West) ifTrue: [actualPoint := actualPoint - (1@0)].
		].
	(aCommand = $b) ifTrue: [
		(facing = #North) ifTrue: [actualPoint := actualPoint - (0@1)]. 
		(facing = #South) ifTrue: [^self moveNorth]. 
		(facing = #West) ifTrue: [actualPoint := actualPoint + (1@0)]. 
		(facing = #East) ifTrue: [actualPoint := actualPoint - (1@0)].
		].
	(aCommand = $l) ifTrue: [
		(facing = #North) ifTrue: [facing := #West. ^self.]. 
		(facing = #West) ifTrue: [facing := #South. ^self.]. 
		(facing = #South) ifTrue: [facing := #East. ^self.]. 
		(facing = #East) ifTrue: [facing := #North. ^self.]. 
		].
	(aCommand = $r) ifTrue: [
		(facing = #North) ifTrue: [facing := #East. ^self.].
		(facing = #East) ifTrue: [facing := #South. ^self.]. 
		(facing = #South) ifTrue: [facing := #West. ^self.]. 
		(facing = #West) ifTrue: [facing := #North. ^self.].
		].
	(self isInvalidCommand: aCommand) ifTrue: [self error: MarsRover invalidCommandErrorDescription.]! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'DA 5/13/2023 00:22:50'!
moveEast
	actualPoint := actualPoint + (1@0)! !
!MarsRover methodsFor: 'move' stamp: 'DA 5/13/2023 00:23:36' prior: 50609907!
readACommand: aCommand 
	(aCommand = $f) ifTrue: [
		(facing = #North) ifTrue: [^ self moveNorth ]. 
		(facing = #East) ifTrue: [^self moveEast].
		(facing = #South) ifTrue: [actualPoint := actualPoint - (0@1)].
		(facing = #West) ifTrue: [actualPoint := actualPoint - (1@0)].
		].
	(aCommand = $b) ifTrue: [
		(facing = #North) ifTrue: [actualPoint := actualPoint - (0@1)]. 
		(facing = #South) ifTrue: [^self moveNorth]. 
		(facing = #West) ifTrue: [^self moveEast]. 
		(facing = #East) ifTrue: [actualPoint := actualPoint - (1@0)].
		].
	(aCommand = $l) ifTrue: [
		(facing = #North) ifTrue: [facing := #West. ^self.]. 
		(facing = #West) ifTrue: [facing := #South. ^self.]. 
		(facing = #South) ifTrue: [facing := #East. ^self.]. 
		(facing = #East) ifTrue: [facing := #North. ^self.]. 
		].
	(aCommand = $r) ifTrue: [
		(facing = #North) ifTrue: [facing := #East. ^self.].
		(facing = #East) ifTrue: [facing := #South. ^self.]. 
		(facing = #South) ifTrue: [facing := #West. ^self.]. 
		(facing = #West) ifTrue: [facing := #North. ^self.].
		].
	(self isInvalidCommand: aCommand) ifTrue: [self error: MarsRover invalidCommandErrorDescription.]! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'DA 5/13/2023 00:23:59'!
moveSouth
	actualPoint := actualPoint - (0@1)! !
!MarsRover methodsFor: 'move' stamp: 'DA 5/13/2023 00:24:29' prior: 50609951!
readACommand: aCommand 
	(aCommand = $f) ifTrue: [
		(facing = #North) ifTrue: [^ self moveNorth ]. 
		(facing = #East) ifTrue: [^self moveEast].
		(facing = #South) ifTrue: [^self moveSouth].
		(facing = #West) ifTrue: [actualPoint := actualPoint - (1@0)].
		].
	(aCommand = $b) ifTrue: [
		(facing = #North) ifTrue: [^self moveSouth ]. 
		(facing = #South) ifTrue: [^self moveNorth]. 
		(facing = #West) ifTrue: [^self moveEast]. 
		(facing = #East) ifTrue: [actualPoint := actualPoint - (1@0)].
		].
	(aCommand = $l) ifTrue: [
		(facing = #North) ifTrue: [facing := #West. ^self.]. 
		(facing = #West) ifTrue: [facing := #South. ^self.]. 
		(facing = #South) ifTrue: [facing := #East. ^self.]. 
		(facing = #East) ifTrue: [facing := #North. ^self.]. 
		].
	(aCommand = $r) ifTrue: [
		(facing = #North) ifTrue: [facing := #East. ^self.].
		(facing = #East) ifTrue: [facing := #South. ^self.]. 
		(facing = #South) ifTrue: [facing := #West. ^self.]. 
		(facing = #West) ifTrue: [facing := #North. ^self.].
		].
	(self isInvalidCommand: aCommand) ifTrue: [self error: MarsRover invalidCommandErrorDescription.]! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'DA 5/13/2023 00:24:45'!
moveWest
	actualPoint := actualPoint - (1@0)! !
!MarsRover methodsFor: 'move' stamp: 'DA 5/13/2023 00:25:09' prior: 50609994!
readACommand: aCommand 
	(aCommand = $f) ifTrue: [
		(facing = #North) ifTrue: [^ self moveNorth ]. 
		(facing = #East) ifTrue: [^self moveEast].
		(facing = #South) ifTrue: [^self moveSouth].
		(facing = #West) ifTrue: [^self moveWest].
		].
	(aCommand = $b) ifTrue: [
		(facing = #North) ifTrue: [^self moveSouth ]. 
		(facing = #South) ifTrue: [^self moveNorth]. 
		(facing = #West) ifTrue: [^self moveEast]. 
		(facing = #East) ifTrue: [^self moveWest].
		].
	(aCommand = $l) ifTrue: [
		(facing = #North) ifTrue: [facing := #West. ^self.]. 
		(facing = #West) ifTrue: [facing := #South. ^self.]. 
		(facing = #South) ifTrue: [facing := #East. ^self.]. 
		(facing = #East) ifTrue: [facing := #North. ^self.]. 
		].
	(aCommand = $r) ifTrue: [
		(facing = #North) ifTrue: [facing := #East. ^self.].
		(facing = #East) ifTrue: [facing := #South. ^self.]. 
		(facing = #South) ifTrue: [facing := #West. ^self.]. 
		(facing = #West) ifTrue: [facing := #North. ^self.].
		].
	(self isInvalidCommand: aCommand) ifTrue: [self error: MarsRover invalidCommandErrorDescription.]! !

!testRun: #TestsMarsRover #test01SuccessfullLanding stamp: 'DA 5/13/2023 00:25:11'!
PASSED!

!testRun: #TestsMarsRover #test02DoesNotMoveWhenNoCommand stamp: 'DA 5/13/2023 00:25:11'!
PASSED!

!testRun: #TestsMarsRover #test03IncrementXAfterMovingFowardWhenFacingNorth stamp: 'DA 5/13/2023 00:25:11'!
PASSED!

!testRun: #TestsMarsRover #test04DecrementYAfterMovingBackwardWhenFacingNorth stamp: 'DA 5/13/2023 00:25:11'!
PASSED!

!testRun: #TestsMarsRover #test05FacingWestAfterRotatingLeftWhenFacingNorth stamp: 'DA 5/13/2023 00:25:11'!
PASSED!

!testRun: #TestsMarsRover #test06FacingEastAfterRotatingRightWhenFacingNorth stamp: 'DA 5/13/2023 00:25:11'!
PASSED!

!testRun: #TestsMarsRover #test07IncrementXAfterRotateRightAndMoveFowardWhenFacingNorth stamp: 'DA 5/13/2023 00:25:11'!
PASSED!

!testRun: #TestsMarsRover #test08DecrementYAfterRotateRightTwoTimesAndMoveFowardWhenFacingNorth stamp: 'DA 5/13/2023 00:25:11'!
PASSED!

!testRun: #TestsMarsRover #test09RotateFourTimesLeftDoNotChangeOrientation stamp: 'DA 5/13/2023 00:25:11'!
PASSED!

!testRun: #TestsMarsRover #test10MoveBackwardAndFowardLeavesInSamePlace stamp: 'DA 5/13/2023 00:25:11'!
PASSED!

!testRun: #TestsMarsRover #test11IncrementXFacingWestAfterRotatingRightAndMovingBackwardsFromSouth stamp: 'DA 5/13/2023 00:25:11'!
PASSED!

!testRun: #TestsMarsRover #test12MovingHorizontallyAfterRotating180Degrees stamp: 'DA 5/13/2023 00:25:11'!
PASSED!

!testRun: #TestsMarsRover #test13InvalidCommandNotAllowed stamp: 'DA 5/13/2023 00:25:11'!
PASSED!

!testRun: #TestsMarsRover #test14OnlyExecutePreviousCommandsBeforeInvalidOne stamp: 'DA 5/13/2023 00:25:11'!
PASSED!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'DA 5/13/2023 00:26:15'!
headWest
	facing := MarsRoverFacingWest for: self.! !
!MarsRover methodsFor: 'move' stamp: 'DA 5/13/2023 00:26:42' prior: 50610036!
readACommand: aCommand 
	(aCommand = $f) ifTrue: [
		(facing = #North) ifTrue: [^ self moveNorth ]. 
		(facing = #East) ifTrue: [^self moveEast].
		(facing = #South) ifTrue: [^self moveSouth].
		(facing = #West) ifTrue: [^self moveWest].
		].
	(aCommand = $b) ifTrue: [
		(facing = #North) ifTrue: [^self moveSouth ]. 
		(facing = #South) ifTrue: [^self moveNorth]. 
		(facing = #West) ifTrue: [^self moveEast]. 
		(facing = #East) ifTrue: [^self moveWest].
		].
	(aCommand = $l) ifTrue: [
		(facing = #North) ifTrue: [^self headWest]. 
		(facing = #West) ifTrue: [facing := #South. ^self.]. 
		(facing = #South) ifTrue: [facing := #East. ^self.]. 
		(facing = #East) ifTrue: [facing := #North. ^self.]. 
		].
	(aCommand = $r) ifTrue: [
		(facing = #North) ifTrue: [facing := #East. ^self.].
		(facing = #East) ifTrue: [facing := #South. ^self.]. 
		(facing = #South) ifTrue: [facing := #West. ^self.]. 
		(facing = #West) ifTrue: [facing := #North. ^self.].
		].
	(self isInvalidCommand: aCommand) ifTrue: [self error: MarsRover invalidCommandErrorDescription.]! !
!MarsRover methodsFor: 'move' stamp: 'DA 5/13/2023 00:27:11' prior: 50610128!
readACommand: aCommand 
	(aCommand = $f) ifTrue: [
		(facing = #North) ifTrue: [^ self moveNorth ]. 
		(facing = #East) ifTrue: [^self moveEast].
		(facing = #South) ifTrue: [^self moveSouth].
		(facing = #West) ifTrue: [^self moveWest].
		].
	(aCommand = $b) ifTrue: [
		(facing = #North) ifTrue: [^self moveSouth ]. 
		(facing = #South) ifTrue: [^self moveNorth]. 
		(facing = #West) ifTrue: [^self moveEast]. 
		(facing = #East) ifTrue: [^self moveWest].
		].
	(aCommand = $l) ifTrue: [
		(facing = #North) ifTrue: [^self headWest]. 
		(facing = #West) ifTrue: [facing := #South. ^self.]. 
		(facing = #South) ifTrue: [facing := #East. ^self.]. 
		(facing = #East) ifTrue: [facing := #North. ^self.]. 
		].
	(aCommand = $r) ifTrue: [
		(facing = #North) ifTrue: [facing := #East. ^self.].
		(facing = #East) ifTrue: [facing := #South. ^self.]. 
		(facing = #South) ifTrue: [^self headWest]. 
		(facing = #West) ifTrue: [facing := #North. ^self.].
		].
	(self isInvalidCommand: aCommand) ifTrue: [self error: MarsRover invalidCommandErrorDescription.]! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'DA 5/13/2023 00:28:06'!
headEast
	facing := MarsRoverFacingEast for: self.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'DA 5/13/2023 00:28:34'!
headNorth
	facing := MarsRoverFacingNorth for: self.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'DA 5/13/2023 00:28:45'!
headSouth
	facing := MarsRoverFacingSouth for: self.! !
!MarsRover methodsFor: 'move' stamp: 'DA 5/13/2023 00:29:43' prior: 50610164!
readACommand: aCommand 
	(aCommand = $f) ifTrue: [
		(facing = #North) ifTrue: [^ self moveNorth ]. 
		(facing = #East) ifTrue: [^self moveEast].
		(facing = #South) ifTrue: [^self moveSouth].
		(facing = #West) ifTrue: [^self moveWest].
		].
	(aCommand = $b) ifTrue: [
		(facing = #North) ifTrue: [^self moveSouth ]. 
		(facing = #South) ifTrue: [^self moveNorth]. 
		(facing = #West) ifTrue: [^self moveEast]. 
		(facing = #East) ifTrue: [^self moveWest].
		].
	(aCommand = $l) ifTrue: [
		(facing = #North) ifTrue: [^self headWest]. 
		(facing = #West) ifTrue: [^self headNorth ]. 
		(facing = #South) ifTrue: [^self headEast]. 
		(facing = #East) ifTrue: [^self headNorth ]. 
		].
	(aCommand = $r) ifTrue: [
		(facing = #North) ifTrue: [facing := #East. ^self.].
		(facing = #East) ifTrue: [facing := #South. ^self.]. 
		(facing = #South) ifTrue: [^self headWest]. 
		(facing = #West) ifTrue: [facing := #North. ^self.].
		].
	(self isInvalidCommand: aCommand) ifTrue: [self error: MarsRover invalidCommandErrorDescription.]! !
!MarsRover methodsFor: 'move' stamp: 'DA 5/13/2023 00:29:56' prior: 50610215!
readACommand: aCommand 
	(aCommand = $f) ifTrue: [
		(facing = #North) ifTrue: [^ self moveNorth ]. 
		(facing = #East) ifTrue: [^self moveEast].
		(facing = #South) ifTrue: [^self moveSouth].
		(facing = #West) ifTrue: [^self moveWest].
		].
	(aCommand = $b) ifTrue: [
		(facing = #North) ifTrue: [^self moveSouth ]. 
		(facing = #South) ifTrue: [^self moveNorth]. 
		(facing = #West) ifTrue: [^self moveEast]. 
		(facing = #East) ifTrue: [^self moveWest].
		].
	(aCommand = $l) ifTrue: [
		(facing = #North) ifTrue: [^self headWest]. 
		(facing = #West) ifTrue: [^self headSouth ]. 
		(facing = #South) ifTrue: [^self headEast]. 
		(facing = #East) ifTrue: [^self headNorth ]. 
		].
	(aCommand = $r) ifTrue: [
		(facing = #North) ifTrue: [facing := #East. ^self.].
		(facing = #East) ifTrue: [facing := #South. ^self.]. 
		(facing = #South) ifTrue: [^self headWest]. 
		(facing = #West) ifTrue: [facing := #North. ^self.].
		].
	(self isInvalidCommand: aCommand) ifTrue: [self error: MarsRover invalidCommandErrorDescription.]! !
!MarsRover methodsFor: 'move' stamp: 'DA 5/13/2023 00:30:36' prior: 50610250!
readACommand: aCommand 
	(aCommand = $f) ifTrue: [
		(facing = #North) ifTrue: [^ self moveNorth ]. 
		(facing = #East) ifTrue: [^self moveEast].
		(facing = #South) ifTrue: [^self moveSouth].
		(facing = #West) ifTrue: [^self moveWest].
		].
	(aCommand = $b) ifTrue: [
		(facing = #North) ifTrue: [^self moveSouth ]. 
		(facing = #South) ifTrue: [^self moveNorth]. 
		(facing = #West) ifTrue: [^self moveEast]. 
		(facing = #East) ifTrue: [^self moveWest].
		].
	(aCommand = $l) ifTrue: [
		(facing = #North) ifTrue: [^self headWest]. 
		(facing = #West) ifTrue: [^self headSouth ]. 
		(facing = #South) ifTrue: [^self headEast]. 
		(facing = #East) ifTrue: [^self headNorth ]. 
		].
	(aCommand = $r) ifTrue: [
		(facing = #North) ifTrue: [^self headEast ].
		(facing = #East) ifTrue: [^self headSouth ]. 
		(facing = #South) ifTrue: [^self headWest]. 
		(facing = #West) ifTrue: [^self headNorth].
		].
	(self isInvalidCommand: aCommand) ifTrue: [self error: MarsRover invalidCommandErrorDescription.]! !

!testRun: #TestsMarsRover #test01SuccessfullLanding stamp: 'DA 5/13/2023 00:30:38'!
PASSED!

!testRun: #TestsMarsRover #test02DoesNotMoveWhenNoCommand stamp: 'DA 5/13/2023 00:30:38'!
PASSED!

!testRun: #TestsMarsRover #test03IncrementXAfterMovingFowardWhenFacingNorth stamp: 'DA 5/13/2023 00:30:38'!
PASSED!

!testRun: #TestsMarsRover #test04DecrementYAfterMovingBackwardWhenFacingNorth stamp: 'DA 5/13/2023 00:30:38'!
PASSED!

!testRun: #TestsMarsRover #test05FacingWestAfterRotatingLeftWhenFacingNorth stamp: 'DA 5/13/2023 00:30:38'!
ERROR!

!testRun: #TestsMarsRover #test06FacingEastAfterRotatingRightWhenFacingNorth stamp: 'DA 5/13/2023 00:30:38'!
ERROR!

!testRun: #TestsMarsRover #test07IncrementXAfterRotateRightAndMoveFowardWhenFacingNorth stamp: 'DA 5/13/2023 00:30:38'!
ERROR!

!testRun: #TestsMarsRover #test08DecrementYAfterRotateRightTwoTimesAndMoveFowardWhenFacingNorth stamp: 'DA 5/13/2023 00:30:38'!
ERROR!

!testRun: #TestsMarsRover #test09RotateFourTimesLeftDoNotChangeOrientation stamp: 'DA 5/13/2023 00:30:38'!
ERROR!

!testRun: #TestsMarsRover #test10MoveBackwardAndFowardLeavesInSamePlace stamp: 'DA 5/13/2023 00:30:38'!
PASSED!

!testRun: #TestsMarsRover #test11IncrementXFacingWestAfterRotatingRightAndMovingBackwardsFromSouth stamp: 'DA 5/13/2023 00:30:38'!
ERROR!

!testRun: #TestsMarsRover #test12MovingHorizontallyAfterRotating180Degrees stamp: 'DA 5/13/2023 00:30:38'!
ERROR!

!testRun: #TestsMarsRover #test13InvalidCommandNotAllowed stamp: 'DA 5/13/2023 00:30:38'!
PASSED!

!testRun: #TestsMarsRover #test14OnlyExecutePreviousCommandsBeforeInvalidOne stamp: 'DA 5/13/2023 00:30:38'!
PASSED!

!testRun: #TestsMarsRover #test05FacingWestAfterRotatingLeftWhenFacingNorth stamp: 'DA 5/13/2023 00:30:45'!
ERROR!

!testRun: #TestsMarsRover #test07IncrementXAfterRotateRightAndMoveFowardWhenFacingNorth stamp: 'DA 5/13/2023 00:34:52'!
ERROR!
!MarsRoverFacing methodsFor: 'as yet unclassified' stamp: 'DA 5/13/2023 00:37:23'!
isFacing: aFacingType
	^self isKindOf: aFacingType ! !

!testRun: #TestsMarsRover #test01SuccessfullLanding stamp: 'DA 5/13/2023 00:38:34'!
PASSED!

!testRun: #TestsMarsRover #test02DoesNotMoveWhenNoCommand stamp: 'DA 5/13/2023 00:38:34'!
PASSED!

!testRun: #TestsMarsRover #test03IncrementXAfterMovingFowardWhenFacingNorth stamp: 'DA 5/13/2023 00:38:34'!
PASSED!

!testRun: #TestsMarsRover #test04DecrementYAfterMovingBackwardWhenFacingNorth stamp: 'DA 5/13/2023 00:38:34'!
PASSED!

!testRun: #TestsMarsRover #test05FacingWestAfterRotatingLeftWhenFacingNorth stamp: 'DA 5/13/2023 00:38:34'!
ERROR!

!testRun: #TestsMarsRover #test06FacingEastAfterRotatingRightWhenFacingNorth stamp: 'DA 5/13/2023 00:38:34'!
ERROR!

!testRun: #TestsMarsRover #test07IncrementXAfterRotateRightAndMoveFowardWhenFacingNorth stamp: 'DA 5/13/2023 00:38:34'!
ERROR!

!testRun: #TestsMarsRover #test08DecrementYAfterRotateRightTwoTimesAndMoveFowardWhenFacingNorth stamp: 'DA 5/13/2023 00:38:34'!
ERROR!

!testRun: #TestsMarsRover #test09RotateFourTimesLeftDoNotChangeOrientation stamp: 'DA 5/13/2023 00:38:34'!
ERROR!

!testRun: #TestsMarsRover #test10MoveBackwardAndFowardLeavesInSamePlace stamp: 'DA 5/13/2023 00:38:34'!
PASSED!

!testRun: #TestsMarsRover #test11IncrementXFacingWestAfterRotatingRightAndMovingBackwardsFromSouth stamp: 'DA 5/13/2023 00:38:34'!
ERROR!

!testRun: #TestsMarsRover #test12MovingHorizontallyAfterRotating180Degrees stamp: 'DA 5/13/2023 00:38:34'!
ERROR!

!testRun: #TestsMarsRover #test13InvalidCommandNotAllowed stamp: 'DA 5/13/2023 00:38:34'!
PASSED!

!testRun: #TestsMarsRover #test14OnlyExecutePreviousCommandsBeforeInvalidOne stamp: 'DA 5/13/2023 00:38:34'!
PASSED!
!MarsRover methodsFor: 'comparing' stamp: 'DA 5/13/2023 00:38:59' prior: 50606231!
isFacingTo: anOrientation 
	^ facing isFacing: anOrientation! !

!testRun: #TestsMarsRover #test01SuccessfullLanding stamp: 'DA 5/13/2023 00:39:00'!
ERROR!

!testRun: #TestsMarsRover #test02DoesNotMoveWhenNoCommand stamp: 'DA 5/13/2023 00:39:00'!
ERROR!

!testRun: #TestsMarsRover #test03IncrementXAfterMovingFowardWhenFacingNorth stamp: 'DA 5/13/2023 00:39:00'!
ERROR!

!testRun: #TestsMarsRover #test04DecrementYAfterMovingBackwardWhenFacingNorth stamp: 'DA 5/13/2023 00:39:00'!
ERROR!

!testRun: #TestsMarsRover #test05FacingWestAfterRotatingLeftWhenFacingNorth stamp: 'DA 5/13/2023 00:39:00'!
ERROR!

!testRun: #TestsMarsRover #test06FacingEastAfterRotatingRightWhenFacingNorth stamp: 'DA 5/13/2023 00:39:00'!
ERROR!

!testRun: #TestsMarsRover #test07IncrementXAfterRotateRightAndMoveFowardWhenFacingNorth stamp: 'DA 5/13/2023 00:39:00'!
ERROR!

!testRun: #TestsMarsRover #test08DecrementYAfterRotateRightTwoTimesAndMoveFowardWhenFacingNorth stamp: 'DA 5/13/2023 00:39:00'!
ERROR!

!testRun: #TestsMarsRover #test09RotateFourTimesLeftDoNotChangeOrientation stamp: 'DA 5/13/2023 00:39:00'!
ERROR!

!testRun: #TestsMarsRover #test10MoveBackwardAndFowardLeavesInSamePlace stamp: 'DA 5/13/2023 00:39:00'!
ERROR!

!testRun: #TestsMarsRover #test11IncrementXFacingWestAfterRotatingRightAndMovingBackwardsFromSouth stamp: 'DA 5/13/2023 00:39:00'!
ERROR!

!testRun: #TestsMarsRover #test12MovingHorizontallyAfterRotating180Degrees stamp: 'DA 5/13/2023 00:39:00'!
ERROR!

!testRun: #TestsMarsRover #test13InvalidCommandNotAllowed stamp: 'DA 5/13/2023 00:39:00'!
ERROR!

!testRun: #TestsMarsRover #test14OnlyExecutePreviousCommandsBeforeInvalidOne stamp: 'DA 5/13/2023 00:39:00'!
ERROR!
!MarsRover methodsFor: 'comparing' stamp: 'DA 5/13/2023 00:39:47' prior: 50610434!
isFacingTo: aFacingType
	^ facing isFacing: aFacingType! !
!MarsRover methodsFor: 'instance creation' stamp: 'DA 5/13/2023 00:41:07' prior: 50606370!
initializeStartOn: aPoint facing: aFacingType
	actualPoint := aPoint.
	facing := aFacingType for: self.! !

!testRun: #TestsMarsRover #test01SuccessfullLanding stamp: 'DA 5/13/2023 00:41:09'!
ERROR!

!testRun: #TestsMarsRover #test02DoesNotMoveWhenNoCommand stamp: 'DA 5/13/2023 00:41:09'!
ERROR!

!testRun: #TestsMarsRover #test03IncrementXAfterMovingFowardWhenFacingNorth stamp: 'DA 5/13/2023 00:41:09'!
ERROR!

!testRun: #TestsMarsRover #test04DecrementYAfterMovingBackwardWhenFacingNorth stamp: 'DA 5/13/2023 00:41:09'!
ERROR!

!testRun: #TestsMarsRover #test05FacingWestAfterRotatingLeftWhenFacingNorth stamp: 'DA 5/13/2023 00:41:09'!
ERROR!

!testRun: #TestsMarsRover #test06FacingEastAfterRotatingRightWhenFacingNorth stamp: 'DA 5/13/2023 00:41:09'!
ERROR!

!testRun: #TestsMarsRover #test07IncrementXAfterRotateRightAndMoveFowardWhenFacingNorth stamp: 'DA 5/13/2023 00:41:09'!
ERROR!

!testRun: #TestsMarsRover #test08DecrementYAfterRotateRightTwoTimesAndMoveFowardWhenFacingNorth stamp: 'DA 5/13/2023 00:41:09'!
ERROR!

!testRun: #TestsMarsRover #test09RotateFourTimesLeftDoNotChangeOrientation stamp: 'DA 5/13/2023 00:41:09'!
ERROR!

!testRun: #TestsMarsRover #test10MoveBackwardAndFowardLeavesInSamePlace stamp: 'DA 5/13/2023 00:41:09'!
ERROR!

!testRun: #TestsMarsRover #test11IncrementXFacingWestAfterRotatingRightAndMovingBackwardsFromSouth stamp: 'DA 5/13/2023 00:41:09'!
ERROR!

!testRun: #TestsMarsRover #test12MovingHorizontallyAfterRotating180Degrees stamp: 'DA 5/13/2023 00:41:09'!
ERROR!

!testRun: #TestsMarsRover #test13InvalidCommandNotAllowed stamp: 'DA 5/13/2023 00:41:09'!
ERROR!

!testRun: #TestsMarsRover #test14OnlyExecutePreviousCommandsBeforeInvalidOne stamp: 'DA 5/13/2023 00:41:09'!
ERROR!

!testRun: #TestsMarsRover #test01SuccessfullLanding stamp: 'DA 5/13/2023 00:41:11'!
ERROR!
!TestsMarsRover methodsFor: 'nil' stamp: 'DA 5/13/2023 00:42:28'!
north
	^MarsRoverFacingNorth! !
!TestsMarsRover methodsFor: 'as yet unclassified' stamp: 'DA 5/13/2023 00:42:41'!
south
	^MarsRoverFacingSouth! !
!TestsMarsRover methodsFor: 'as yet unclassified' stamp: 'DA 5/13/2023 00:42:52'!
east
	^MarsRoverFacingEast ! !
!TestsMarsRover methodsFor: 'as yet unclassified' stamp: 'DA 5/13/2023 00:43:01'!
west
	^MarsRoverFacingWest! !
!TestsMarsRover methodsFor: 'tests' stamp: 'DA 5/13/2023 00:43:29' prior: 50607782!
test01SuccessfullLanding

	|marsRover|
	
	marsRover := MarsRover startOn: 1@1 facing: self north.
	
	self assert: (marsRover hasPosition: 1@1 facing: self north).! !
!TestsMarsRover methodsFor: 'tests' stamp: 'DA 5/13/2023 00:43:47' prior: 50608224!
test02DoesNotMoveWhenNoCommand
	|marsRover|
	
	marsRover := MarsRover startOn: 1@1 facing: self north.
	
	marsRover readACommand: ''.
	
	self assert: (marsRover hasPosition: 1@1 facing: self north).
	"Norte es subclase de Direccion (state)"! !
!TestsMarsRover methodsFor: 'tests' stamp: 'DA 5/13/2023 00:43:58' prior: 50608276!
test03IncrementXAfterMovingFowardWhenFacingNorth
	|marsRover|
	
	marsRover := MarsRover startOn: 1@1 facing: self north.
	
	marsRover readACommand: $f.
	
	self assert: (marsRover hasPosition: 1@2 facing: self north).
	"Norte es subclase de Direccion (state)"! !
!TestsMarsRover methodsFor: 'tests' stamp: 'DA 5/13/2023 00:44:09' prior: 50608298!
test04DecrementYAfterMovingBackwardWhenFacingNorth
	|marsRover|
	
	marsRover := MarsRover startOn: 1@1 facing: self north.
	
	marsRover readACommand: $b.
	
	self assert: (marsRover hasPosition: 1@0 facing: self north).
	"Norte es subclase de Direccion (state)"! !
!TestsMarsRover methodsFor: 'tests' stamp: 'DA 5/13/2023 00:44:20' prior: 50608321!
test05FacingWestAfterRotatingLeftWhenFacingNorth
	|marsRover|
	
	marsRover := MarsRover startOn: 1@1 facing: self north.
	
	marsRover readACommand: $l.
	
	self assert: (marsRover hasPosition: 1@1 facing: self west).! !
!TestsMarsRover methodsFor: 'tests' stamp: 'DA 5/13/2023 00:44:31' prior: 50608340!
test06FacingEastAfterRotatingRightWhenFacingNorth
	|marsRover|
	
	marsRover := MarsRover startOn: 1@1 facing: self north.
	
	marsRover readACommand: $r.
	
	self assert: (marsRover hasPosition: 1@1 facing: self east).! !
!TestsMarsRover methodsFor: 'tests' stamp: 'DA 5/13/2023 00:44:42' prior: 50608360!
test07IncrementXAfterRotateRightAndMoveFowardWhenFacingNorth
	|marsRover|
	
	marsRover := MarsRover startOn: 1@1 facing: self north.
	
	marsRover readCommands: 'rf'.
	
	self assert: (marsRover hasPosition: 2@1 facing: self east).! !
!TestsMarsRover methodsFor: 'tests' stamp: 'DA 5/13/2023 00:44:53' prior: 50608381!
test08DecrementYAfterRotateRightTwoTimesAndMoveFowardWhenFacingNorth
	|marsRover|
	
	marsRover := MarsRover startOn: 1@1 facing: self north.
	
	marsRover readCommands: 'rrf'.
	
	self assert: (marsRover hasPosition: 1@0 facing: self south).! !
!TestsMarsRover methodsFor: 'tests' stamp: 'DA 5/13/2023 00:45:04' prior: 50608234!
test09RotateFourTimesLeftDoNotChangeOrientation
	|marsRover|
	
	marsRover := MarsRover startOn: 1@1 facing: self north.
	
	marsRover readCommands: 'llll'.
	
	self assert: (marsRover hasPosition: 1@1 facing: self north).! !
!TestsMarsRover methodsFor: 'tests' stamp: 'DA 5/13/2023 00:45:17' prior: 50608502!
test10MoveBackwardAndFowardLeavesInSamePlace
	|marsRover|
	
	marsRover := MarsRover startOn: 1@1 facing: self south.
	
	marsRover readCommands: 'bbff'.
	
	self assert: (marsRover hasPosition: 1@1 facing: self south).! !
!TestsMarsRover methodsFor: 'tests' stamp: 'DA 5/13/2023 00:45:28' prior: 50608590!
test11IncrementXFacingWestAfterRotatingRightAndMovingBackwardsFromSouth
	|marsRover|
	
	marsRover := MarsRover startOn: 1@1 facing: self south.
	
	marsRover readCommands: 'rb'.
	
	self assert: (marsRover hasPosition: 2@1 facing: self west).! !
!TestsMarsRover methodsFor: 'tests' stamp: 'DA 5/13/2023 00:45:39' prior: 50608777!
test12MovingHorizontallyAfterRotating180Degrees
	|marsRover|
	
	marsRover := MarsRover startOn: 2@2 facing: self west.
	
	marsRover readCommands: 'frrb'.
	
	self assert: (marsRover hasPosition: 0@2 facing: self east).! !
!TestsMarsRover methodsFor: 'tests' stamp: 'DA 5/13/2023 00:45:51' prior: 50609521!
test13InvalidCommandNotAllowed
	|marsRover|
	
	marsRover := MarsRover startOn: 2@2 facing: self west.
	
	self 
		should: [ marsRover readACommand: $ñ.] 
		raise: Error 
		withExceptionDo: [ :anError | 
			self assert: anError messageText equals: MarsRover invalidCommandErrorDescription.
			self assert: (marsRover hasPosition: 2@2  facing: self west).]! !
!TestsMarsRover methodsFor: 'tests' stamp: 'DA 5/13/2023 00:46:00' prior: 50609548!
test14OnlyExecutePreviousCommandsBeforeInvalidOne
	|marsRover|
	
	marsRover := MarsRover startOn: 2@2 facing: self west.
	
	self 
		should: [	marsRover readCommands: 'fyb'.]
		raise: Error
		withExceptionDo: [:anError |
			self assert: anError messageText equals: MarsRover invalidCommandErrorDescription.
			self assert: (marsRover hasPosition: 1@2 facing: self west).]
			 ! !

!testRun: #TestsMarsRover #test14OnlyExecutePreviousCommandsBeforeInvalidOne stamp: 'DA 5/13/2023 00:46:03'!
ERROR!
!MarsRoverFacing class methodsFor: 'as yet unclassified' stamp: 'DA 5/13/2023 00:47:13' prior: 50609851!
for: aMarsRover
	^ self new initializeFor: aMarsRover! !

!testRun: #TestsMarsRover #test02DoesNotMoveWhenNoCommand stamp: 'DA 5/13/2023 00:47:24'!
PASSED!

!testRun: #TestsMarsRover #test01SuccessfullLanding stamp: 'DA 5/13/2023 00:47:24'!
PASSED!

!testRun: #TestsMarsRover #test02DoesNotMoveWhenNoCommand stamp: 'DA 5/13/2023 00:47:24'!
PASSED!

!testRun: #TestsMarsRover #test03IncrementXAfterMovingFowardWhenFacingNorth stamp: 'DA 5/13/2023 00:47:24'!
FAILURE!

!testRun: #TestsMarsRover #test04DecrementYAfterMovingBackwardWhenFacingNorth stamp: 'DA 5/13/2023 00:47:24'!
FAILURE!

!testRun: #TestsMarsRover #test05FacingWestAfterRotatingLeftWhenFacingNorth stamp: 'DA 5/13/2023 00:47:24'!
FAILURE!

!testRun: #TestsMarsRover #test06FacingEastAfterRotatingRightWhenFacingNorth stamp: 'DA 5/13/2023 00:47:24'!
FAILURE!

!testRun: #TestsMarsRover #test07IncrementXAfterRotateRightAndMoveFowardWhenFacingNorth stamp: 'DA 5/13/2023 00:47:24'!
FAILURE!

!testRun: #TestsMarsRover #test08DecrementYAfterRotateRightTwoTimesAndMoveFowardWhenFacingNorth stamp: 'DA 5/13/2023 00:47:24'!
FAILURE!

!testRun: #TestsMarsRover #test09RotateFourTimesLeftDoNotChangeOrientation stamp: 'DA 5/13/2023 00:47:24'!
PASSED!

!testRun: #TestsMarsRover #test10MoveBackwardAndFowardLeavesInSamePlace stamp: 'DA 5/13/2023 00:47:24'!
PASSED!

!testRun: #TestsMarsRover #test11IncrementXFacingWestAfterRotatingRightAndMovingBackwardsFromSouth stamp: 'DA 5/13/2023 00:47:24'!
FAILURE!

!testRun: #TestsMarsRover #test12MovingHorizontallyAfterRotating180Degrees stamp: 'DA 5/13/2023 00:47:24'!
FAILURE!

!testRun: #TestsMarsRover #test13InvalidCommandNotAllowed stamp: 'DA 5/13/2023 00:47:24'!
PASSED!

!testRun: #TestsMarsRover #test14OnlyExecutePreviousCommandsBeforeInvalidOne stamp: 'DA 5/13/2023 00:47:24'!
FAILURE!

!testRun: #TestsMarsRover #test07IncrementXAfterRotateRightAndMoveFowardWhenFacingNorth stamp: 'DA 5/13/2023 00:47:30'!
FAILURE!
!MarsRover methodsFor: 'move' stamp: 'DA 5/13/2023 00:49:06' prior: 50610285!
readACommand: aCommand 
	(self isFowardCommand: aCommand) ifTrue: [^ facing moveFoward].
	(aCommand = $b) ifTrue: [
		(facing = #North) ifTrue: [^self moveSouth ]. 
		(facing = #South) ifTrue: [^self moveNorth]. 
		(facing = #West) ifTrue: [^self moveEast]. 
		(facing = #East) ifTrue: [^self moveWest].
		].
	(aCommand = $l) ifTrue: [
		(facing = #North) ifTrue: [^self headWest]. 
		(facing = #West) ifTrue: [^self headSouth ]. 
		(facing = #South) ifTrue: [^self headEast]. 
		(facing = #East) ifTrue: [^self headNorth ]. 
		].
	(aCommand = $r) ifTrue: [
		(facing = #North) ifTrue: [^self headEast ].
		(facing = #East) ifTrue: [^self headSouth ]. 
		(facing = #South) ifTrue: [^self headWest]. 
		(facing = #West) ifTrue: [^self headNorth].
		].
	(self isInvalidCommand: aCommand) ifTrue: [self error: MarsRover invalidCommandErrorDescription.]! !
!MarsRover methodsFor: 'move' stamp: 'DA 5/13/2023 00:30:36' prior: 50610789!
readACommand: aCommand 
	(aCommand = $f) ifTrue: [
		(facing = #North) ifTrue: [^ self moveNorth ]. 
		(facing = #East) ifTrue: [^self moveEast].
		(facing = #South) ifTrue: [^self moveSouth].
		(facing = #West) ifTrue: [^self moveWest].
		].
	(aCommand = $b) ifTrue: [
		(facing = #North) ifTrue: [^self moveSouth ]. 
		(facing = #South) ifTrue: [^self moveNorth]. 
		(facing = #West) ifTrue: [^self moveEast]. 
		(facing = #East) ifTrue: [^self moveWest].
		].
	(aCommand = $l) ifTrue: [
		(facing = #North) ifTrue: [^self headWest]. 
		(facing = #West) ifTrue: [^self headSouth ]. 
		(facing = #South) ifTrue: [^self headEast]. 
		(facing = #East) ifTrue: [^self headNorth ]. 
		].
	(aCommand = $r) ifTrue: [
		(facing = #North) ifTrue: [^self headEast ].
		(facing = #East) ifTrue: [^self headSouth ]. 
		(facing = #South) ifTrue: [^self headWest]. 
		(facing = #West) ifTrue: [^self headNorth].
		].
	(self isInvalidCommand: aCommand) ifTrue: [self error: MarsRover invalidCommandErrorDescription.]! !
!MarsRoverFacingNorth methodsFor: 'as yet unclassified' stamp: 'DA 5/13/2023 00:51:32' overrides: 50609826!
moveBackward
	^self subclassResponsibility ! !
!MarsRoverFacingSouth methodsFor: 'as yet unclassified' stamp: 'DA 5/13/2023 00:51:32' overrides: 50609826!
moveBackward
	^self subclassResponsibility ! !
!MarsRoverFacingEast methodsFor: 'as yet unclassified' stamp: 'DA 5/13/2023 00:51:32' overrides: 50609826!
moveBackward
	^self subclassResponsibility ! !
!MarsRoverFacingWest methodsFor: 'as yet unclassified' stamp: 'DA 5/13/2023 00:51:32' overrides: 50609826!
moveBackward
	^self subclassResponsibility ! !

!methodRemoval: MarsRoverFacing #moveBackward stamp: 'DA 5/13/2023 00:51:32'!
moveBackward
	^self subclassResponsibility !
!MarsRoverFacingNorth methodsFor: 'as yet unclassified' stamp: 'DA 5/13/2023 00:51:37' overrides: 50609822!
moveFoward
	^self subclassResponsibility ! !
!MarsRoverFacingSouth methodsFor: 'as yet unclassified' stamp: 'DA 5/13/2023 00:51:37' overrides: 50609822!
moveFoward
	^self subclassResponsibility ! !
!MarsRoverFacingEast methodsFor: 'as yet unclassified' stamp: 'DA 5/13/2023 00:51:37' overrides: 50609822!
moveFoward
	^self subclassResponsibility ! !
!MarsRoverFacingWest methodsFor: 'as yet unclassified' stamp: 'DA 5/13/2023 00:51:37' overrides: 50609822!
moveFoward
	^self subclassResponsibility ! !

!methodRemoval: MarsRoverFacing #moveFoward stamp: 'DA 5/13/2023 00:51:37'!
moveFoward
	^self subclassResponsibility !
!MarsRoverFacingNorth methodsFor: 'as yet unclassified' stamp: 'DA 5/13/2023 00:51:41' overrides: 50609831!
rotateLeft
	^self subclassResponsibility ! !
!MarsRoverFacingSouth methodsFor: 'as yet unclassified' stamp: 'DA 5/13/2023 00:51:41' overrides: 50609831!
rotateLeft
	^self subclassResponsibility ! !
!MarsRoverFacingEast methodsFor: 'as yet unclassified' stamp: 'DA 5/13/2023 00:51:41' overrides: 50609831!
rotateLeft
	^self subclassResponsibility ! !
!MarsRoverFacingWest methodsFor: 'as yet unclassified' stamp: 'DA 5/13/2023 00:51:41' overrides: 50609831!
rotateLeft
	^self subclassResponsibility ! !

!methodRemoval: MarsRoverFacing #rotateLeft stamp: 'DA 5/13/2023 00:51:41'!
rotateLeft
	^self subclassResponsibility !
!MarsRoverFacingNorth methodsFor: 'as yet unclassified' stamp: 'DA 5/13/2023 00:51:46' overrides: 50609835!
rotateRight
	^self subclassResponsibility ! !
!MarsRoverFacingSouth methodsFor: 'as yet unclassified' stamp: 'DA 5/13/2023 00:51:46' overrides: 50609835!
rotateRight
	^self subclassResponsibility ! !
!MarsRoverFacingEast methodsFor: 'as yet unclassified' stamp: 'DA 5/13/2023 00:51:46' overrides: 50609835!
rotateRight
	^self subclassResponsibility ! !
!MarsRoverFacingWest methodsFor: 'as yet unclassified' stamp: 'DA 5/13/2023 00:51:46' overrides: 50609835!
rotateRight
	^self subclassResponsibility ! !

!methodRemoval: MarsRoverFacing #rotateRight stamp: 'DA 5/13/2023 00:51:46'!
rotateRight
	^self subclassResponsibility !
!MarsRoverFacingNorth methodsFor: 'as yet unclassified' stamp: 'DA 5/13/2023 00:52:02' prior: 50610878!
moveFoward
	^ marsRover moveNorth! !
!MarsRoverFacingEast methodsFor: 'as yet unclassified' stamp: 'DA 5/13/2023 00:52:33' prior: 50610888!
moveFoward
	^marsRover moveEast ! !
!MarsRoverFacingSouth methodsFor: 'as yet unclassified' stamp: 'DA 5/13/2023 00:52:46' prior: 50610883!
moveFoward
	^marsRover moveSouth ! !
!MarsRoverFacingWest methodsFor: 'as yet unclassified' stamp: 'DA 5/13/2023 00:52:57' prior: 50610893!
moveFoward
	^marsRover moveWest ! !
!MarsRoverFacingEast methodsFor: 'as yet unclassified' stamp: 'DA 5/13/2023 00:53:23' prior: 50610864!
moveBackward
	^ marsRover moveWest ! !
!MarsRoverFacingNorth methodsFor: 'as yet unclassified' stamp: 'DA 5/13/2023 00:53:34' prior: 50610854!
moveBackward
	^marsRover moveSouth ! !
!MarsRoverFacingSouth methodsFor: 'as yet unclassified' stamp: 'DA 5/13/2023 00:53:45' prior: 50610859!
moveBackward
	^marsRover moveNorth ! !
!MarsRoverFacingWest methodsFor: 'as yet unclassified' stamp: 'DA 5/13/2023 00:53:58' prior: 50610869!
moveBackward
	^marsRover moveEast ! !
!MarsRoverFacingEast methodsFor: 'as yet unclassified' stamp: 'DA 5/13/2023 00:54:34' prior: 50610912!
rotateLeft
	^marsRover headNorth ! !
!MarsRoverFacingNorth methodsFor: 'as yet unclassified' stamp: 'DA 5/13/2023 00:56:12' prior: 50610902!
rotateLeft
	^marsRover headWest! !
!MarsRoverFacingSouth methodsFor: 'as yet unclassified' stamp: 'DA 5/13/2023 00:56:40' prior: 50610907!
rotateLeft
	^marsRover headEast! !
!MarsRoverFacingWest methodsFor: 'as yet unclassified' stamp: 'DA 5/13/2023 00:57:00' prior: 50610917!
rotateLeft
	^marsRover headSouth ! !
!MarsRoverFacingEast methodsFor: 'as yet unclassified' stamp: 'DA 5/13/2023 00:57:32' prior: 50610936!
rotateRight
	^marsRover headSouth! !
!MarsRoverFacingNorth methodsFor: 'as yet unclassified' stamp: 'DA 5/13/2023 00:57:51' prior: 50610926!
rotateRight
	^marsRover headEast ! !
!MarsRoverFacingSouth methodsFor: 'as yet unclassified' stamp: 'DA 5/13/2023 00:58:11' prior: 50610931!
rotateRight
	^marsRover headWest! !
!MarsRoverFacingWest methodsFor: 'as yet unclassified' stamp: 'DA 5/13/2023 00:58:31' prior: 50610941!
rotateRight
	^marsRover headNorth! !
!MarsRover methodsFor: 'move' stamp: 'DA 5/13/2023 00:58:53' prior: 50610819!
readACommand: aCommand 
	(aCommand = $f) ifTrue: [ facing moveFoward].
	(aCommand = $b) ifTrue: [
		(facing = #North) ifTrue: [^self moveSouth ]. 
		(facing = #South) ifTrue: [^self moveNorth]. 
		(facing = #West) ifTrue: [^self moveEast]. 
		(facing = #East) ifTrue: [^self moveWest].
		].
	(aCommand = $l) ifTrue: [
		(facing = #North) ifTrue: [^self headWest]. 
		(facing = #West) ifTrue: [^self headSouth ]. 
		(facing = #South) ifTrue: [^self headEast]. 
		(facing = #East) ifTrue: [^self headNorth ]. 
		].
	(aCommand = $r) ifTrue: [
		(facing = #North) ifTrue: [^self headEast ].
		(facing = #East) ifTrue: [^self headSouth ]. 
		(facing = #South) ifTrue: [^self headWest]. 
		(facing = #West) ifTrue: [^self headNorth].
		].
	(self isInvalidCommand: aCommand) ifTrue: [self error: MarsRover invalidCommandErrorDescription.]! !
!MarsRover methodsFor: 'move' stamp: 'DA 5/13/2023 00:59:43' prior: 50611029!
readACommand: aCommand 
	(aCommand = $f) ifTrue: [facing moveFoward].
	(aCommand = $b) ifTrue: [facing moveBackward].
	(aCommand = $l) ifTrue: [facing rotateLeft].
	(aCommand = $r) ifTrue: [facing rotateRight		].
	(self isInvalidCommand: aCommand) ifTrue: [self error: MarsRover invalidCommandErrorDescription.]! !
!MarsRover methodsFor: 'move' stamp: 'DA 5/13/2023 01:00:43' prior: 50611058!
readACommand: aCommand 
	(self isFowardCommand: aCommand) ifTrue: [facing moveFoward].
	(self isBackwardCommand: aCommand) ifTrue: [facing moveBackward].
	(self isRotateLeftCommand: aCommand) ifTrue: [facing rotateLeft].
	(self isRotateRightCommand: aCommand) ifTrue: [facing rotateRight		].
	(self isInvalidCommand: aCommand) ifTrue: [self error: MarsRover invalidCommandErrorDescription.]! !
!MarsRover methodsFor: 'move' stamp: 'DA 5/13/2023 01:02:05' prior: 50611071!
readACommand: aCommand 
	(self isFowardCommand: aCommand) ifTrue: [^ facing moveFoward].
	(self isBackwardCommand: aCommand) ifTrue: [^facing moveBackward].
	(self isRotateLeftCommand: aCommand) ifTrue: [^facing rotateLeft].
	(self isRotateRightCommand: aCommand) ifTrue: [^facing rotateRight		].
	
	(self isInvalidCommand: aCommand) ifTrue: [self error: MarsRover invalidCommandErrorDescription.]! !
!MarsRover methodsFor: 'move' stamp: 'DA 5/13/2023 01:02:30' prior: 50611086!
readACommand: aCommand 
	(self isFowardCommand: aCommand) ifTrue: [^ facing moveFoward].
	(self isBackwardCommand: aCommand) ifTrue: [^facing moveBackward].
	(self isRotateLeftCommand: aCommand) ifTrue: [^facing rotateLeft].
	(self isRotateRightCommand: aCommand) ifTrue: [^facing rotateRight		].
	
	self error: MarsRover invalidCommandErrorDescription.
	
	"(self isInvalidCommand: aCommand) ifTrue: [self error: MarsRover invalidCommandErrorDescription.]"! !

!testRun: #TestsMarsRover #test01SuccessfullLanding stamp: 'DA 5/13/2023 01:02:31'!
PASSED!

!testRun: #TestsMarsRover #test02DoesNotMoveWhenNoCommand stamp: 'DA 5/13/2023 01:02:31'!
ERROR!

!testRun: #TestsMarsRover #test03IncrementXAfterMovingFowardWhenFacingNorth stamp: 'DA 5/13/2023 01:02:31'!
PASSED!

!testRun: #TestsMarsRover #test04DecrementYAfterMovingBackwardWhenFacingNorth stamp: 'DA 5/13/2023 01:02:31'!
PASSED!

!testRun: #TestsMarsRover #test05FacingWestAfterRotatingLeftWhenFacingNorth stamp: 'DA 5/13/2023 01:02:31'!
PASSED!

!testRun: #TestsMarsRover #test06FacingEastAfterRotatingRightWhenFacingNorth stamp: 'DA 5/13/2023 01:02:31'!
PASSED!

!testRun: #TestsMarsRover #test07IncrementXAfterRotateRightAndMoveFowardWhenFacingNorth stamp: 'DA 5/13/2023 01:02:31'!
PASSED!

!testRun: #TestsMarsRover #test08DecrementYAfterRotateRightTwoTimesAndMoveFowardWhenFacingNorth stamp: 'DA 5/13/2023 01:02:31'!
PASSED!

!testRun: #TestsMarsRover #test09RotateFourTimesLeftDoNotChangeOrientation stamp: 'DA 5/13/2023 01:02:31'!
PASSED!

!testRun: #TestsMarsRover #test10MoveBackwardAndFowardLeavesInSamePlace stamp: 'DA 5/13/2023 01:02:31'!
PASSED!

!testRun: #TestsMarsRover #test11IncrementXFacingWestAfterRotatingRightAndMovingBackwardsFromSouth stamp: 'DA 5/13/2023 01:02:31'!
PASSED!

!testRun: #TestsMarsRover #test12MovingHorizontallyAfterRotating180Degrees stamp: 'DA 5/13/2023 01:02:31'!
PASSED!

!testRun: #TestsMarsRover #test13InvalidCommandNotAllowed stamp: 'DA 5/13/2023 01:02:31'!
PASSED!

!testRun: #TestsMarsRover #test14OnlyExecutePreviousCommandsBeforeInvalidOne stamp: 'DA 5/13/2023 01:02:31'!
PASSED!

!testRun: #TestsMarsRover #test02DoesNotMoveWhenNoCommand stamp: 'DA 5/13/2023 01:02:31'!
ERROR!

!testRun: #TestsMarsRover #test02DoesNotMoveWhenNoCommand stamp: 'DA 5/13/2023 01:11:04'!
ERROR!
!MarsRover methodsFor: 'move' stamp: 'DA 5/13/2023 01:14:10' prior: 50611101!
readACommand: aCommand 
	(self isFowardCommand: aCommand) ifTrue: [^ facing moveFoward].
	(self isBackwardCommand: aCommand) ifTrue: [^facing moveBackward].
	(self isRotateLeftCommand: aCommand) ifTrue: [^facing rotateLeft].
	(self isRotateRightCommand: aCommand) ifTrue: [^facing rotateRight		].
	
	self error: self class invalidCommandErrorDescription.
	
	"(self isInvalidCommand: aCommand) ifTrue: [self error: MarsRover invalidCommandErrorDescription.]"! !

!testRun: #TestsMarsRover #test01SuccessfullLanding stamp: 'DA 5/13/2023 01:14:11'!
PASSED!

!testRun: #TestsMarsRover #test02DoesNotMoveWhenNoCommand stamp: 'DA 5/13/2023 01:14:11'!
ERROR!

!testRun: #TestsMarsRover #test03IncrementXAfterMovingFowardWhenFacingNorth stamp: 'DA 5/13/2023 01:14:11'!
PASSED!

!testRun: #TestsMarsRover #test04DecrementYAfterMovingBackwardWhenFacingNorth stamp: 'DA 5/13/2023 01:14:11'!
PASSED!

!testRun: #TestsMarsRover #test05FacingWestAfterRotatingLeftWhenFacingNorth stamp: 'DA 5/13/2023 01:14:11'!
PASSED!

!testRun: #TestsMarsRover #test06FacingEastAfterRotatingRightWhenFacingNorth stamp: 'DA 5/13/2023 01:14:11'!
PASSED!

!testRun: #TestsMarsRover #test07IncrementXAfterRotateRightAndMoveFowardWhenFacingNorth stamp: 'DA 5/13/2023 01:14:11'!
PASSED!

!testRun: #TestsMarsRover #test08DecrementYAfterRotateRightTwoTimesAndMoveFowardWhenFacingNorth stamp: 'DA 5/13/2023 01:14:11'!
PASSED!

!testRun: #TestsMarsRover #test09RotateFourTimesLeftDoNotChangeOrientation stamp: 'DA 5/13/2023 01:14:11'!
PASSED!

!testRun: #TestsMarsRover #test10MoveBackwardAndFowardLeavesInSamePlace stamp: 'DA 5/13/2023 01:14:11'!
PASSED!

!testRun: #TestsMarsRover #test11IncrementXFacingWestAfterRotatingRightAndMovingBackwardsFromSouth stamp: 'DA 5/13/2023 01:14:11'!
PASSED!

!testRun: #TestsMarsRover #test12MovingHorizontallyAfterRotating180Degrees stamp: 'DA 5/13/2023 01:14:11'!
PASSED!

!testRun: #TestsMarsRover #test13InvalidCommandNotAllowed stamp: 'DA 5/13/2023 01:14:11'!
PASSED!

!testRun: #TestsMarsRover #test14OnlyExecutePreviousCommandsBeforeInvalidOne stamp: 'DA 5/13/2023 01:14:11'!
PASSED!

!testRun: #TestsMarsRover #test02DoesNotMoveWhenNoCommand stamp: 'DA 5/13/2023 01:14:11'!
ERROR!
!MarsRover methodsFor: 'move' stamp: 'DA 5/13/2023 01:16:29' prior: 50611175!
readACommand: aCommand 
	(self isFowardCommand: aCommand) ifTrue: [facing moveFoward].
	(self isBackwardCommand: aCommand) ifTrue: [facing moveBackward].
	(self isRotateLeftCommand: aCommand) ifTrue: [facing rotateLeft].
	(self isRotateRightCommand: aCommand) ifTrue: [facing rotateRight		].
	
	self error: self class invalidCommandErrorDescription.
	
	"(self isInvalidCommand: aCommand) ifTrue: [self error: MarsRover invalidCommandErrorDescription.]"! !

!testRun: #TestsMarsRover #test01SuccessfullLanding stamp: 'DA 5/13/2023 01:16:31'!
PASSED!

!testRun: #TestsMarsRover #test02DoesNotMoveWhenNoCommand stamp: 'DA 5/13/2023 01:16:31'!
ERROR!

!testRun: #TestsMarsRover #test03IncrementXAfterMovingFowardWhenFacingNorth stamp: 'DA 5/13/2023 01:16:31'!
ERROR!

!testRun: #TestsMarsRover #test04DecrementYAfterMovingBackwardWhenFacingNorth stamp: 'DA 5/13/2023 01:16:31'!
ERROR!

!testRun: #TestsMarsRover #test05FacingWestAfterRotatingLeftWhenFacingNorth stamp: 'DA 5/13/2023 01:16:31'!
ERROR!

!testRun: #TestsMarsRover #test06FacingEastAfterRotatingRightWhenFacingNorth stamp: 'DA 5/13/2023 01:16:31'!
ERROR!

!testRun: #TestsMarsRover #test07IncrementXAfterRotateRightAndMoveFowardWhenFacingNorth stamp: 'DA 5/13/2023 01:16:31'!
ERROR!

!testRun: #TestsMarsRover #test08DecrementYAfterRotateRightTwoTimesAndMoveFowardWhenFacingNorth stamp: 'DA 5/13/2023 01:16:31'!
ERROR!

!testRun: #TestsMarsRover #test09RotateFourTimesLeftDoNotChangeOrientation stamp: 'DA 5/13/2023 01:16:31'!
ERROR!

!testRun: #TestsMarsRover #test10MoveBackwardAndFowardLeavesInSamePlace stamp: 'DA 5/13/2023 01:16:31'!
ERROR!

!testRun: #TestsMarsRover #test11IncrementXFacingWestAfterRotatingRightAndMovingBackwardsFromSouth stamp: 'DA 5/13/2023 01:16:31'!
ERROR!

!testRun: #TestsMarsRover #test12MovingHorizontallyAfterRotating180Degrees stamp: 'DA 5/13/2023 01:16:31'!
ERROR!

!testRun: #TestsMarsRover #test13InvalidCommandNotAllowed stamp: 'DA 5/13/2023 01:16:31'!
PASSED!

!testRun: #TestsMarsRover #test14OnlyExecutePreviousCommandsBeforeInvalidOne stamp: 'DA 5/13/2023 01:16:31'!
PASSED!
!MarsRover methodsFor: 'move' stamp: 'DA 5/13/2023 01:16:43' prior: 50611246!
readACommand: aCommand 
	(self isFowardCommand: aCommand) ifTrue: [^facing moveFoward].
	(self isBackwardCommand: aCommand) ifTrue: [^facing moveBackward].
	(self isRotateLeftCommand: aCommand) ifTrue: [^facing rotateLeft].
	(self isRotateRightCommand: aCommand) ifTrue: [^facing rotateRight		].
	
	self error: self class invalidCommandErrorDescription.
	
	"(self isInvalidCommand: aCommand) ifTrue: [self error: MarsRover invalidCommandErrorDescription.]"! !

!testRun: #TestsMarsRover #test01SuccessfullLanding stamp: 'DA 5/13/2023 01:16:43'!
PASSED!

!testRun: #TestsMarsRover #test02DoesNotMoveWhenNoCommand stamp: 'DA 5/13/2023 01:16:44'!
ERROR!

!testRun: #TestsMarsRover #test03IncrementXAfterMovingFowardWhenFacingNorth stamp: 'DA 5/13/2023 01:16:44'!
PASSED!

!testRun: #TestsMarsRover #test04DecrementYAfterMovingBackwardWhenFacingNorth stamp: 'DA 5/13/2023 01:16:44'!
PASSED!

!testRun: #TestsMarsRover #test05FacingWestAfterRotatingLeftWhenFacingNorth stamp: 'DA 5/13/2023 01:16:44'!
PASSED!

!testRun: #TestsMarsRover #test06FacingEastAfterRotatingRightWhenFacingNorth stamp: 'DA 5/13/2023 01:16:44'!
PASSED!

!testRun: #TestsMarsRover #test07IncrementXAfterRotateRightAndMoveFowardWhenFacingNorth stamp: 'DA 5/13/2023 01:16:44'!
PASSED!

!testRun: #TestsMarsRover #test08DecrementYAfterRotateRightTwoTimesAndMoveFowardWhenFacingNorth stamp: 'DA 5/13/2023 01:16:44'!
PASSED!

!testRun: #TestsMarsRover #test09RotateFourTimesLeftDoNotChangeOrientation stamp: 'DA 5/13/2023 01:16:44'!
PASSED!

!testRun: #TestsMarsRover #test10MoveBackwardAndFowardLeavesInSamePlace stamp: 'DA 5/13/2023 01:16:44'!
PASSED!

!testRun: #TestsMarsRover #test11IncrementXFacingWestAfterRotatingRightAndMovingBackwardsFromSouth stamp: 'DA 5/13/2023 01:16:44'!
PASSED!

!testRun: #TestsMarsRover #test12MovingHorizontallyAfterRotating180Degrees stamp: 'DA 5/13/2023 01:16:44'!
PASSED!

!testRun: #TestsMarsRover #test13InvalidCommandNotAllowed stamp: 'DA 5/13/2023 01:16:44'!
PASSED!

!testRun: #TestsMarsRover #test14OnlyExecutePreviousCommandsBeforeInvalidOne stamp: 'DA 5/13/2023 01:16:44'!
PASSED!

!testRun: #TestsMarsRover #test02DoesNotMoveWhenNoCommand stamp: 'DA 5/13/2023 01:16:44'!
ERROR!
!MarsRover methodsFor: 'move' stamp: 'DA 5/13/2023 01:18:08' prior: 50611314!
readACommand: aCommand 
	(self isFowardCommand: aCommand) ifTrue: [facing moveFoward].
	(self isBackwardCommand: aCommand) ifTrue: [facing moveBackward].
	(self isRotateLeftCommand: aCommand) ifTrue: [facing rotateLeft].
	(self isRotateRightCommand: aCommand) ifTrue: [facing rotateRight		].
	
	self error: self class invalidCommandErrorDescription.
	
	"(self isInvalidCommand: aCommand) ifTrue: [self error: MarsRover invalidCommandErrorDescription.]"! !

!testRun: #TestsMarsRover #test01SuccessfullLanding stamp: 'DA 5/13/2023 01:18:31'!
PASSED!

!testRun: #TestsMarsRover #test02DoesNotMoveWhenNoCommand stamp: 'DA 5/13/2023 01:18:31'!
ERROR!

!testRun: #TestsMarsRover #test03IncrementXAfterMovingFowardWhenFacingNorth stamp: 'DA 5/13/2023 01:18:31'!
ERROR!

!testRun: #TestsMarsRover #test04DecrementYAfterMovingBackwardWhenFacingNorth stamp: 'DA 5/13/2023 01:18:31'!
ERROR!

!testRun: #TestsMarsRover #test05FacingWestAfterRotatingLeftWhenFacingNorth stamp: 'DA 5/13/2023 01:18:31'!
ERROR!

!testRun: #TestsMarsRover #test06FacingEastAfterRotatingRightWhenFacingNorth stamp: 'DA 5/13/2023 01:18:31'!
ERROR!

!testRun: #TestsMarsRover #test07IncrementXAfterRotateRightAndMoveFowardWhenFacingNorth stamp: 'DA 5/13/2023 01:18:31'!
ERROR!

!testRun: #TestsMarsRover #test08DecrementYAfterRotateRightTwoTimesAndMoveFowardWhenFacingNorth stamp: 'DA 5/13/2023 01:18:31'!
ERROR!

!testRun: #TestsMarsRover #test09RotateFourTimesLeftDoNotChangeOrientation stamp: 'DA 5/13/2023 01:18:31'!
ERROR!

!testRun: #TestsMarsRover #test10MoveBackwardAndFowardLeavesInSamePlace stamp: 'DA 5/13/2023 01:18:31'!
ERROR!

!testRun: #TestsMarsRover #test11IncrementXFacingWestAfterRotatingRightAndMovingBackwardsFromSouth stamp: 'DA 5/13/2023 01:18:31'!
ERROR!

!testRun: #TestsMarsRover #test12MovingHorizontallyAfterRotating180Degrees stamp: 'DA 5/13/2023 01:18:31'!
ERROR!

!testRun: #TestsMarsRover #test13InvalidCommandNotAllowed stamp: 'DA 5/13/2023 01:18:31'!
PASSED!

!testRun: #TestsMarsRover #test14OnlyExecutePreviousCommandsBeforeInvalidOne stamp: 'DA 5/13/2023 01:18:31'!
PASSED!

!testRun: #TestsMarsRover #test03IncrementXAfterMovingFowardWhenFacingNorth stamp: 'DA 5/13/2023 01:18:34'!
ERROR!
!TestsMarsRover methodsFor: 'tests' stamp: 'DA 5/13/2023 01:18:59' prior: 50610589!
test03IncrementXAfterMovingFowardWhenFacingNorth
	|marsRover|
	
	marsRover := MarsRover startOn: 1@1 facing: self north.
	
	marsRover readACommand: 'f'.
	
	self assert: (marsRover hasPosition: 1@2 facing: self north).
	"Norte es subclase de Direccion (state)"! !
!TestsMarsRover methodsFor: 'tests' stamp: 'DA 5/13/2023 01:19:14' prior: 50611457!
test03IncrementXAfterMovingFowardWhenFacingNorth
	|marsRover|
	
	marsRover := MarsRover startOn: 1@1 facing: self north.
	
	marsRover readACommand: $f.
	
	self assert: (marsRover hasPosition: 1@2 facing: self north).
	"Norte es subclase de Direccion (state)"! !

!testRun: #TestsMarsRover #test03IncrementXAfterMovingFowardWhenFacingNorth stamp: 'DA 5/13/2023 01:19:15'!
ERROR!

!testRun: #TestsMarsRover #test03IncrementXAfterMovingFowardWhenFacingNorth stamp: 'DA 5/13/2023 01:19:31'!
ERROR!

!testRun: #TestsMarsRover #test03IncrementXAfterMovingFowardWhenFacingNorth stamp: 'DA 5/13/2023 01:19:45'!
ERROR!

!testRun: #TestsMarsRover #test01SuccessfullLanding stamp: 'DA 5/13/2023 01:19:52'!
PASSED!

!testRun: #TestsMarsRover #test02DoesNotMoveWhenNoCommand stamp: 'DA 5/13/2023 01:19:52'!
ERROR!

!testRun: #TestsMarsRover #test03IncrementXAfterMovingFowardWhenFacingNorth stamp: 'DA 5/13/2023 01:19:52'!
ERROR!

!testRun: #TestsMarsRover #test04DecrementYAfterMovingBackwardWhenFacingNorth stamp: 'DA 5/13/2023 01:19:52'!
ERROR!

!testRun: #TestsMarsRover #test05FacingWestAfterRotatingLeftWhenFacingNorth stamp: 'DA 5/13/2023 01:19:52'!
ERROR!

!testRun: #TestsMarsRover #test06FacingEastAfterRotatingRightWhenFacingNorth stamp: 'DA 5/13/2023 01:19:52'!
ERROR!

!testRun: #TestsMarsRover #test07IncrementXAfterRotateRightAndMoveFowardWhenFacingNorth stamp: 'DA 5/13/2023 01:19:52'!
ERROR!

!testRun: #TestsMarsRover #test08DecrementYAfterRotateRightTwoTimesAndMoveFowardWhenFacingNorth stamp: 'DA 5/13/2023 01:19:52'!
ERROR!

!testRun: #TestsMarsRover #test09RotateFourTimesLeftDoNotChangeOrientation stamp: 'DA 5/13/2023 01:19:52'!
ERROR!

!testRun: #TestsMarsRover #test10MoveBackwardAndFowardLeavesInSamePlace stamp: 'DA 5/13/2023 01:19:52'!
ERROR!

!testRun: #TestsMarsRover #test11IncrementXFacingWestAfterRotatingRightAndMovingBackwardsFromSouth stamp: 'DA 5/13/2023 01:19:52'!
ERROR!

!testRun: #TestsMarsRover #test12MovingHorizontallyAfterRotating180Degrees stamp: 'DA 5/13/2023 01:19:52'!
ERROR!

!testRun: #TestsMarsRover #test13InvalidCommandNotAllowed stamp: 'DA 5/13/2023 01:19:52'!
PASSED!

!testRun: #TestsMarsRover #test14OnlyExecutePreviousCommandsBeforeInvalidOne stamp: 'DA 5/13/2023 01:19:52'!
PASSED!

!testRun: #TestsMarsRover #test03IncrementXAfterMovingFowardWhenFacingNorth stamp: 'DA 5/13/2023 01:19:57'!
ERROR!

!testRun: #TestsMarsRover #test03IncrementXAfterMovingFowardWhenFacingNorth stamp: 'DA 5/13/2023 01:21:12'!
ERROR!

!testRun: #TestsMarsRover #test03IncrementXAfterMovingFowardWhenFacingNorth stamp: 'DA 5/13/2023 01:21:18'!
ERROR!

!testRun: #TestsMarsRover #test03IncrementXAfterMovingFowardWhenFacingNorth stamp: 'DA 5/13/2023 01:22:17'!
ERROR!
!MarsRover methodsFor: 'move' stamp: 'DA 5/13/2023 01:22:53' prior: 50611385!
readACommand: aCommand 
	(self isFowardCommand: aCommand) ifTrue: [^facing moveFoward].
	(self isBackwardCommand: aCommand) ifTrue: [^facing moveBackward].
	(self isRotateLeftCommand: aCommand) ifTrue: [^facing rotateLeft].
	(self isRotateRightCommand: aCommand) ifTrue: [^facing rotateRight		].
	
	self error: self class invalidCommandErrorDescription.
	
	"(self isInvalidCommand: aCommand) ifTrue: [self error: MarsRover invalidCommandErrorDescription.]"! !

!testRun: #TestsMarsRover #test01SuccessfullLanding stamp: 'DA 5/13/2023 01:22:55'!
PASSED!

!testRun: #TestsMarsRover #test02DoesNotMoveWhenNoCommand stamp: 'DA 5/13/2023 01:22:55'!
ERROR!

!testRun: #TestsMarsRover #test03IncrementXAfterMovingFowardWhenFacingNorth stamp: 'DA 5/13/2023 01:22:55'!
PASSED!

!testRun: #TestsMarsRover #test04DecrementYAfterMovingBackwardWhenFacingNorth stamp: 'DA 5/13/2023 01:22:55'!
PASSED!

!testRun: #TestsMarsRover #test05FacingWestAfterRotatingLeftWhenFacingNorth stamp: 'DA 5/13/2023 01:22:55'!
PASSED!

!testRun: #TestsMarsRover #test06FacingEastAfterRotatingRightWhenFacingNorth stamp: 'DA 5/13/2023 01:22:55'!
PASSED!

!testRun: #TestsMarsRover #test07IncrementXAfterRotateRightAndMoveFowardWhenFacingNorth stamp: 'DA 5/13/2023 01:22:55'!
PASSED!

!testRun: #TestsMarsRover #test08DecrementYAfterRotateRightTwoTimesAndMoveFowardWhenFacingNorth stamp: 'DA 5/13/2023 01:22:55'!
PASSED!

!testRun: #TestsMarsRover #test09RotateFourTimesLeftDoNotChangeOrientation stamp: 'DA 5/13/2023 01:22:55'!
PASSED!

!testRun: #TestsMarsRover #test10MoveBackwardAndFowardLeavesInSamePlace stamp: 'DA 5/13/2023 01:22:55'!
PASSED!

!testRun: #TestsMarsRover #test11IncrementXFacingWestAfterRotatingRightAndMovingBackwardsFromSouth stamp: 'DA 5/13/2023 01:22:55'!
PASSED!

!testRun: #TestsMarsRover #test12MovingHorizontallyAfterRotating180Degrees stamp: 'DA 5/13/2023 01:22:55'!
PASSED!

!testRun: #TestsMarsRover #test13InvalidCommandNotAllowed stamp: 'DA 5/13/2023 01:22:55'!
PASSED!

!testRun: #TestsMarsRover #test14OnlyExecutePreviousCommandsBeforeInvalidOne stamp: 'DA 5/13/2023 01:22:55'!
PASSED!

!testRun: #TestsMarsRover #test02DoesNotMoveWhenNoCommand stamp: 'DA 5/13/2023 01:22:55'!
ERROR!

!testRun: #TestsMarsRover #test01SuccessfullLanding stamp: 'DA 5/13/2023 01:23:04'!
PASSED!

!testRun: #TestsMarsRover #test02DoesNotMoveWhenNoCommand stamp: 'DA 5/13/2023 01:23:04'!
ERROR!

!testRun: #TestsMarsRover #test03IncrementXAfterMovingFowardWhenFacingNorth stamp: 'DA 5/13/2023 01:23:04'!
PASSED!

!testRun: #TestsMarsRover #test04DecrementYAfterMovingBackwardWhenFacingNorth stamp: 'DA 5/13/2023 01:23:04'!
PASSED!

!testRun: #TestsMarsRover #test05FacingWestAfterRotatingLeftWhenFacingNorth stamp: 'DA 5/13/2023 01:23:04'!
PASSED!

!testRun: #TestsMarsRover #test06FacingEastAfterRotatingRightWhenFacingNorth stamp: 'DA 5/13/2023 01:23:04'!
PASSED!

!testRun: #TestsMarsRover #test07IncrementXAfterRotateRightAndMoveFowardWhenFacingNorth stamp: 'DA 5/13/2023 01:23:04'!
PASSED!

!testRun: #TestsMarsRover #test08DecrementYAfterRotateRightTwoTimesAndMoveFowardWhenFacingNorth stamp: 'DA 5/13/2023 01:23:04'!
PASSED!

!testRun: #TestsMarsRover #test09RotateFourTimesLeftDoNotChangeOrientation stamp: 'DA 5/13/2023 01:23:04'!
PASSED!

!testRun: #TestsMarsRover #test10MoveBackwardAndFowardLeavesInSamePlace stamp: 'DA 5/13/2023 01:23:04'!
PASSED!

!testRun: #TestsMarsRover #test11IncrementXFacingWestAfterRotatingRightAndMovingBackwardsFromSouth stamp: 'DA 5/13/2023 01:23:04'!
PASSED!

!testRun: #TestsMarsRover #test12MovingHorizontallyAfterRotating180Degrees stamp: 'DA 5/13/2023 01:23:04'!
PASSED!

!testRun: #TestsMarsRover #test13InvalidCommandNotAllowed stamp: 'DA 5/13/2023 01:23:04'!
PASSED!

!testRun: #TestsMarsRover #test14OnlyExecutePreviousCommandsBeforeInvalidOne stamp: 'DA 5/13/2023 01:23:04'!
PASSED!

!testRun: #TestsMarsRover #test02DoesNotMoveWhenNoCommand stamp: 'DA 5/13/2023 01:23:04'!
ERROR!

!testRun: #TestsMarsRover #test02DoesNotMoveWhenNoCommand stamp: 'DA 5/13/2023 01:23:22'!
ERROR!

!testRun: #TestsMarsRover #test04DecrementYAfterMovingBackwardWhenFacingNorth stamp: 'DA 5/13/2023 01:23:32'!
PASSED!

!testRun: #TestsMarsRover #test05FacingWestAfterRotatingLeftWhenFacingNorth stamp: 'DA 5/13/2023 01:23:35'!
PASSED!

!testRun: #TestsMarsRover #test06FacingEastAfterRotatingRightWhenFacingNorth stamp: 'DA 5/13/2023 01:23:37'!
PASSED!

!testRun: #TestsMarsRover #test07IncrementXAfterRotateRightAndMoveFowardWhenFacingNorth stamp: 'DA 5/13/2023 01:23:39'!
PASSED!

!testRun: #TestsMarsRover #test08DecrementYAfterRotateRightTwoTimesAndMoveFowardWhenFacingNorth stamp: 'DA 5/13/2023 01:23:41'!
PASSED!

!testRun: #TestsMarsRover #test09RotateFourTimesLeftDoNotChangeOrientation stamp: 'DA 5/13/2023 01:23:43'!
PASSED!

!testRun: #TestsMarsRover #test14OnlyExecutePreviousCommandsBeforeInvalidOne stamp: 'DA 5/13/2023 01:23:47'!
PASSED!
!MarsRover methodsFor: 'commands' stamp: 'DA 5/13/2023 01:24:31'!
isEmptyCommand: aCommand
	^aCommand = ''! !

!methodRemoval: MarsRover #isInvalidCommand: stamp: 'DA 5/13/2023 01:24:36'!
isInvalidCommand: aCommand 
	^(aCommand = $y) or: (aCommand = $ñ)!
!MarsRover methodsFor: 'move' stamp: 'DA 5/13/2023 01:25:16' prior: 50611555!
readACommand: aCommand 
	(self isFowardCommand: aCommand) ifTrue: [^facing moveFoward].
	(self isBackwardCommand: aCommand) ifTrue: [^facing moveBackward].
	(self isRotateLeftCommand: aCommand) ifTrue: [^facing rotateLeft].
	(self isRotateRightCommand: aCommand) ifTrue: [^facing rotateRight		].
	(self isEmptyCommand: aCommand) ifFalse:[ self error: self class invalidCommandErrorDescription.].
! !

!testRun: #TestsMarsRover #test01SuccessfullLanding stamp: 'DA 5/13/2023 01:25:20'!
PASSED!

!testRun: #TestsMarsRover #test02DoesNotMoveWhenNoCommand stamp: 'DA 5/13/2023 01:25:20'!
PASSED!

!testRun: #TestsMarsRover #test03IncrementXAfterMovingFowardWhenFacingNorth stamp: 'DA 5/13/2023 01:25:20'!
PASSED!

!testRun: #TestsMarsRover #test04DecrementYAfterMovingBackwardWhenFacingNorth stamp: 'DA 5/13/2023 01:25:20'!
PASSED!

!testRun: #TestsMarsRover #test05FacingWestAfterRotatingLeftWhenFacingNorth stamp: 'DA 5/13/2023 01:25:20'!
PASSED!

!testRun: #TestsMarsRover #test06FacingEastAfterRotatingRightWhenFacingNorth stamp: 'DA 5/13/2023 01:25:20'!
PASSED!

!testRun: #TestsMarsRover #test07IncrementXAfterRotateRightAndMoveFowardWhenFacingNorth stamp: 'DA 5/13/2023 01:25:20'!
PASSED!

!testRun: #TestsMarsRover #test08DecrementYAfterRotateRightTwoTimesAndMoveFowardWhenFacingNorth stamp: 'DA 5/13/2023 01:25:20'!
PASSED!

!testRun: #TestsMarsRover #test09RotateFourTimesLeftDoNotChangeOrientation stamp: 'DA 5/13/2023 01:25:20'!
PASSED!

!testRun: #TestsMarsRover #test10MoveBackwardAndFowardLeavesInSamePlace stamp: 'DA 5/13/2023 01:25:20'!
PASSED!

!testRun: #TestsMarsRover #test11IncrementXFacingWestAfterRotatingRightAndMovingBackwardsFromSouth stamp: 'DA 5/13/2023 01:25:20'!
PASSED!

!testRun: #TestsMarsRover #test12MovingHorizontallyAfterRotating180Degrees stamp: 'DA 5/13/2023 01:25:20'!
PASSED!

!testRun: #TestsMarsRover #test13InvalidCommandNotAllowed stamp: 'DA 5/13/2023 01:25:20'!
PASSED!

!testRun: #TestsMarsRover #test14OnlyExecutePreviousCommandsBeforeInvalidOne stamp: 'DA 5/13/2023 01:25:20'!
PASSED!

----SNAPSHOT----(13 May 2023 01:25:24) CuisUniversity-5690.image priorSource: 8902678!
!TestsMarsRover methodsFor: 'tests' stamp: 'DA 5/13/2023 01:26:31' prior: 50610600!
test04DecrementYAfterMovingBackwardWhenFacingNorth
	|marsRover|
	
	marsRover := MarsRover startOn: 1@1 facing: self north.
	
	marsRover readACommand: $b.
	
	self assert: (marsRover hasPosition: 1@0 facing: self north).
! !
!TestsMarsRover methodsFor: 'tests' stamp: 'DA 5/13/2023 01:26:37' prior: 50611468!
test03IncrementXAfterMovingFowardWhenFacingNorth
	|marsRover|
	
	marsRover := MarsRover startOn: 1@1 facing: self north.
	
	marsRover readACommand: $f.
	
	self assert: (marsRover hasPosition: 1@2 facing: self north).
! !
!TestsMarsRover methodsFor: 'tests' stamp: 'DA 5/13/2023 01:26:42' prior: 50610570!
test01SuccessfullLanding
	|marsRover|
	
	marsRover := MarsRover startOn: 1@1 facing: self north.
	
	self assert: (marsRover hasPosition: 1@1 facing: self north).! !
!TestsMarsRover methodsFor: 'tests' stamp: 'DA 5/13/2023 01:26:47' prior: 50610578!
test02DoesNotMoveWhenNoCommand
	|marsRover|
	
	marsRover := MarsRover startOn: 1@1 facing: self north.
	
	marsRover readACommand: ''.
	
	self assert: (marsRover hasPosition: 1@1 facing: self north).
! !
!MarsRoverFacing methodsFor: 'nil' stamp: 'DA 5/13/2023 01:32:18'!
moveBackward
	^ self subclassResponsibility ! !
!MarsRoverFacing methodsFor: 'as yet unclassified' stamp: 'DA 5/13/2023 01:32:23'!
moveFoward
	^ self subclassResponsibility ! !
!MarsRoverFacing methodsFor: 'as yet unclassified' stamp: 'DA 5/13/2023 01:32:31'!
rotateLeft
	^ self subclassResponsibility ! !
!MarsRoverFacing methodsFor: 'as yet unclassified' stamp: 'DA 5/13/2023 01:32:35'!
rotateRight
	^ self subclassResponsibility ! !
!TestsMarsRover methodsFor: 'tests' stamp: 'DA 5/13/2023 01:36:41' prior: 50610707!
test14OnlyExecutePreviousCommandsBeforeInvalidOne
	|marsRover|
	
	marsRover := MarsRover startOn: 2@2 facing: self.
	
	self 
		should: [	marsRover readCommands: 'fyb'.]
		raise: Error
		withExceptionDo: [:anError |
			self assert: anError messageText equals: MarsRover invalidCommandErrorDescription.
			self assert: (marsRover hasPosition: 1@2 facing: self west).]
			 ! !
!TestsMarsRover methodsFor: 'tests' stamp: 'DA 5/13/2023 01:36:41' prior: 50611845!
test14OnlyExecutePreviousCommandsBeforeInvalidOne
	|marsRover|
	
	marsRover := MarsRover startOn: 2@2 facing: self.
	
	self 
		should: [	marsRover readCommands: 'fyb'.]
		raise: Error
		withExceptionDo: [:anError |
			self assert: anError messageText equals: MarsRover invalidCommandErrorDescription.
			self assert: (marsRover hasPosition: 1@2 facing: self west).]
			 ! !
!TestsMarsRover methodsFor: 'tests' stamp: 'DA 5/13/2023 00:46:00' prior: 50611860!
test14OnlyExecutePreviousCommandsBeforeInvalidOne
	|marsRover|
	
	marsRover := MarsRover startOn: 2@2 facing: self west.
	
	self 
		should: [	marsRover readCommands: 'fyb'.]
		raise: Error
		withExceptionDo: [:anError |
			self assert: anError messageText equals: MarsRover invalidCommandErrorDescription.
			self assert: (marsRover hasPosition: 1@2 facing: self west).]
			 ! !

!testRun: #TestsMarsRover #test14OnlyExecutePreviousCommandsBeforeInvalidOne stamp: 'DA 5/13/2023 01:36:59'!
PASSED!

!testRun: #TestsMarsRover #test01SuccessfullLanding stamp: 'DA 5/13/2023 01:36:59'!
PASSED!

!testRun: #TestsMarsRover #test02DoesNotMoveWhenNoCommand stamp: 'DA 5/13/2023 01:36:59'!
PASSED!

!testRun: #TestsMarsRover #test03IncrementXAfterMovingFowardWhenFacingNorth stamp: 'DA 5/13/2023 01:36:59'!
PASSED!

!testRun: #TestsMarsRover #test04DecrementYAfterMovingBackwardWhenFacingNorth stamp: 'DA 5/13/2023 01:36:59'!
PASSED!

!testRun: #TestsMarsRover #test05FacingWestAfterRotatingLeftWhenFacingNorth stamp: 'DA 5/13/2023 01:36:59'!
PASSED!

!testRun: #TestsMarsRover #test06FacingEastAfterRotatingRightWhenFacingNorth stamp: 'DA 5/13/2023 01:36:59'!
PASSED!

!testRun: #TestsMarsRover #test07IncrementXAfterRotateRightAndMoveFowardWhenFacingNorth stamp: 'DA 5/13/2023 01:36:59'!
PASSED!

!testRun: #TestsMarsRover #test08DecrementYAfterRotateRightTwoTimesAndMoveFowardWhenFacingNorth stamp: 'DA 5/13/2023 01:36:59'!
PASSED!

!testRun: #TestsMarsRover #test09RotateFourTimesLeftDoNotChangeOrientation stamp: 'DA 5/13/2023 01:36:59'!
PASSED!

!testRun: #TestsMarsRover #test10MoveBackwardAndFowardLeavesInSamePlace stamp: 'DA 5/13/2023 01:36:59'!
PASSED!

!testRun: #TestsMarsRover #test11IncrementXFacingWestAfterRotatingRightAndMovingBackwardsFromSouth stamp: 'DA 5/13/2023 01:36:59'!
PASSED!

!testRun: #TestsMarsRover #test12MovingHorizontallyAfterRotating180Degrees stamp: 'DA 5/13/2023 01:36:59'!
PASSED!

!testRun: #TestsMarsRover #test13InvalidCommandNotAllowed stamp: 'DA 5/13/2023 01:36:59'!
PASSED!

!testRun: #TestsMarsRover #test14OnlyExecutePreviousCommandsBeforeInvalidOne stamp: 'DA 5/13/2023 01:36:59'!
PASSED!
!MarsRover methodsFor: 'movements' stamp: 'DA 5/13/2023 01:42:30'!
moveFoward
	facing moveFoward ! !

!methodRemoval: MarsRover #moveFoward stamp: 'DA 5/13/2023 01:42:49'!
moveFoward
	facing moveFoward !

----SNAPSHOT----(13 May 2023 01:44:04) CuisUniversity-5690.image priorSource: 8964302!

----QUIT----(13 May 2023 01:47:41) CuisUniversity-5690.image priorSource: 8969608!