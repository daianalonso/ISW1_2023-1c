

----QUIT----(12 May 2023 17:49:00) CuisUniversity-5799.image priorSource: 4801971!

----STARTUP---- (12 May 2023 17:49:01) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-5799.image!


----QUIT----(12 May 2023 17:49:01) CuisUniversity-5799.image priorSource: 9222569!

----STARTUP---- (17 May 2023 18:12:16) as E:\windows64\CuisUniversity-5799.image!


----End fileIn of E:\Portfolio-Ejercicio.st----!
!PortfolioTest methodsFor: 'tests' stamp: 'DA 5/17/2023 18:13:36' prior: 50619896!
test03AddingMoreThanOneAccountTakeSumOfTheirBalance

	|porfolio account1 account2|
	
	porfolio := Portfolio new.
	
	account1 := ReceptiveAccount new.
	Deposit register: 100 on: account1.
	
	account2 := ReceptiveAccount new.
	Deposit register: 200 on: account2.
	
	porfolio vinculateAccount: account1.
	porfolio vinculateAccount: account2.
	
	
	self assert: (account1 balance + account2 balance) equals: porfolio balance.! !

!testRun: #PortfolioTest #test03AddingMoreThanOneAccountTakeSumOfTheirBalance stamp: 'DA 5/17/2023 18:13:37'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioHasBalanceCero stamp: 'DA 5/17/2023 18:13:37'!
PASSED!

!testRun: #PortfolioTest #test02AddingOneAccountTakeTheirBalance stamp: 'DA 5/17/2023 18:13:37'!
PASSED!

!testRun: #PortfolioTest #test03AddingMoreThanOneAccountTakeSumOfTheirBalance stamp: 'DA 5/17/2023 18:13:37'!
PASSED!

!testRun: #PortfolioTest #test04AddingEmptyPortfolioHaveBalanceCero stamp: 'DA 5/17/2023 18:13:37'!
PASSED!

!testRun: #PortfolioTest #test05AddingPortfolioWithAccountHaveBalanceOfThatAccount stamp: 'DA 5/17/2023 18:13:37'!
PASSED!

!testRun: #PortfolioTest #test06EmptyPortfolioHaveNotTransactions stamp: 'DA 5/17/2023 18:13:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'DA 5/17/2023 18:13:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'DA 5/17/2023 18:13:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'DA 5/17/2023 18:13:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'DA 5/17/2023 18:13:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'DA 5/17/2023 18:13:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'DA 5/17/2023 18:13:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'DA 5/17/2023 18:13:37'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'DA 5/17/2023 18:13:57' prior: 50619921!
test05AddingPortfolioWithAccountHaveBalanceOfThatAccount

	|portfolio1 portfolio2 account|
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	account := ReceptiveAccount new.
	Deposit register: 50 on: account.
	
	portfolio2 vinculateAccount: account.
	
	portfolio1 vinculatePortfolio: portfolio2.
	
	self assert: (account balance) equals: portfolio1 balance.! !

!testRun: #PortfolioTest #test05AddingPortfolioWithAccountHaveBalanceOfThatAccount stamp: 'DA 5/17/2023 18:13:58'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioHasBalanceCero stamp: 'DA 5/17/2023 18:13:58'!
PASSED!

!testRun: #PortfolioTest #test02AddingOneAccountTakeTheirBalance stamp: 'DA 5/17/2023 18:13:58'!
PASSED!

!testRun: #PortfolioTest #test03AddingMoreThanOneAccountTakeSumOfTheirBalance stamp: 'DA 5/17/2023 18:13:58'!
PASSED!

!testRun: #PortfolioTest #test04AddingEmptyPortfolioHaveBalanceCero stamp: 'DA 5/17/2023 18:13:58'!
PASSED!

!testRun: #PortfolioTest #test05AddingPortfolioWithAccountHaveBalanceOfThatAccount stamp: 'DA 5/17/2023 18:13:59'!
PASSED!

!testRun: #PortfolioTest #test06EmptyPortfolioHaveNotTransactions stamp: 'DA 5/17/2023 18:13:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'DA 5/17/2023 18:13:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'DA 5/17/2023 18:13:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'DA 5/17/2023 18:13:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'DA 5/17/2023 18:13:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'DA 5/17/2023 18:13:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'DA 5/17/2023 18:13:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'DA 5/17/2023 18:13:59'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'DA 5/17/2023 18:14:16' prior: 50619935!
test06EmptyPortfolioHaveNotTransactions
	self deny: (Portfolio new hasRegistered: (Deposit for: 100))! !

!testRun: #PortfolioTest #test06EmptyPortfolioHaveNotTransactions stamp: 'DA 5/17/2023 18:14:17'!
ERROR!
!Portfolio methodsFor: 'category-name' stamp: 'DA 5/17/2023 18:14:24'!
hasRegistered: aRenameMe1 
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'category-name' stamp: 'DA 5/17/2023 18:15:20' prior: 50620386!
hasRegistered: aTransaction
	^ accounts anySatisfy: [ :anAccount | anAccount hasRegistered: aTransaction ]! !

!testRun: #PortfolioTest #test06EmptyPortfolioHaveNotTransactions stamp: 'DA 5/17/2023 18:15:22'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioHasBalanceCero stamp: 'DA 5/17/2023 18:15:22'!
PASSED!

!testRun: #PortfolioTest #test02AddingOneAccountTakeTheirBalance stamp: 'DA 5/17/2023 18:15:22'!
PASSED!

!testRun: #PortfolioTest #test03AddingMoreThanOneAccountTakeSumOfTheirBalance stamp: 'DA 5/17/2023 18:15:22'!
PASSED!

!testRun: #PortfolioTest #test04AddingEmptyPortfolioHaveBalanceCero stamp: 'DA 5/17/2023 18:15:22'!
PASSED!

!testRun: #PortfolioTest #test05AddingPortfolioWithAccountHaveBalanceOfThatAccount stamp: 'DA 5/17/2023 18:15:22'!
PASSED!

!testRun: #PortfolioTest #test06EmptyPortfolioHaveNotTransactions stamp: 'DA 5/17/2023 18:15:22'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'DA 5/17/2023 18:15:22'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'DA 5/17/2023 18:15:22'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'DA 5/17/2023 18:15:22'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'DA 5/17/2023 18:15:22'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'DA 5/17/2023 18:15:22'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'DA 5/17/2023 18:15:22'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'DA 5/17/2023 18:15:22'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'DA 5/17/2023 18:15:53' prior: 50619886!
test02AddingOneAccountTakeTheirBalance
	|porfolio account|
	
	porfolio := Portfolio new.
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	porfolio vinculateAccount: account.
	
	
	self assert: (account balance) equals: porfolio balance.! !
!PortfolioTest methodsFor: 'tests' stamp: 'DA 5/17/2023 18:15:56' prior: 50620448!
test02AddingOneAccountTakeTheirBalance
	|porfolio account|
	
	porfolio := Portfolio new.
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	porfolio vinculateAccount: account.
	
	self assert: (account balance) equals: porfolio balance.! !
!PortfolioTest methodsFor: 'tests' stamp: 'DA 5/17/2023 18:19:24'!
test07PortfolioHasRegisteredTheirAccountTransactions
	|portfolio account transaction|
	account := ReceptiveAccount new.
	transaction := Deposit for: 100.
	
	account register: transaction.
	portfolio := Portfolio with: account.! !
!PortfolioTest methodsFor: 'tests' stamp: 'DA 5/17/2023 18:20:11' prior: 50620470!
test07PortfolioHasRegisteredTheirAccountTransactions
	|portfolio account transaction|
	
	account := ReceptiveAccount new.
	transaction := Deposit for: 100.
	
	account register: transaction.
	portfolio := Portfolio with: account.
	
	self assert: (portfolio hasRegistered: transaction). ! !

!testRun: #PortfolioTest #test07PortfolioHasRegisteredTheirAccountTransactions stamp: 'DA 5/17/2023 18:20:12'!
ERROR!
!Portfolio class methodsFor: 'instance creation' stamp: 'DA 5/17/2023 18:20:20'!
with: aReceptiveAccount 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWith: aReceptiveAccount ! !
!Portfolio class methodsFor: 'instance creation' stamp: 'DA 5/17/2023 18:20:44' prior: 50620496!
with: anAccount 
	^self new initializeWith: anAccount ! !

!testRun: #PortfolioTest #test07PortfolioHasRegisteredTheirAccountTransactions stamp: 'DA 5/17/2023 18:20:47'!
ERROR!

!methodRemoval: Portfolio class #with: stamp: 'DA 5/17/2023 18:22:24'!
with: anAccount 
	^self new initializeWith: anAccount !
!PortfolioTest methodsFor: 'tests' stamp: 'DA 5/17/2023 18:22:48' prior: 50620480!
test07PortfolioHasRegisteredTheirAccountTransactions
	|portfolio account transaction|
	
	account := ReceptiveAccount new.
	transaction := Deposit for: 100.
	
	account register: transaction.
	portfolio vinculateAccount: account.
	
	self assert: (portfolio hasRegistered: transaction). ! !

!testRun: #PortfolioTest #test07PortfolioHasRegisteredTheirAccountTransactions stamp: 'DA 5/17/2023 18:23:02'!
ERROR!
!PortfolioTest methodsFor: 'tests' stamp: 'DA 5/17/2023 18:23:17' prior: 50620518!
test07PortfolioHasRegisteredTheirAccountTransactions
	|portfolio account transaction|
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	transaction := Deposit for: 100.
	
	account register: transaction.
	portfolio vinculateAccount: account.
	
	self assert: (portfolio hasRegistered: transaction). ! !

!testRun: #PortfolioTest #test07PortfolioHasRegisteredTheirAccountTransactions stamp: 'DA 5/17/2023 18:23:18'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioHasBalanceCero stamp: 'DA 5/17/2023 18:23:18'!
PASSED!

!testRun: #PortfolioTest #test02AddingOneAccountTakeTheirBalance stamp: 'DA 5/17/2023 18:23:18'!
PASSED!

!testRun: #PortfolioTest #test03AddingMoreThanOneAccountTakeSumOfTheirBalance stamp: 'DA 5/17/2023 18:23:18'!
PASSED!

!testRun: #PortfolioTest #test04AddingEmptyPortfolioHaveBalanceCero stamp: 'DA 5/17/2023 18:23:18'!
PASSED!

!testRun: #PortfolioTest #test05AddingPortfolioWithAccountHaveBalanceOfThatAccount stamp: 'DA 5/17/2023 18:23:18'!
PASSED!

!testRun: #PortfolioTest #test06EmptyPortfolioHaveNotTransactions stamp: 'DA 5/17/2023 18:23:18'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasRegisteredTheirAccountTransactions stamp: 'DA 5/17/2023 18:23:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'DA 5/17/2023 18:23:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'DA 5/17/2023 18:23:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'DA 5/17/2023 18:23:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'DA 5/17/2023 18:23:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'DA 5/17/2023 18:23:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'DA 5/17/2023 18:23:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'DA 5/17/2023 18:23:18'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'DA 5/17/2023 18:30:52'!
test07PortfolioCanLookTheirTransactionsRecursively
	|portfolio1 portfolio2 simpleAccount portfolioAccount depositTransaction withdrawTransaction|
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	
	simpleAccount := ReceptiveAccount new.
	depositTransaction := Deposit for: 100.
	simpleAccount register: depositTransaction.
	portfolio1 vinculateAccount: simpleAccount.
	
	portfolioAccount := ReceptiveAccount new.
	withdrawTransaction:= Withdraw for: 50.
	portfolioAccount register: withdrawTransaction. 
	
	portfolio2 vinculateAccount: portfolioAccount.
	portfolio1 vinculatePortfolio: portfolio2.
	
	self assert: (portfolio1 hasRegistered: depositTransaction).
	self assert: (portfolio1 hasRegistered: withdrawTransaction). ! !
!PortfolioTest methodsFor: 'tests' stamp: 'DA 5/17/2023 18:31:04'!
test08PortfolioCanLookTheirTransactionsRecursively
	|portfolio1 portfolio2 simpleAccount portfolioAccount depositTransaction withdrawTransaction|
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	
	simpleAccount := ReceptiveAccount new.
	depositTransaction := Deposit for: 100.
	simpleAccount register: depositTransaction.
	portfolio1 vinculateAccount: simpleAccount.
	
	portfolioAccount := ReceptiveAccount new.
	withdrawTransaction:= Withdraw for: 50.
	portfolioAccount register: withdrawTransaction. 
	
	portfolio2 vinculateAccount: portfolioAccount.
	portfolio1 vinculatePortfolio: portfolio2.
	
	self assert: (portfolio1 hasRegistered: depositTransaction).
	self assert: (portfolio1 hasRegistered: withdrawTransaction). ! !

!methodRemoval: PortfolioTest #test07PortfolioCanLookTheirTransactionsRecursively stamp: 'DA 5/17/2023 18:31:05'!
test07PortfolioCanLookTheirTransactionsRecursively
	|portfolio1 portfolio2 simpleAccount portfolioAccount depositTransaction withdrawTransaction|
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	
	simpleAccount := ReceptiveAccount new.
	depositTransaction := Deposit for: 100.
	simpleAccount register: depositTransaction.
	portfolio1 vinculateAccount: simpleAccount.
	
	portfolioAccount := ReceptiveAccount new.
	withdrawTransaction:= Withdraw for: 50.
	portfolioAccount register: withdrawTransaction. 
	
	portfolio2 vinculateAccount: portfolioAccount.
	portfolio1 vinculatePortfolio: portfolio2.
	
	self assert: (portfolio1 hasRegistered: depositTransaction).
	self assert: (portfolio1 hasRegistered: withdrawTransaction). !

!testRun: #PortfolioTest #test08PortfolioCanLookTheirTransactionsRecursively stamp: 'DA 5/17/2023 18:31:09'!
FAILURE!
!Portfolio methodsFor: 'category-name' stamp: 'DA 5/17/2023 18:33:08' prior: 50620391!
hasRegistered: aTransaction
	|registeredInAccounts registeredInPortfolios|
	registeredInAccounts := accounts anySatisfy: [ :anAccount | 
										anAccount hasRegistered: aTransaction ].
	registeredInPortfolios := portfolios anySatisfy: [:aPortfolio|
										aPortfolio hasRegistered: aTransaction].
	^ registeredInAccounts or: registeredInPortfolios ! !

!testRun: #PortfolioTest #test01EmptyPortfolioHasBalanceCero stamp: 'DA 5/17/2023 18:33:09'!
PASSED!

!testRun: #PortfolioTest #test02AddingOneAccountTakeTheirBalance stamp: 'DA 5/17/2023 18:33:09'!
PASSED!

!testRun: #PortfolioTest #test03AddingMoreThanOneAccountTakeSumOfTheirBalance stamp: 'DA 5/17/2023 18:33:09'!
PASSED!

!testRun: #PortfolioTest #test04AddingEmptyPortfolioHaveBalanceCero stamp: 'DA 5/17/2023 18:33:09'!
PASSED!

!testRun: #PortfolioTest #test05AddingPortfolioWithAccountHaveBalanceOfThatAccount stamp: 'DA 5/17/2023 18:33:09'!
PASSED!

!testRun: #PortfolioTest #test06EmptyPortfolioHaveNotTransactions stamp: 'DA 5/17/2023 18:33:09'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasRegisteredTheirAccountTransactions stamp: 'DA 5/17/2023 18:33:10'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioCanLookTheirTransactionsRecursively stamp: 'DA 5/17/2023 18:33:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'DA 5/17/2023 18:33:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'DA 5/17/2023 18:33:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'DA 5/17/2023 18:33:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'DA 5/17/2023 18:33:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'DA 5/17/2023 18:33:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'DA 5/17/2023 18:33:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'DA 5/17/2023 18:33:10'!
PASSED!

!methodRemoval: PortfolioTest #test01EmptyPortfolioHasBalanceCero stamp: 'DA 5/17/2023 18:33:40'!
test01EmptyPortfolioHasBalanceCero
	|porfolio|
	porfolio := Portfolio new.
	self assert: 0 equals: porfolio balance  !
!PortfolioTest methodsFor: 'tests' stamp: 'DA 5/17/2023 18:34:29'!
test01BalanceOfPortfolioWithoutAccountsIsZero
	self assert: 0 equals: Portfolio new balance! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'DA 5/17/2023 18:34:30'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'DA 5/17/2023 18:34:30'!
PASSED!

!testRun: #PortfolioTest #test02AddingOneAccountTakeTheirBalance stamp: 'DA 5/17/2023 18:34:30'!
PASSED!

!testRun: #PortfolioTest #test03AddingMoreThanOneAccountTakeSumOfTheirBalance stamp: 'DA 5/17/2023 18:34:30'!
PASSED!

!testRun: #PortfolioTest #test04AddingEmptyPortfolioHaveBalanceCero stamp: 'DA 5/17/2023 18:34:30'!
PASSED!

!testRun: #PortfolioTest #test05AddingPortfolioWithAccountHaveBalanceOfThatAccount stamp: 'DA 5/17/2023 18:34:30'!
PASSED!

!testRun: #PortfolioTest #test06EmptyPortfolioHaveNotTransactions stamp: 'DA 5/17/2023 18:34:30'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasRegisteredTheirAccountTransactions stamp: 'DA 5/17/2023 18:34:30'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioCanLookTheirTransactionsRecursively stamp: 'DA 5/17/2023 18:34:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'DA 5/17/2023 18:34:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'DA 5/17/2023 18:34:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'DA 5/17/2023 18:34:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'DA 5/17/2023 18:34:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'DA 5/17/2023 18:34:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'DA 5/17/2023 18:34:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'DA 5/17/2023 18:34:31'!
PASSED!
!AccountTransaction methodsFor: 'as yet unclassified' stamp: 'DA 5/17/2023 18:35:05'!
applyTransaction: aTransaction
 	self subclassResponsibility ! !

!methodRemoval: AccountTransaction #applyTransaction stamp: 'DA 5/17/2023 18:35:09'!
applyTransaction
 	self subclassResponsibility !
!AccountTransaction methodsFor: 'as yet unclassified' stamp: 'DA 5/17/2023 18:35:25'!
affectTransaction: aTransaction
 	self subclassResponsibility ! !
!Deposit methodsFor: 'as yet unclassified' stamp: 'DA 5/17/2023 18:35:25' overrides: 50620833!
affectTransaction: actualBalance
	^ actualBalance + value! !
!Withdraw methodsFor: 'as yet unclassified' stamp: 'DA 5/17/2023 18:35:25' overrides: 50620833!
affectTransaction: actualBalance
	^ actualBalance - value! !

!methodRemoval: AccountTransaction #applyTransaction: stamp: 'DA 5/17/2023 18:35:25'!
applyTransaction: aTransaction
 	self subclassResponsibility !

!methodRemoval: Deposit #applyTransaction: stamp: 'DA 5/17/2023 18:35:25'!
applyTransaction: actualBalance
	^ actualBalance + value!

!methodRemoval: Withdraw #applyTransaction: stamp: 'DA 5/17/2023 18:35:25'!
applyTransaction: actualBalance
	^ actualBalance - value!

!testRun: #PortfolioTest #test08PortfolioCanLookTheirTransactionsRecursively stamp: 'DA 5/17/2023 18:39:00'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'DA 5/17/2023 18:39:01'!
PASSED!

!testRun: #PortfolioTest #test02AddingOneAccountTakeTheirBalance stamp: 'DA 5/17/2023 18:39:02'!
ERROR!

!testRun: #PortfolioTest #test03AddingMoreThanOneAccountTakeSumOfTheirBalance stamp: 'DA 5/17/2023 18:39:02'!
ERROR!

!testRun: #PortfolioTest #test04AddingEmptyPortfolioHaveBalanceCero stamp: 'DA 5/17/2023 18:39:02'!
PASSED!

!testRun: #PortfolioTest #test05AddingPortfolioWithAccountHaveBalanceOfThatAccount stamp: 'DA 5/17/2023 18:39:02'!
ERROR!

!testRun: #PortfolioTest #test06EmptyPortfolioHaveNotTransactions stamp: 'DA 5/17/2023 18:39:02'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasRegisteredTheirAccountTransactions stamp: 'DA 5/17/2023 18:39:02'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioCanLookTheirTransactionsRecursively stamp: 'DA 5/17/2023 18:39:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'DA 5/17/2023 18:39:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'DA 5/17/2023 18:39:02'!
ERROR!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'DA 5/17/2023 18:39:02'!
ERROR!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'DA 5/17/2023 18:39:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'DA 5/17/2023 18:39:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'DA 5/17/2023 18:39:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'DA 5/17/2023 18:39:02'!
PASSED!

!testRun: #PortfolioTest #test02AddingOneAccountTakeTheirBalance stamp: 'DA 5/17/2023 18:39:05'!
ERROR!
!ReceptiveAccount methodsFor: 'balance' stamp: 'DA 5/17/2023 18:39:42' prior: 50620231!
balance
	^transactions inject: 0 into:[:acum :aTransaction | aTransaction affectTransaction: acum].! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'DA 5/17/2023 18:39:43'!
PASSED!

!testRun: #PortfolioTest #test02AddingOneAccountTakeTheirBalance stamp: 'DA 5/17/2023 18:39:43'!
PASSED!

!testRun: #PortfolioTest #test03AddingMoreThanOneAccountTakeSumOfTheirBalance stamp: 'DA 5/17/2023 18:39:43'!
PASSED!

!testRun: #PortfolioTest #test04AddingEmptyPortfolioHaveBalanceCero stamp: 'DA 5/17/2023 18:39:43'!
PASSED!

!testRun: #PortfolioTest #test05AddingPortfolioWithAccountHaveBalanceOfThatAccount stamp: 'DA 5/17/2023 18:39:43'!
PASSED!

!testRun: #PortfolioTest #test06EmptyPortfolioHaveNotTransactions stamp: 'DA 5/17/2023 18:39:43'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasRegisteredTheirAccountTransactions stamp: 'DA 5/17/2023 18:39:43'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioCanLookTheirTransactionsRecursively stamp: 'DA 5/17/2023 18:39:43'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'DA 5/17/2023 18:39:43'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'DA 5/17/2023 18:39:43'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'DA 5/17/2023 18:39:43'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'DA 5/17/2023 18:39:43'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'DA 5/17/2023 18:39:43'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'DA 5/17/2023 18:39:43'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'DA 5/17/2023 18:39:43'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'DA 5/17/2023 18:41:08' prior: 50620627!
test08PortfolioCanLookTheirTransactionsRecursively
	|portfolio1 portfolio2 simpleAccount portfolioAccount depositTransaction withdrawTransaction|
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	
	simpleAccount := ReceptiveAccount new.
	depositTransaction := Deposit for: 100.
	simpleAccount register: depositTransaction.
	portfolio1 vinculateAccount: simpleAccount.
	
	portfolioAccount := ReceptiveAccount new.
	withdrawTransaction:= Withdraw for: 50.
	portfolioAccount register: withdrawTransaction. 
	
	portfolio2 vinculateAccount: portfolioAccount.
	portfolio1 vinculatePortfolio: portfolio2.
	
	self assert:2 equals: (portfolio1 transactions size).
	self assert: (portfolio1 hasRegistered: depositTransaction).
	self assert: (portfolio1 hasRegistered: withdrawTransaction). ! !

!testRun: #PortfolioTest #test08PortfolioCanLookTheirTransactionsRecursively stamp: 'DA 5/17/2023 18:41:09'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'DA 5/17/2023 18:41:09'!
PASSED!

!testRun: #PortfolioTest #test02AddingOneAccountTakeTheirBalance stamp: 'DA 5/17/2023 18:41:09'!
PASSED!

!testRun: #PortfolioTest #test03AddingMoreThanOneAccountTakeSumOfTheirBalance stamp: 'DA 5/17/2023 18:41:09'!
PASSED!

!testRun: #PortfolioTest #test04AddingEmptyPortfolioHaveBalanceCero stamp: 'DA 5/17/2023 18:41:09'!
PASSED!

!testRun: #PortfolioTest #test05AddingPortfolioWithAccountHaveBalanceOfThatAccount stamp: 'DA 5/17/2023 18:41:09'!
PASSED!

!testRun: #PortfolioTest #test06EmptyPortfolioHaveNotTransactions stamp: 'DA 5/17/2023 18:41:09'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasRegisteredTheirAccountTransactions stamp: 'DA 5/17/2023 18:41:09'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioCanLookTheirTransactionsRecursively stamp: 'DA 5/17/2023 18:41:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'DA 5/17/2023 18:41:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'DA 5/17/2023 18:41:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'DA 5/17/2023 18:41:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'DA 5/17/2023 18:41:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'DA 5/17/2023 18:41:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'DA 5/17/2023 18:41:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'DA 5/17/2023 18:41:10'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'DA 5/17/2023 18:44:27'!
test09PortfolioCanAddSameAccountTwice
	|account portfolio|
	portfolio := Portfolio new.
	
	account := ReceptiveAccount new.
	portfolio vinculateAccount: account.
	
	self 
	should: [ portfolio vinculateAccount: account ]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError |
		self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
		self assert: 1 equals: portfolio accountsSize.
		self assert: (portfolio hasRegistered: account) ]! !

!testRun: #PortfolioTest #test09PortfolioCanAddSameAccountTwice stamp: 'DA 5/17/2023 18:44:31'!
FAILURE!
!Portfolio methodsFor: 'nil' stamp: 'DA 5/17/2023 18:44:50'!
accountsSize
	^ accounts size! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'DA 5/17/2023 18:44:51'!
PASSED!

!testRun: #PortfolioTest #test02AddingOneAccountTakeTheirBalance stamp: 'DA 5/17/2023 18:44:52'!
PASSED!

!testRun: #PortfolioTest #test03AddingMoreThanOneAccountTakeSumOfTheirBalance stamp: 'DA 5/17/2023 18:44:52'!
PASSED!

!testRun: #PortfolioTest #test04AddingEmptyPortfolioHaveBalanceCero stamp: 'DA 5/17/2023 18:44:52'!
PASSED!

!testRun: #PortfolioTest #test05AddingPortfolioWithAccountHaveBalanceOfThatAccount stamp: 'DA 5/17/2023 18:44:52'!
PASSED!

!testRun: #PortfolioTest #test06EmptyPortfolioHaveNotTransactions stamp: 'DA 5/17/2023 18:44:52'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasRegisteredTheirAccountTransactions stamp: 'DA 5/17/2023 18:44:52'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioCanLookTheirTransactionsRecursively stamp: 'DA 5/17/2023 18:44:52'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCanAddSameAccountTwice stamp: 'DA 5/17/2023 18:44:52'!
FAILURE!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'DA 5/17/2023 18:44:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'DA 5/17/2023 18:44:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'DA 5/17/2023 18:44:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'DA 5/17/2023 18:44:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'DA 5/17/2023 18:44:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'DA 5/17/2023 18:44:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'DA 5/17/2023 18:44:52'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCanAddSameAccountTwice stamp: 'DA 5/17/2023 18:44:52'!
FAILURE!
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'DA 5/17/2023 18:45:15'!
canNotAddAccountErrorMessage
 	^ 'Esa cuenta ya fue agregada en el portfolio'! !

!methodRemoval: Portfolio class #AlreadyHaveThatAccountErrorDescription stamp: 'DA 5/17/2023 18:45:19'!
AlreadyHaveThatAccountErrorDescription
 	^ 'Esa cuenta ya fue agregada en el portfolio'!

!testRun: #PortfolioTest #test09PortfolioCanAddSameAccountTwice stamp: 'DA 5/17/2023 18:45:30'!
FAILURE!
!Portfolio methodsFor: 'vinculate' stamp: 'DA 5/17/2023 18:47:44' prior: 50620165!
vinculateAccount: account 
	(accounts includes: account) ifTrue: [self error: self class canNotAddAccountErrorMessage].
	accounts add: account.
	
	! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'DA 5/17/2023 18:47:45'!
PASSED!

!testRun: #PortfolioTest #test02AddingOneAccountTakeTheirBalance stamp: 'DA 5/17/2023 18:47:45'!
PASSED!

!testRun: #PortfolioTest #test03AddingMoreThanOneAccountTakeSumOfTheirBalance stamp: 'DA 5/17/2023 18:47:45'!
PASSED!

!testRun: #PortfolioTest #test04AddingEmptyPortfolioHaveBalanceCero stamp: 'DA 5/17/2023 18:47:45'!
PASSED!

!testRun: #PortfolioTest #test05AddingPortfolioWithAccountHaveBalanceOfThatAccount stamp: 'DA 5/17/2023 18:47:45'!
PASSED!

!testRun: #PortfolioTest #test06EmptyPortfolioHaveNotTransactions stamp: 'DA 5/17/2023 18:47:45'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasRegisteredTheirAccountTransactions stamp: 'DA 5/17/2023 18:47:45'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioCanLookTheirTransactionsRecursively stamp: 'DA 5/17/2023 18:47:45'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCanAddSameAccountTwice stamp: 'DA 5/17/2023 18:47:45'!
FAILURE!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'DA 5/17/2023 18:47:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'DA 5/17/2023 18:47:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'DA 5/17/2023 18:47:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'DA 5/17/2023 18:47:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'DA 5/17/2023 18:47:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'DA 5/17/2023 18:47:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'DA 5/17/2023 18:47:45'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCanAddSameAccountTwice stamp: 'DA 5/17/2023 18:47:45'!
FAILURE!
!Portfolio methodsFor: 'vinculate' stamp: 'DA 5/17/2023 18:48:16' prior: 50621173!
vinculateAccount: account 
	(accounts includes: account)
	 	ifTrue: [self error: self class canNotAddAccountErrorMessage]
		ifFalse: [accounts add: account].
	
	! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'DA 5/17/2023 18:48:17'!
PASSED!

!testRun: #PortfolioTest #test02AddingOneAccountTakeTheirBalance stamp: 'DA 5/17/2023 18:48:17'!
PASSED!

!testRun: #PortfolioTest #test03AddingMoreThanOneAccountTakeSumOfTheirBalance stamp: 'DA 5/17/2023 18:48:17'!
PASSED!

!testRun: #PortfolioTest #test04AddingEmptyPortfolioHaveBalanceCero stamp: 'DA 5/17/2023 18:48:17'!
PASSED!

!testRun: #PortfolioTest #test05AddingPortfolioWithAccountHaveBalanceOfThatAccount stamp: 'DA 5/17/2023 18:48:17'!
PASSED!

!testRun: #PortfolioTest #test06EmptyPortfolioHaveNotTransactions stamp: 'DA 5/17/2023 18:48:17'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasRegisteredTheirAccountTransactions stamp: 'DA 5/17/2023 18:48:17'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioCanLookTheirTransactionsRecursively stamp: 'DA 5/17/2023 18:48:17'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCanAddSameAccountTwice stamp: 'DA 5/17/2023 18:48:17'!
FAILURE!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'DA 5/17/2023 18:48:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'DA 5/17/2023 18:48:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'DA 5/17/2023 18:48:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'DA 5/17/2023 18:48:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'DA 5/17/2023 18:48:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'DA 5/17/2023 18:48:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'DA 5/17/2023 18:48:17'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCanAddSameAccountTwice stamp: 'DA 5/17/2023 18:48:17'!
FAILURE!
!PortfolioTest methodsFor: 'tests' stamp: 'DA 5/17/2023 18:49:40' prior: 50621071!
test09PortfolioCanAddSameAccountTwice
	|account portfolio|
	portfolio := Portfolio new.
	
	account := ReceptiveAccount new.
	portfolio vinculateAccount: account.
	
	self 
	should: [ portfolio vinculateAccount: account ]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError |
		self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
		self assert: 1 equals: portfolio accountsSize.
		self assert: (portfolio hasRegistered: account)]! !

!testRun: #PortfolioTest #test09PortfolioCanAddSameAccountTwice stamp: 'DA 5/17/2023 18:49:41'!
FAILURE!

!testRun: #PortfolioTest #test09PortfolioCanAddSameAccountTwice stamp: 'DA 5/17/2023 18:50:44'!
FAILURE!
!PortfolioTest methodsFor: 'tests' stamp: 'DA 5/17/2023 18:51:34' prior: 50621312!
test09PortfolioCanAddSameAccountTwice
	|account portfolio|
	portfolio := Portfolio new.
	
	account := ReceptiveAccount new.
	portfolio vinculateAccount: account.
	
	self 
	should: [ portfolio vinculateAccount: account ]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError |
		self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
		self assert: 1 equals: portfolio accountsSize.
		self assert: (portfolio accountsInclude: account)]! !

!testRun: #PortfolioTest #test09PortfolioCanAddSameAccountTwice stamp: 'DA 5/17/2023 18:51:36'!
ERROR!
!Portfolio methodsFor: 'category-name' stamp: 'DA 5/17/2023 18:51:42'!
accountsInclude: account 
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'category-name' stamp: 'DA 5/17/2023 18:51:54' prior: 50621358!
accountsInclude: account 
	^account includes: account ! !

!testRun: #PortfolioTest #test09PortfolioCanAddSameAccountTwice stamp: 'DA 5/17/2023 18:51:57'!
ERROR!
!Portfolio methodsFor: 'category-name' stamp: 'DA 5/17/2023 18:52:14' prior: 50621363!
accountsInclude: account 
	^accounts includes: account ! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'DA 5/17/2023 18:52:15'!
PASSED!

!testRun: #PortfolioTest #test02AddingOneAccountTakeTheirBalance stamp: 'DA 5/17/2023 18:52:15'!
PASSED!

!testRun: #PortfolioTest #test03AddingMoreThanOneAccountTakeSumOfTheirBalance stamp: 'DA 5/17/2023 18:52:15'!
PASSED!

!testRun: #PortfolioTest #test04AddingEmptyPortfolioHaveBalanceCero stamp: 'DA 5/17/2023 18:52:15'!
PASSED!

!testRun: #PortfolioTest #test05AddingPortfolioWithAccountHaveBalanceOfThatAccount stamp: 'DA 5/17/2023 18:52:15'!
PASSED!

!testRun: #PortfolioTest #test06EmptyPortfolioHaveNotTransactions stamp: 'DA 5/17/2023 18:52:15'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasRegisteredTheirAccountTransactions stamp: 'DA 5/17/2023 18:52:15'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioCanLookTheirTransactionsRecursively stamp: 'DA 5/17/2023 18:52:15'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCanAddSameAccountTwice stamp: 'DA 5/17/2023 18:52:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'DA 5/17/2023 18:52:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'DA 5/17/2023 18:52:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'DA 5/17/2023 18:52:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'DA 5/17/2023 18:52:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'DA 5/17/2023 18:52:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'DA 5/17/2023 18:52:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'DA 5/17/2023 18:52:16'!
PASSED!
!Portfolio methodsFor: 'vinculate' stamp: 'DA 5/17/2023 18:52:43' prior: 50621242!
vinculateAccount: account 
	(self accountsInclude: account)
	 	ifTrue: [self error: self class canNotAddAccountErrorMessage]
		ifFalse: [accounts add: account].
	
	! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'DA 5/17/2023 18:52:44'!
PASSED!

!testRun: #PortfolioTest #test02AddingOneAccountTakeTheirBalance stamp: 'DA 5/17/2023 18:52:44'!
PASSED!

!testRun: #PortfolioTest #test03AddingMoreThanOneAccountTakeSumOfTheirBalance stamp: 'DA 5/17/2023 18:52:44'!
PASSED!

!testRun: #PortfolioTest #test04AddingEmptyPortfolioHaveBalanceCero stamp: 'DA 5/17/2023 18:52:44'!
PASSED!

!testRun: #PortfolioTest #test05AddingPortfolioWithAccountHaveBalanceOfThatAccount stamp: 'DA 5/17/2023 18:52:44'!
PASSED!

!testRun: #PortfolioTest #test06EmptyPortfolioHaveNotTransactions stamp: 'DA 5/17/2023 18:52:44'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasRegisteredTheirAccountTransactions stamp: 'DA 5/17/2023 18:52:44'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioCanLookTheirTransactionsRecursively stamp: 'DA 5/17/2023 18:52:44'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCanAddSameAccountTwice stamp: 'DA 5/17/2023 18:52:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'DA 5/17/2023 18:52:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'DA 5/17/2023 18:52:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'DA 5/17/2023 18:52:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'DA 5/17/2023 18:52:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'DA 5/17/2023 18:52:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'DA 5/17/2023 18:52:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'DA 5/17/2023 18:52:45'!
PASSED!
!Portfolio methodsFor: 'vinculate' stamp: 'DA 5/17/2023 18:54:00' prior: 50621434!
vinculateAccount: account 
	(self accountsInclude: account)
	 	ifTrue: [self error: self class canNotAddAccountErrorMessage]
		ifFalse: [accounts add: account].! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'DA 5/17/2023 18:54:01'!
PASSED!

!testRun: #PortfolioTest #test02AddingOneAccountTakeTheirBalance stamp: 'DA 5/17/2023 18:54:01'!
PASSED!

!testRun: #PortfolioTest #test03AddingMoreThanOneAccountTakeSumOfTheirBalance stamp: 'DA 5/17/2023 18:54:01'!
PASSED!

!testRun: #PortfolioTest #test04AddingEmptyPortfolioHaveBalanceCero stamp: 'DA 5/17/2023 18:54:01'!
PASSED!

!testRun: #PortfolioTest #test05AddingPortfolioWithAccountHaveBalanceOfThatAccount stamp: 'DA 5/17/2023 18:54:01'!
PASSED!

!testRun: #PortfolioTest #test06EmptyPortfolioHaveNotTransactions stamp: 'DA 5/17/2023 18:54:01'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasRegisteredTheirAccountTransactions stamp: 'DA 5/17/2023 18:54:01'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioCanLookTheirTransactionsRecursively stamp: 'DA 5/17/2023 18:54:01'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCanAddSameAccountTwice stamp: 'DA 5/17/2023 18:54:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'DA 5/17/2023 18:54:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'DA 5/17/2023 18:54:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'DA 5/17/2023 18:54:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'DA 5/17/2023 18:54:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'DA 5/17/2023 18:54:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'DA 5/17/2023 18:54:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'DA 5/17/2023 18:54:02'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'DA 5/17/2023 20:38:24'!
test09PortfolioCantAddSameAccountTwice
	|account portfolio|
	portfolio := Portfolio new.
	
	account := ReceptiveAccount new.
	portfolio vinculateAccount: account.
	
	self 
	should: [ portfolio vinculateAccount: account ]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError |
		self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
		self assert: 1 equals: portfolio accountsSize.
		self assert: (portfolio accountsInclude: account)]! !

!methodRemoval: PortfolioTest #test09PortfolioCanAddSameAccountTwice stamp: 'DA 5/17/2023 20:38:24'!
test09PortfolioCanAddSameAccountTwice
	|account portfolio|
	portfolio := Portfolio new.
	
	account := ReceptiveAccount new.
	portfolio vinculateAccount: account.
	
	self 
	should: [ portfolio vinculateAccount: account ]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError |
		self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
		self assert: 1 equals: portfolio accountsSize.
		self assert: (portfolio accountsInclude: account)]!

!testRun: #PortfolioTest #test09PortfolioCantAddSameAccountTwice stamp: 'DA 5/17/2023 20:38:31'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'DA 5/17/2023 20:38:31'!
PASSED!

!testRun: #PortfolioTest #test02AddingOneAccountTakeTheirBalance stamp: 'DA 5/17/2023 20:38:31'!
PASSED!

!testRun: #PortfolioTest #test03AddingMoreThanOneAccountTakeSumOfTheirBalance stamp: 'DA 5/17/2023 20:38:31'!
PASSED!

!testRun: #PortfolioTest #test04AddingEmptyPortfolioHaveBalanceCero stamp: 'DA 5/17/2023 20:38:31'!
PASSED!

!testRun: #PortfolioTest #test05AddingPortfolioWithAccountHaveBalanceOfThatAccount stamp: 'DA 5/17/2023 20:38:31'!
PASSED!

!testRun: #PortfolioTest #test06EmptyPortfolioHaveNotTransactions stamp: 'DA 5/17/2023 20:38:31'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasRegisteredTheirAccountTransactions stamp: 'DA 5/17/2023 20:38:31'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioCanLookTheirTransactionsRecursively stamp: 'DA 5/17/2023 20:38:31'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCantAddSameAccountTwice stamp: 'DA 5/17/2023 20:38:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'DA 5/17/2023 20:38:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'DA 5/17/2023 20:38:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'DA 5/17/2023 20:38:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'DA 5/17/2023 20:38:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'DA 5/17/2023 20:38:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'DA 5/17/2023 20:38:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'DA 5/17/2023 20:38:31'!
PASSED!
!Portfolio class methodsFor: 'instance creation' stamp: 'DA 5/17/2023 20:42:03'!
with: anAccount
	self new add: anAccount! !

!methodRemoval: Portfolio class #with: stamp: 'DA 5/17/2023 20:43:08'!
with: anAccount
	self new add: anAccount!

----SNAPSHOT----(17 May 2023 20:44:01) CuisUniversity-5799.image priorSource: 9222790!

----STARTUP---- (18 May 2023 17:18:38) as D:\windows64\CuisUniversity-5799.image!


----QUIT----(18 May 2023 20:47:47) CuisUniversity-5799.image priorSource: 9280701!

----STARTUP---- (19 May 2023 19:38:33) as D:\windows64\CuisUniversity-5799.image!


Object subclass: #Account
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Account category: 'Portfolio-Ejercicio' stamp: 'DA 5/19/2023 19:44:22'!
Object subclass: #Account
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

Account subclass: #Portfolio
	instanceVariableNames: 'accounts portfolios'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'DA 5/19/2023 19:44:31'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts portfolios'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #ReceptiveAccount category: 'Portfolio-Ejercicio' stamp: 'DA 5/19/2023 19:44:41'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'DA 5/19/2023 20:20:36'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Account methodsFor: 'no messages' stamp: 'DA 5/19/2023 20:21:15'!
balance
	self subclassResponsibility ! !
!Account methodsFor: 'as yet unclassified' stamp: 'DA 5/19/2023 20:21:29'!
hasAccount: aReceptiveAccount
	self subclassResponsibility ! !
!Account methodsFor: 'as yet unclassified' stamp: 'DA 5/19/2023 20:21:50'!
hasRegistered: aAccountTransaction
	self subclassResponsibility ! !
!Account methodsFor: 'as yet unclassified' stamp: 'DA 5/19/2023 20:22:37'!
transaction
	self subclassResponsibility ! !
!Account methodsFor: 'as yet unclassified' stamp: 'DA 5/19/2023 20:23:06'!
transactions
	self subclassResponsibility ! !

!methodRemoval: Account #transaction stamp: 'DA 5/19/2023 20:23:06'!
transaction
	self subclassResponsibility !
!Portfolio methodsFor: 'balance' stamp: 'DA 5/19/2023 20:27:05' prior: 50620154 overrides: 50621732!
balance
	^ accounts inject: 0 into:[:acum :account | acum + account balance]. ! !
!Portfolio methodsFor: 'category-name' stamp: 'DA 5/19/2023 20:27:38' prior: 50620684 overrides: 50621741!
hasRegistered: aTransaction
	^accounts anySatisfy: [ :anAccount | anAccount hasRegistered: aTransaction ].! !
!Portfolio methodsFor: 'initialize' stamp: 'DA 5/19/2023 20:27:52' prior: 50620174 overrides: 16920235!
initialize
	accounts := OrderedCollection new.! !
!Portfolio methodsFor: 'transactions' stamp: 'DA 5/19/2023 20:28:41' prior: 50620179 overrides: 50621750!
transactions
	|transactions|
	transactions := OrderedCollection new.
	accounts do: [:account | transactions add: (account transactions)].
	^transactions 
! !

!methodRemoval: Portfolio #vinculatePortfolio: stamp: 'DA 5/19/2023 20:29:00'!
vinculatePortfolio: portfolio
	portfolios add: portfolio !
!Portfolio methodsFor: 'vinculate' stamp: 'DA 5/19/2023 20:33:31'!
add: anAccount 
	self assertCantAdd: anAccount.
	accounts add: anAccount.
	anAccount registerParent: self. ! !

!methodRemoval: Portfolio #vinculateAccount: stamp: 'DA 5/19/2023 20:33:44'!
vinculateAccount: account 
	(self accountsInclude: account)
	 	ifTrue: [self error: self class canNotAddAccountErrorMessage]
		ifFalse: [accounts add: account].!
!Portfolio methodsFor: 'initialize' stamp: 'DA 5/19/2023 20:34:07' prior: 50621772 overrides: 16920235!
initialize
	accounts := OrderedCollection new.
	parents := OrderedCollection new.! !
!PortfolioTest methodsFor: 'tests' stamp: 'DA 5/19/2023 20:34:59' prior: 50620459!
test02AddingOneAccountTakeTheirBalance
	|porfolio account|
	
	porfolio := Portfolio new.
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	porfolio add: account.
	
	self assert: (account balance) equals: porfolio balance.! !
!PortfolioTest methodsFor: 'tests' stamp: 'DA 5/19/2023 20:35:10' prior: 50620244!
test03AddingMoreThanOneAccountTakeSumOfTheirBalance

	|porfolio account1 account2|
	
	porfolio := Portfolio new.
	
	account1 := ReceptiveAccount new.
	Deposit register: 100 on: account1.
	
	account2 := ReceptiveAccount new.
	Deposit register: 200 on: account2.
	
	porfolio add: account1.
	porfolio add: account2.
	
	
	self assert: (account1 balance + account2 balance) equals: porfolio balance.! !
!PortfolioTest methodsFor: 'tests' stamp: 'DA 5/19/2023 20:35:15' prior: 50619911!
test04AddingEmptyPortfolioHaveBalanceCero

	|portfolio1 portfolio2|
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	
	portfolio1 add: portfolio2.
	
	self assert: 0 equals: portfolio1 balance.! !
!PortfolioTest methodsFor: 'tests' stamp: 'DA 5/19/2023 20:35:23' prior: 50620311!
test05AddingPortfolioWithAccountHaveBalanceOfThatAccount

	|portfolio1 portfolio2 account|
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	account := ReceptiveAccount new.
	Deposit register: 50 on: account.
	
	portfolio2 add: account.
	
	portfolio1 add: portfolio2.
	
	self assert: (account balance) equals: portfolio1 balance.! !
!PortfolioTest methodsFor: 'tests' stamp: 'DA 5/19/2023 20:35:33' prior: 50620534!
test07PortfolioHasRegisteredTheirAccountTransactions
	|portfolio account transaction|
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	transaction := Deposit for: 100.
	
	account register: transaction.
	portfolio add: account.
	
	self assert: (portfolio hasRegistered: transaction). ! !
!PortfolioTest methodsFor: 'tests' stamp: 'DA 5/19/2023 20:35:47' prior: 50620985!
test08PortfolioCanLookTheirTransactionsRecursively
	|portfolio1 portfolio2 simpleAccount portfolioAccount depositTransaction withdrawTransaction|
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	
	simpleAccount := ReceptiveAccount new.
	depositTransaction := Deposit for: 100.
	simpleAccount register: depositTransaction.
	portfolio1 add: simpleAccount.
	
	portfolioAccount := ReceptiveAccount new.
	withdrawTransaction:= Withdraw for: 50.
	portfolioAccount register: withdrawTransaction. 
	
	portfolio2 add: portfolioAccount.
	portfolio1 add: portfolio2.
	
	self assert:2 equals: (portfolio1 transactions size).
	self assert: (portfolio1 hasRegistered: depositTransaction).
	self assert: (portfolio1 hasRegistered: withdrawTransaction). ! !
!PortfolioTest methodsFor: 'tests' stamp: 'DA 5/19/2023 20:35:57' prior: 50621567!
test09PortfolioCantAddSameAccountTwice
	|account portfolio|
	portfolio := Portfolio new.
	
	account := ReceptiveAccount new.
	portfolio add: account.
	
	self 
	should: [ portfolio add: account ]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError |
		self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
		self assert: 1 equals: portfolio accountsSize.
		self assert: (portfolio accountsInclude: account)]! !

!testRun: #PortfolioTest #test09PortfolioCantAddSameAccountTwice stamp: 'DA 5/19/2023 20:35:59'!
ERROR!
!Portfolio methodsFor: 'assertions' stamp: 'DA 5/19/2023 20:36:14'!
assertCantAdd: anAccount 
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'category-name' stamp: 'DA 5/19/2023 20:39:17' overrides: 50621736!
hasAccount: account 
	^accounts includes: account ! !

!methodRemoval: Portfolio #accountsInclude: stamp: 'DA 5/19/2023 20:39:17'!
accountsInclude: account 
	^accounts includes: account !
!ReceptiveAccount methodsFor: 'nil' stamp: 'DA 5/19/2023 20:40:18' overrides: 50621736!
hasAccount: anAccount
	^ false  ! !
!Portfolio methodsFor: 'category-name' stamp: 'DA 5/19/2023 20:41:07' prior: 50621926 overrides: 50621736!
hasAccount: anAccount 
	^accounts includes: anAccount ! !

----End fileIn of D:\windows64\Packages\TerseGuide.pck.st----!
!Portfolio methodsFor: 'assertions' stamp: 'DA 5/19/2023 20:48:34' prior: 50621921!
assertCantAdd: anReceptiveAccount 
	(parents isEmpty) ifTrue: [^ accounts anySatisfy: [ :account | account hasAccount: anReceptiveAccount ].]
				     ifFalse: [parents inject: true into:[:res :parent | res & parent assertCantAdd: anReceptiveAccount]].  ! !

!testRun: #PortfolioTest #test09PortfolioCantAddSameAccountTwice stamp: 'DA 5/19/2023 20:48:45'!
ERROR!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'DA 5/19/2023 20:48:54'!
registerParent: aPortfolio 
	self shouldBeImplemented.! !

!testRun: #PortfolioTest #test09PortfolioCantAddSameAccountTwice stamp: 'DA 5/19/2023 20:49:00'!
ERROR!

Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #ReceptiveAccount category: 'Portfolio-Ejercicio' stamp: 'DA 5/19/2023 20:52:05'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'DA 5/19/2023 20:53:32' prior: 50624877!
registerParent: aParent
! !

Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #ReceptiveAccount category: 'Portfolio-Ejercicio' stamp: 'DA 5/19/2023 20:53:40'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Account methodsFor: 'nil' stamp: 'DA 5/19/2023 20:54:29'!
registerParent: aPortfolio
	self subclassResponsibility ! !
!Portfolio methodsFor: 'nil' stamp: 'DA 5/19/2023 20:55:20' overrides: 50624915!
registerParent: anAccountParent
	parents add: anAccountParent ! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'DA 5/19/2023 20:55:28' prior: 50624920 overrides: 50624915!
registerParent: anAccountParent
	parents add: anAccountParent ! !
!Portfolio methodsFor: 'assertions' stamp: 'DA 5/19/2023 20:57:52'!
cantAdd: anReceptiveAccount 
	(parents isEmpty) ifTrue: [^ accounts anySatisfy: [ :account | account hasAccount: anReceptiveAccount ].]
				     ifFalse: [parents inject: true into:[:res :parent | res & parent assertCantAdd: anReceptiveAccount]].  ! !
!Portfolio methodsFor: 'adding' stamp: 'DA 5/19/2023 21:01:26' prior: 50621789!
add: anAccount 
	(self cantAdd: anAccount) ifTrue: [^self error: self class CantAddAccountErrorDescription].
	accounts add: anAccount.
	anAccount registerParent: self. ! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'DA 5/19/2023 21:01:33'!
PASSED!

!testRun: #PortfolioTest #test02AddingOneAccountTakeTheirBalance stamp: 'DA 5/19/2023 21:01:33'!
PASSED!

!testRun: #PortfolioTest #test03AddingMoreThanOneAccountTakeSumOfTheirBalance stamp: 'DA 5/19/2023 21:01:33'!
PASSED!

!testRun: #PortfolioTest #test04AddingEmptyPortfolioHaveBalanceCero stamp: 'DA 5/19/2023 21:01:33'!
PASSED!

!testRun: #PortfolioTest #test05AddingPortfolioWithAccountHaveBalanceOfThatAccount stamp: 'DA 5/19/2023 21:01:33'!
PASSED!

!testRun: #PortfolioTest #test06EmptyPortfolioHaveNotTransactions stamp: 'DA 5/19/2023 21:01:33'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasRegisteredTheirAccountTransactions stamp: 'DA 5/19/2023 21:01:33'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioCanLookTheirTransactionsRecursively stamp: 'DA 5/19/2023 21:01:33'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCantAddSameAccountTwice stamp: 'DA 5/19/2023 21:01:33'!
FAILURE!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'DA 5/19/2023 21:01:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'DA 5/19/2023 21:01:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'DA 5/19/2023 21:01:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'DA 5/19/2023 21:01:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'DA 5/19/2023 21:01:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'DA 5/19/2023 21:01:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'DA 5/19/2023 21:01:34'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCantAddSameAccountTwice stamp: 'DA 5/19/2023 21:01:34'!
FAILURE!
!Portfolio class methodsFor: 'error' stamp: 'DA 5/19/2023 21:02:05'!
CantAddAccountErrorDescription
 	^ 'Esa cuenta ya fue agregada en el portfolio'! !

!methodRemoval: Portfolio class #canNotAddAccountErrorMessage stamp: 'DA 5/19/2023 21:02:05'!
canNotAddAccountErrorMessage
 	^ 'Esa cuenta ya fue agregada en el portfolio'!

----SNAPSHOT----(19 May 2023 21:02:16) CuisUniversity-5799.image priorSource: 9280873!

!testRun: #PortfolioTest #test07PortfolioHasRegisteredTheirAccountTransactions stamp: 'DA 5/19/2023 21:02:59'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'DA 5/19/2023 21:02:59'!
PASSED!

!testRun: #PortfolioTest #test02AddingOneAccountTakeTheirBalance stamp: 'DA 5/19/2023 21:02:59'!
PASSED!

!testRun: #PortfolioTest #test03AddingMoreThanOneAccountTakeSumOfTheirBalance stamp: 'DA 5/19/2023 21:02:59'!
PASSED!

!testRun: #PortfolioTest #test04AddingEmptyPortfolioHaveBalanceCero stamp: 'DA 5/19/2023 21:02:59'!
PASSED!

!testRun: #PortfolioTest #test05AddingPortfolioWithAccountHaveBalanceOfThatAccount stamp: 'DA 5/19/2023 21:02:59'!
PASSED!

!testRun: #PortfolioTest #test06EmptyPortfolioHaveNotTransactions stamp: 'DA 5/19/2023 21:02:59'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasRegisteredTheirAccountTransactions stamp: 'DA 5/19/2023 21:02:59'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioCanLookTheirTransactionsRecursively stamp: 'DA 5/19/2023 21:02:59'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCantAddSameAccountTwice stamp: 'DA 5/19/2023 21:02:59'!
FAILURE!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'DA 5/19/2023 21:02:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'DA 5/19/2023 21:02:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'DA 5/19/2023 21:02:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'DA 5/19/2023 21:02:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'DA 5/19/2023 21:02:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'DA 5/19/2023 21:02:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'DA 5/19/2023 21:02:59'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCantAddSameAccountTwice stamp: 'DA 5/19/2023 21:02:59'!
FAILURE!
!PortfolioTest methodsFor: 'tests' stamp: 'DA 5/19/2023 21:03:36' prior: 50621901!
test09PortfolioCantAddSameAccountTwice
	|account portfolio|
	portfolio := Portfolio new.
	
	account := ReceptiveAccount new.
	portfolio add: account.
	
	self 
	should: [ portfolio add: account ]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError |
		self assert: Portfolio CantAddAccountErrorDescription equals: anError messageText.
		self assert: 1 equals: portfolio accountsSize.
		self assert: (portfolio hasAccount: account)]! !

!testRun: #PortfolioTest #test09PortfolioCantAddSameAccountTwice stamp: 'DA 5/19/2023 21:03:37'!
FAILURE!

!testRun: #PortfolioTest #test09PortfolioCantAddSameAccountTwice stamp: 'DA 5/19/2023 21:08:48'!
FAILURE!

!testRun: #PortfolioTest #test09PortfolioCantAddSameAccountTwice stamp: 'DA 5/19/2023 21:10:20'!
FAILURE!
!PortfolioTest methodsFor: 'tests' stamp: 'DA 5/19/2023 21:11:17' prior: 50625091!
test09PortfolioCantAddSameAccountTwice
	|account portfolio|
	portfolio := Portfolio new.
	
	account := ReceptiveAccount new.
	portfolio add: account.
	
	self 
	should: [ portfolio add: account ]
	raise: Error
	withExceptionDo: [ :anError |
		self assert: Portfolio CantAddAccountErrorDescription equals: anError messageText.
		self assert: 1 equals: portfolio accountsSize.
		self assert: (portfolio hasAccount: account)]! !

!testRun: #PortfolioTest #test09PortfolioCantAddSameAccountTwice stamp: 'DA 5/19/2023 21:11:19'!
FAILURE!

!testRun: #PortfolioTest #test09PortfolioCantAddSameAccountTwice stamp: 'DA 5/19/2023 21:11:24'!
FAILURE!

!testRun: #PortfolioTest #test09PortfolioCantAddSameAccountTwice stamp: 'DA 5/19/2023 21:11:52'!
FAILURE!

!testRun: #PortfolioTest #test09PortfolioCantAddSameAccountTwice stamp: 'DA 5/19/2023 21:12:23'!
FAILURE!

----SNAPSHOT----(19 May 2023 21:15:23) CuisUniversity-5799.image priorSource: 9387904!

----STARTUP---- (21 May 2023 16:26:47) as D:\windows64\CuisUniversity-5799.image!


!classRemoval: #Withdraw stamp: 'DA 5/21/2023 16:27:11'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Deposit stamp: 'DA 5/21/2023 16:27:12'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #AccountTransaction stamp: 'DA 5/21/2023 16:27:12'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #ReceptiveAccount stamp: 'DA 5/21/2023 16:27:12'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Portfolio stamp: 'DA 5/21/2023 16:27:12'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Account stamp: 'DA 5/21/2023 16:27:13'!
Object subclass: #Account
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #ReceptiveAccountTest stamp: 'DA 5/21/2023 16:27:13'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #PortfolioTest stamp: 'DA 5/21/2023 16:27:14'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

----End fileIn of C:\Users\daiana\Downloads\Telegram Desktop\Portfolio-Ejercicio.st----!

!classRemoval: #Withdraw stamp: 'DA 5/21/2023 16:29:27'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Deposit stamp: 'DA 5/21/2023 16:29:27'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #AccountTransaction stamp: 'DA 5/21/2023 16:29:27'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #ReceptiveAccount stamp: 'DA 5/21/2023 16:29:27'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Portfolio stamp: 'DA 5/21/2023 16:29:28'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Account stamp: 'DA 5/21/2023 16:29:28'!
Object subclass: #Account
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #ReceptiveAccountTest stamp: 'DA 5/21/2023 16:29:28'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #PortfolioTest stamp: 'DA 5/21/2023 16:29:29'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

----End fileIn of C:\Users\daiana\Downloads\Telegram Desktop\Portfolio-Ejercicio.st----!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'DA 5/21/2023 16:32:04' prior: 50626152 overrides: 50625994!
hasAccount: anAccount
	" este es nuestro caso base.
	recorriendo el arbol de portfolios, si llegamos a una cuenta debemos verificar si la cuenta (self) es anAccount. 
	Si es es anAccount entonces la cuenta se encuentra en el arbol de portfolios por lo que debe devolver false. 
	Sin embargo si no es anAccount quiere decir que en esta rama, desde la raiz, no se encuentra. 
	"
	^  (self isKindOf: anAccount) and: (self transactions = anAccount transactions ) .! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'DA 5/21/2023 16:32:06'!
PASSED!

!testRun: #PortfolioTest #test02AddingOneAccountTakeTheirBalance stamp: 'DA 5/21/2023 16:32:06'!
PASSED!

!testRun: #PortfolioTest #test03AddingMoreThanOneAccountTakeSumOfTheirBalance stamp: 'DA 5/21/2023 16:32:07'!
PASSED!

!testRun: #PortfolioTest #test04AddingEmptyPortfolioHaveBalanceCero stamp: 'DA 5/21/2023 16:32:07'!
PASSED!

!testRun: #PortfolioTest #test05AddingPortfolioWithAccountHaveBalanceOfThatAccount stamp: 'DA 5/21/2023 16:32:07'!
PASSED!

!testRun: #PortfolioTest #test06EmptyPortfolioHaveNotTransactions stamp: 'DA 5/21/2023 16:32:07'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasRegisteredTheirAccountTransactions stamp: 'DA 5/21/2023 16:32:07'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioCanLookTheirTransactionsRecursively stamp: 'DA 5/21/2023 16:32:07'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCantAddSameAccountTwice stamp: 'DA 5/21/2023 16:32:07'!
FAILURE!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'DA 5/21/2023 16:32:07'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'DA 5/21/2023 16:32:07'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'DA 5/21/2023 16:32:07'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'DA 5/21/2023 16:32:07'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'DA 5/21/2023 16:32:07'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'DA 5/21/2023 16:32:07'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'DA 5/21/2023 16:32:07'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCantAddSameAccountTwice stamp: 'DA 5/21/2023 16:32:07'!
FAILURE!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'DA 5/21/2023 16:33:17'!
PASSED!

!testRun: #PortfolioTest #test02AddingOneAccountTakeTheirBalance stamp: 'DA 5/21/2023 16:33:17'!
PASSED!

!testRun: #PortfolioTest #test03AddingMoreThanOneAccountTakeSumOfTheirBalance stamp: 'DA 5/21/2023 16:33:17'!
PASSED!

!testRun: #PortfolioTest #test04AddingEmptyPortfolioHaveBalanceCero stamp: 'DA 5/21/2023 16:33:17'!
PASSED!

!testRun: #PortfolioTest #test05AddingPortfolioWithAccountHaveBalanceOfThatAccount stamp: 'DA 5/21/2023 16:33:17'!
PASSED!

!testRun: #PortfolioTest #test06EmptyPortfolioHaveNotTransactions stamp: 'DA 5/21/2023 16:33:17'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasRegisteredTheirAccountTransactions stamp: 'DA 5/21/2023 16:33:18'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioCanLookTheirTransactionsRecursively stamp: 'DA 5/21/2023 16:33:18'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCantAddSameAccountTwice stamp: 'DA 5/21/2023 16:33:18'!
FAILURE!

!testRun: #PortfolioTest #test09PortfolioCantAddSameAccountTwice stamp: 'DA 5/21/2023 16:33:18'!
FAILURE!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'DA 5/21/2023 16:33:47' prior: 50626294 overrides: 50625994!
hasAccount: anAccount
	" este es nuestro caso base.
	recorriendo el arbol de portfolios, si llegamos a una cuenta debemos verificar si la cuenta (self) es anAccount. 
	Si es es anAccount entonces la cuenta se encuentra en el arbol de portfolios por lo que debe devolver false. 
	Sin embargo si no es anAccount quiere decir que en esta rama, desde la raiz, no se encuentra. 
	"
	"^  (self isKindOf: anAccount) and: (self transactions = anAccount transactions ) ."
	^(self transactions = anAccount transactions )! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'DA 5/21/2023 16:33:48'!
PASSED!

!testRun: #PortfolioTest #test02AddingOneAccountTakeTheirBalance stamp: 'DA 5/21/2023 16:33:48'!
PASSED!

!testRun: #PortfolioTest #test03AddingMoreThanOneAccountTakeSumOfTheirBalance stamp: 'DA 5/21/2023 16:33:48'!
PASSED!

!testRun: #PortfolioTest #test04AddingEmptyPortfolioHaveBalanceCero stamp: 'DA 5/21/2023 16:33:48'!
PASSED!

!testRun: #PortfolioTest #test05AddingPortfolioWithAccountHaveBalanceOfThatAccount stamp: 'DA 5/21/2023 16:33:49'!
PASSED!

!testRun: #PortfolioTest #test06EmptyPortfolioHaveNotTransactions stamp: 'DA 5/21/2023 16:33:49'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasRegisteredTheirAccountTransactions stamp: 'DA 5/21/2023 16:33:49'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioCanLookTheirTransactionsRecursively stamp: 'DA 5/21/2023 16:33:49'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCantAddSameAccountTwice stamp: 'DA 5/21/2023 16:33:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'DA 5/21/2023 16:33:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'DA 5/21/2023 16:33:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'DA 5/21/2023 16:33:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'DA 5/21/2023 16:33:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'DA 5/21/2023 16:33:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'DA 5/21/2023 16:33:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'DA 5/21/2023 16:33:49'!
PASSED!
!Portfolio methodsFor: 'assertions' stamp: 'DA 5/21/2023 16:42:17' prior: 50626086!
cantAdd: anAccount 
	(parents isEmpty) ifTrue: [^ accounts anySatisfy: [ :account | account hasAccount: anAccount ].]
				     ifFalse: [parents inject: true into:[:res :parent | res & parent assertCantAdd: anAccount]].  ! !
!Portfolio methodsFor: 'assertions' stamp: 'DA 5/21/2023 16:42:22' prior: 50626487!
cantAdd: anAccount 
	(parents isEmpty) ifTrue: [^ accounts anySatisfy: [ :account | account hasAccount: anAccount ].]
				     ifFalse: [parents inject: true into:[:res :parent | res & parent assertCantAdd: anAccount]].  ! !
!Portfolio methodsFor: 'assertions' stamp: 'DA 5/21/2023 16:42:38' prior: 50626497!
cantAdd: anAccount 
	(parents isEmpty) ifTrue: [^ accounts anySatisfy: [ :account | account hasAccount: anAccount ].]
				     ifFalse: [parents inject: true into:[:res :parent | res & parent cantAdd: anAccount]].  ! !

!methodRemoval: Portfolio #assertCantAdd: stamp: 'DA 5/21/2023 16:42:42'!
assertCantAdd: anReceptiveAccount 
	(parents isEmpty) ifTrue: [^ accounts anySatisfy: [ :account | account hasAccount: anReceptiveAccount ].]
				     ifFalse: [parents inject: true into:[:res :parent | res & parent assertCantAdd: anReceptiveAccount]].  !
!PortfolioTest methodsFor: 'tests' stamp: 'DA 5/21/2023 16:49:21'!
test09PortfolioCantAddAccountIfWasAddedBefore
	|account portfolio |
	portfolio := Portfolio new.
	
	account := ReceptiveAccount new.
	portfolio add: account.
	
	"temp := portfolio add: account."
	
	self 
	should: [ portfolio add: account ]
	raise: Error
	withExceptionDo: [ :anError |
		self assert: Portfolio CantAddAccountErrorDescription equals: anError messageText.
		self assert: 1 equals: portfolio accountsSize.
		self assert: (portfolio hasAccount: account)]! !

!methodRemoval: PortfolioTest #test09PortfolioCantAddSameAccountTwice stamp: 'DA 5/21/2023 16:49:21'!
test09PortfolioCantAddSameAccountTwice
	|account portfolio |
	portfolio := Portfolio new.
	
	account := ReceptiveAccount new.
	portfolio add: account.
	
	"temp := portfolio add: account."
	
	self 
	should: [ portfolio add: account ]
	raise: Error
	withExceptionDo: [ :anError |
		self assert: Portfolio CantAddAccountErrorDescription equals: anError messageText.
		self assert: 1 equals: portfolio accountsSize.
		self assert: (portfolio hasAccount: account)]!
!PortfolioTest methodsFor: 'tests' stamp: 'DA 5/21/2023 16:50:11'!
test06PortfolioWithoutAccoundHasNoRegisteredTransactions
	self deny: (Portfolio new hasRegistered: (Deposit for: 100))! !

!methodRemoval: PortfolioTest #test06EmptyPortfolioHaveNotTransactions stamp: 'DA 5/21/2023 16:50:11'!
test06EmptyPortfolioHaveNotTransactions
	self deny: (Portfolio new hasRegistered: (Deposit for: 100))!
!PortfolioTest methodsFor: 'tests' stamp: 'DA 5/21/2023 16:50:21'!
test06PortfolioWithoutAccountsHasNoRegisteredTransactions
	self deny: (Portfolio new hasRegistered: (Deposit for: 100))! !

!methodRemoval: PortfolioTest #test06PortfolioWithoutAccoundHasNoRegisteredTransactions stamp: 'DA 5/21/2023 16:50:21'!
test06PortfolioWithoutAccoundHasNoRegisteredTransactions
	self deny: (Portfolio new hasRegistered: (Deposit for: 100))!
!PortfolioTest methodsFor: 'tests' stamp: 'DA 5/21/2023 17:02:39'!
test10PortfolioCantAddPorfolioIfSharesSomeAccount
	|account portfolio1 portfolio2|
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	
	account := ReceptiveAccount new.
	portfolio1 add: account.
	portfolio2 add: account.
	
	"temp := portfolio add: account."
	
	self 
	should: [ portfolio1 add: portfolio2]
	raise: Error
	withExceptionDo: [ :anError |
		self assert: Portfolio cantAddErrorDescription equals: anError messageText.
		self assert: 1 equals: portfolio1 accountsSize.
		self assert: (portfolio1 hasAccount: account)]! !
!Portfolio class methodsFor: 'error' stamp: 'DA 5/21/2023 17:02:57'!
cantAddErrorDescription
 	^ 'Esa cuenta ya fue agregada en el portfolio'! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'DA 5/21/2023 17:02:57' prior: 50626031!
add: anAccount 
	(self cantAdd: anAccount) ifTrue: [^self error: self class cantAddErrorDescription].
	accounts add: anAccount.
	anAccount registerParent: self. ! !

!methodRemoval: Portfolio class #CantAddAccountErrorDescription stamp: 'DA 5/21/2023 17:02:57'!
CantAddAccountErrorDescription
 	^ 'Esa cuenta ya fue agregada en el portfolio'!
!Portfolio class methodsFor: 'error' stamp: 'DA 5/21/2023 17:03:28' prior: 50626609!
cantAddErrorDescription
 	^ 'Error al agregar la cuenta al portfolio: ya incluye alguna de sus cuentas'! !
!PortfolioTest methodsFor: 'tests' stamp: 'DA 5/21/2023 17:03:46' prior: 50626589!
test10PortfolioCantAddPorfolioIfSharesSomeAccount
	|account portfolio1 portfolio2|
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	
	account := ReceptiveAccount new.
	portfolio1 add: account.
	portfolio2 add: account.
	
	self 
	should: [ portfolio1 add: portfolio2]
	raise: Error
	withExceptionDo: [ :anError |
		self assert: Portfolio cantAddErrorDescription equals: anError messageText.
		self assert: 1 equals: portfolio1 accountsSize.
		self assert: (portfolio1 hasAccount: account)]! !

!testRun: #PortfolioTest #test10PortfolioCantAddPorfolioIfSharesSomeAccount stamp: 'DA 5/21/2023 17:03:48'!
FAILURE!

----QUIT----(21 May 2023 17:04:03) CuisUniversity-5799.image priorSource: 9391892!

----STARTUP---- (21 May 2023 17:04:23) as D:\windows64\CuisUniversity-5799.image!


!testRun: #PortfolioTest #test10PortfolioCantAddPorfolioIfSharesSomeAccount stamp: 'DA 5/21/2023 17:04:42'!
FAILURE!
!PortfolioTest methodsFor: 'tests' stamp: 'DA 5/21/2023 17:08:11' prior: 50626635!
test10PortfolioCantAddPorfolioIfSharesSomeAccount
	|account account2 portfolio1 portfolio2 portfolio3|
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3:= Portfolio new.
	
	account := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	portfolio1 add: account.
	portfolio2 add: account.
	portfolio3 add: portfolio2.
	
	self 
	should: [ portfolio3 add: portfolio1]
	raise: Error
	withExceptionDo: [ :anError |
		self assert: Portfolio cantAddErrorDescription equals: anError messageText.
		self assert: 1 equals: portfolio3 accountsSize.
		self assert: (portfolio3 hasAccount: account)]! !
!PortfolioTest methodsFor: 'tests' stamp: 'DA 5/21/2023 17:08:30' prior: 50626666!
test10PortfolioCantAddPorfolioIfSharesSomeAccount
	|account portfolio1 portfolio2 portfolio3|
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3:= Portfolio new.
	
	account := ReceptiveAccount new.
	portfolio1 add: account.
	portfolio2 add: account.
	portfolio3 add: portfolio2.
	
	self 
	should: [ portfolio3 add: portfolio1]
	raise: Error
	withExceptionDo: [ :anError |
		self assert: Portfolio cantAddErrorDescription equals: anError messageText.
		self assert: 1 equals: portfolio3 accountsSize.
		self assert: (portfolio3 hasAccount: account)]! !
!PortfolioTest methodsFor: 'tests' stamp: 'DA 5/21/2023 17:11:16' prior: 50626688!
test10PortfolioCantAddPorfolioIfSharesSomeAccount
	|account portfolio1 portfolio2 portfolio3|
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3:= Portfolio new.
	
	account := ReceptiveAccount new.
	portfolio1 add: account.
	portfolio2 add: account.
	portfolio3 add: portfolio2.
	
	self 
	should: [ portfolio2 add: portfolio1]
	raise: Error
	withExceptionDo: [ :anError |
		self assert: Portfolio cantAddErrorDescription equals: anError messageText.
		self assert: 1 equals: portfolio2 accountsSize.
		self assert: (portfolio2 hasAccount: account)]! !

!testRun: #PortfolioTest #test10PortfolioCantAddPorfolioIfSharesSomeAccount stamp: 'DA 5/21/2023 17:11:18'!
FAILURE!

!testRun: #PortfolioTest #test10PortfolioCantAddPorfolioIfSharesSomeAccount stamp: 'DA 5/21/2023 17:11:46'!
FAILURE!

!testRun: #PortfolioTest #test10PortfolioCantAddPorfolioIfSharesSomeAccount stamp: 'DA 5/21/2023 17:11:46'!
FAILURE!

!testRun: #PortfolioTest #test10PortfolioCantAddPorfolioIfSharesSomeAccount stamp: 'DA 5/21/2023 17:12:14'!
FAILURE!
!PortfolioTest methodsFor: 'tests' stamp: 'DA 5/21/2023 17:13:18' prior: 50626709!
test10PortfolioCantAddPorfolioIfSharesSomeAccount
	|account portfolio1 portfolio2 portfolio3 temp|
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3:= Portfolio new.
	
	account := ReceptiveAccount new.
	portfolio1 add: account.
	portfolio2 add: account.
	portfolio3 add: portfolio2.
	temp := portfolio2 add:portfolio1.
	
	self 
	should: [ portfolio2 add: portfolio1]
	raise: Error
	withExceptionDo: [ :anError |
		self assert: Portfolio cantAddErrorDescription equals: anError messageText.
		self assert: 1 equals: portfolio2 accountsSize.
		self assert: (portfolio2 hasAccount: account)]! !

!testRun: #PortfolioTest #test10PortfolioCantAddPorfolioIfSharesSomeAccount stamp: 'DA 5/21/2023 17:13:22'!
ERROR!

!testRun: #PortfolioTest #test10PortfolioCantAddPorfolioIfSharesSomeAccount stamp: 'DA 5/21/2023 17:15:05'!
ERROR!
!Portfolio methodsFor: 'assertions' stamp: 'DA 5/21/2023 17:15:45' prior: 50626507!
cantAdd: anAccount 
	(parents isEmpty) ifTrue: [^ accounts anySatisfy: [ :account | account hasAccount: anAccount ].]
				     ifFalse: [parents inject: true into:[:res :aParent | res & aParent cantAdd: anAccount]].  ! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'DA 5/21/2023 17:15:47'!
PASSED!

!testRun: #PortfolioTest #test02AddingOneAccountTakeTheirBalance stamp: 'DA 5/21/2023 17:15:47'!
PASSED!

!testRun: #PortfolioTest #test03AddingMoreThanOneAccountTakeSumOfTheirBalance stamp: 'DA 5/21/2023 17:15:47'!
PASSED!

!testRun: #PortfolioTest #test04AddingEmptyPortfolioHaveBalanceCero stamp: 'DA 5/21/2023 17:15:47'!
PASSED!

!testRun: #PortfolioTest #test05AddingPortfolioWithAccountHaveBalanceOfThatAccount stamp: 'DA 5/21/2023 17:15:47'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithoutAccountsHasNoRegisteredTransactions stamp: 'DA 5/21/2023 17:15:47'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasRegisteredTheirAccountTransactions stamp: 'DA 5/21/2023 17:15:47'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioCanLookTheirTransactionsRecursively stamp: 'DA 5/21/2023 17:15:47'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCantAddAccountIfWasAddedBefore stamp: 'DA 5/21/2023 17:15:47'!
ERROR!

!testRun: #PortfolioTest #test10PortfolioCantAddPorfolioIfSharesSomeAccount stamp: 'DA 5/21/2023 17:15:47'!
ERROR!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'DA 5/21/2023 17:15:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'DA 5/21/2023 17:15:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'DA 5/21/2023 17:15:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'DA 5/21/2023 17:15:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'DA 5/21/2023 17:15:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'DA 5/21/2023 17:15:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'DA 5/21/2023 17:15:48'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'DA 5/21/2023 17:16:07' prior: 50626527!
test09PortfolioCantAddAccountIfWasAddedBefore
	|account portfolio |
	portfolio := Portfolio new.
	
	account := ReceptiveAccount new.
	portfolio add: account.
	
	"temp := portfolio add: account."
	
	self 
	should: [ portfolio add: account ]
	raise: Error
	withExceptionDo: [ :anError |
		self assert: Portfolio cantAddErrorDescription equals: anError messageText.
		self assert: 1 equals: portfolio accountsSize.
		self assert: (portfolio hasAccount: account)]! !

!testRun: #PortfolioTest #test09PortfolioCantAddAccountIfWasAddedBefore stamp: 'DA 5/21/2023 17:16:09'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'DA 5/21/2023 17:16:09'!
PASSED!

!testRun: #PortfolioTest #test02AddingOneAccountTakeTheirBalance stamp: 'DA 5/21/2023 17:16:09'!
PASSED!

!testRun: #PortfolioTest #test03AddingMoreThanOneAccountTakeSumOfTheirBalance stamp: 'DA 5/21/2023 17:16:09'!
PASSED!

!testRun: #PortfolioTest #test04AddingEmptyPortfolioHaveBalanceCero stamp: 'DA 5/21/2023 17:16:09'!
PASSED!

!testRun: #PortfolioTest #test05AddingPortfolioWithAccountHaveBalanceOfThatAccount stamp: 'DA 5/21/2023 17:16:09'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithoutAccountsHasNoRegisteredTransactions stamp: 'DA 5/21/2023 17:16:09'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasRegisteredTheirAccountTransactions stamp: 'DA 5/21/2023 17:16:09'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioCanLookTheirTransactionsRecursively stamp: 'DA 5/21/2023 17:16:09'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCantAddAccountIfWasAddedBefore stamp: 'DA 5/21/2023 17:16:09'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCantAddPorfolioIfSharesSomeAccount stamp: 'DA 5/21/2023 17:16:09'!
ERROR!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'DA 5/21/2023 17:16:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'DA 5/21/2023 17:16:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'DA 5/21/2023 17:16:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'DA 5/21/2023 17:16:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'DA 5/21/2023 17:16:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'DA 5/21/2023 17:16:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'DA 5/21/2023 17:16:10'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCantAddPorfolioIfSharesSomeAccount stamp: 'DA 5/21/2023 17:16:10'!
ERROR!

!testRun: #PortfolioTest #test10PortfolioCantAddPorfolioIfSharesSomeAccount stamp: 'DA 5/21/2023 17:18:22'!
ERROR!
!Portfolio methodsFor: 'assertions' stamp: 'DA 5/21/2023 17:19:06' prior: 50626775!
cantAdd: anAccount 
	(parents isEmpty) ifTrue: [^ accounts anySatisfy: [ :account | account hasAccount: anAccount ].]
				     ifFalse: [^parents inject: true into:[:res :aParent | res & aParent cantAdd: anAccount]].  ! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'DA 5/21/2023 17:19:08'!
PASSED!

!testRun: #PortfolioTest #test02AddingOneAccountTakeTheirBalance stamp: 'DA 5/21/2023 17:19:08'!
PASSED!

!testRun: #PortfolioTest #test03AddingMoreThanOneAccountTakeSumOfTheirBalance stamp: 'DA 5/21/2023 17:19:08'!
PASSED!

!testRun: #PortfolioTest #test04AddingEmptyPortfolioHaveBalanceCero stamp: 'DA 5/21/2023 17:19:08'!
PASSED!

!testRun: #PortfolioTest #test05AddingPortfolioWithAccountHaveBalanceOfThatAccount stamp: 'DA 5/21/2023 17:19:08'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithoutAccountsHasNoRegisteredTransactions stamp: 'DA 5/21/2023 17:19:08'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasRegisteredTheirAccountTransactions stamp: 'DA 5/21/2023 17:19:08'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioCanLookTheirTransactionsRecursively stamp: 'DA 5/21/2023 17:19:08'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCantAddAccountIfWasAddedBefore stamp: 'DA 5/21/2023 17:19:08'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCantAddPorfolioIfSharesSomeAccount stamp: 'DA 5/21/2023 17:19:08'!
FAILURE!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'DA 5/21/2023 17:19:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'DA 5/21/2023 17:19:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'DA 5/21/2023 17:19:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'DA 5/21/2023 17:19:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'DA 5/21/2023 17:19:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'DA 5/21/2023 17:19:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'DA 5/21/2023 17:19:08'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCantAddPorfolioIfSharesSomeAccount stamp: 'DA 5/21/2023 17:19:08'!
FAILURE!
!PortfolioTest methodsFor: 'tests' stamp: 'DA 5/21/2023 17:20:02' prior: 50626745!
test10PortfolioCantAddPorfolioIfSharesSomeAccount
	|account portfolio1 portfolio2 portfolio3 temp|
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3:= Portfolio new.
	
	account := ReceptiveAccount new.
	portfolio1 add: account.
	portfolio2 add: account.
	portfolio3 add: portfolio2.
	temp := portfolio2 add: portfolio1.
	
	self 
	should: [ portfolio2 add: portfolio1]
	raise: Error
	withExceptionDo: [ :anError |
		self assert: Portfolio cantAddErrorDescription equals: anError messageText.
		"self assert: 1 equals: portfolio2 accountsSize."
		self assert: (portfolio2 hasAccount: account)]! !

!testRun: #PortfolioTest #test10PortfolioCantAddPorfolioIfSharesSomeAccount stamp: 'DA 5/21/2023 17:20:05'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'DA 5/21/2023 17:20:05'!
PASSED!

!testRun: #PortfolioTest #test02AddingOneAccountTakeTheirBalance stamp: 'DA 5/21/2023 17:20:05'!
PASSED!

!testRun: #PortfolioTest #test03AddingMoreThanOneAccountTakeSumOfTheirBalance stamp: 'DA 5/21/2023 17:20:06'!
PASSED!

!testRun: #PortfolioTest #test04AddingEmptyPortfolioHaveBalanceCero stamp: 'DA 5/21/2023 17:20:06'!
PASSED!

!testRun: #PortfolioTest #test05AddingPortfolioWithAccountHaveBalanceOfThatAccount stamp: 'DA 5/21/2023 17:20:06'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithoutAccountsHasNoRegisteredTransactions stamp: 'DA 5/21/2023 17:20:06'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasRegisteredTheirAccountTransactions stamp: 'DA 5/21/2023 17:20:06'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioCanLookTheirTransactionsRecursively stamp: 'DA 5/21/2023 17:20:06'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCantAddAccountIfWasAddedBefore stamp: 'DA 5/21/2023 17:20:06'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCantAddPorfolioIfSharesSomeAccount stamp: 'DA 5/21/2023 17:20:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'DA 5/21/2023 17:20:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'DA 5/21/2023 17:20:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'DA 5/21/2023 17:20:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'DA 5/21/2023 17:20:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'DA 5/21/2023 17:20:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'DA 5/21/2023 17:20:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'DA 5/21/2023 17:20:06'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'DA 5/21/2023 17:20:41' prior: 50627015!
test10PortfolioCantAddPorfolioIfSharesSomeAccount
	|account portfolio1 portfolio2 portfolio3 temp|
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3:= Portfolio new.
	
	account := ReceptiveAccount new.
	portfolio1 add: account.
	portfolio2 add: account.
	portfolio3 add: portfolio2.
	temp := portfolio2 add: portfolio1.
	
	self 
	should: [ portfolio2 add: portfolio1]
	raise: Error
	withExceptionDo: [ :anError |
		self assert: Portfolio cantAddErrorDescription equals: anError messageText.
		"self assert: 1 equals: portfolio2 accountsSize."
		self deny: (portfolio2 hasAccount: portfolio1).
		self assert: (portfolio2 hasAccount: account)]! !

!testRun: #PortfolioTest #test10PortfolioCantAddPorfolioIfSharesSomeAccount stamp: 'DA 5/21/2023 17:20:48'!
FAILURE!
!Portfolio methodsFor: 'assertions' stamp: 'DA 5/21/2023 17:27:04' prior: 50626939!
cantAdd: anAccount 
	(parents isEmpty) ifTrue: [^ accounts anySatisfy: [ :account | account hasAccount: anAccount ].]
				     ifFalse: [parents inject: true into:[:res :aParent | res & aParent cantAdd: anAccount]].  ! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'DA 5/21/2023 17:27:06'!
PASSED!

!testRun: #PortfolioTest #test02AddingOneAccountTakeTheirBalance stamp: 'DA 5/21/2023 17:27:06'!
PASSED!

!testRun: #PortfolioTest #test03AddingMoreThanOneAccountTakeSumOfTheirBalance stamp: 'DA 5/21/2023 17:27:06'!
PASSED!

!testRun: #PortfolioTest #test04AddingEmptyPortfolioHaveBalanceCero stamp: 'DA 5/21/2023 17:27:06'!
PASSED!

!testRun: #PortfolioTest #test05AddingPortfolioWithAccountHaveBalanceOfThatAccount stamp: 'DA 5/21/2023 17:27:06'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithoutAccountsHasNoRegisteredTransactions stamp: 'DA 5/21/2023 17:27:06'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasRegisteredTheirAccountTransactions stamp: 'DA 5/21/2023 17:27:06'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioCanLookTheirTransactionsRecursively stamp: 'DA 5/21/2023 17:27:06'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCantAddAccountIfWasAddedBefore stamp: 'DA 5/21/2023 17:27:06'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCantAddPorfolioIfSharesSomeAccount stamp: 'DA 5/21/2023 17:27:06'!
ERROR!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'DA 5/21/2023 17:27:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'DA 5/21/2023 17:27:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'DA 5/21/2023 17:27:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'DA 5/21/2023 17:27:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'DA 5/21/2023 17:27:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'DA 5/21/2023 17:27:07'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'DA 5/21/2023 17:27:07'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCantAddPorfolioIfSharesSomeAccount stamp: 'DA 5/21/2023 17:27:07'!
ERROR!
!Portfolio methodsFor: 'assertions' stamp: 'DA 5/21/2023 17:27:16' prior: 50627132!
cantAdd: anAccount 
	(parents isEmpty) ifTrue: [^ accounts anySatisfy: [ :account | account hasAccount: anAccount ].]
				     ifFalse: [^parents inject: true into:[:res :aParent | res & aParent cantAdd: anAccount]].  ! !
!Portfolio methodsFor: 'assertions' stamp: 'DA 5/21/2023 17:28:18' prior: 50627208!
cantAdd: anAccount 
	(parents isEmpty) ifTrue: [^ accounts anySatisfy: [ :account | account hasAccount: anAccount ].]
				     ifFalse: [^parents inject: false into:[:res :aParent | res & aParent cantAdd: anAccount]].  ! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'DA 5/21/2023 17:28:19'!
PASSED!

!testRun: #PortfolioTest #test02AddingOneAccountTakeTheirBalance stamp: 'DA 5/21/2023 17:28:19'!
PASSED!

!testRun: #PortfolioTest #test03AddingMoreThanOneAccountTakeSumOfTheirBalance stamp: 'DA 5/21/2023 17:28:20'!
PASSED!

!testRun: #PortfolioTest #test04AddingEmptyPortfolioHaveBalanceCero stamp: 'DA 5/21/2023 17:28:20'!
PASSED!

!testRun: #PortfolioTest #test05AddingPortfolioWithAccountHaveBalanceOfThatAccount stamp: 'DA 5/21/2023 17:28:20'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithoutAccountsHasNoRegisteredTransactions stamp: 'DA 5/21/2023 17:28:20'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasRegisteredTheirAccountTransactions stamp: 'DA 5/21/2023 17:28:20'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioCanLookTheirTransactionsRecursively stamp: 'DA 5/21/2023 17:28:20'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCantAddAccountIfWasAddedBefore stamp: 'DA 5/21/2023 17:28:20'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCantAddPorfolioIfSharesSomeAccount stamp: 'DA 5/21/2023 17:28:20'!
ERROR!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'DA 5/21/2023 17:28:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'DA 5/21/2023 17:28:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'DA 5/21/2023 17:28:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'DA 5/21/2023 17:28:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'DA 5/21/2023 17:28:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'DA 5/21/2023 17:28:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'DA 5/21/2023 17:28:20'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCantAddPorfolioIfSharesSomeAccount stamp: 'DA 5/21/2023 17:28:20'!
ERROR!
!Portfolio methodsFor: 'assertions' stamp: 'DA 5/21/2023 17:28:45' prior: 50627218!
cantAdd: anAccount 
	(parents isEmpty) ifTrue: [^ accounts anySatisfy: [ :account | account hasAccount: anAccount ].]
				     ifFalse: [^parents inject: false into:[:res :aParent | res | aParent cantAdd: anAccount]].  ! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'DA 5/21/2023 17:29:07'!
PASSED!

!testRun: #PortfolioTest #test02AddingOneAccountTakeTheirBalance stamp: 'DA 5/21/2023 17:29:07'!
PASSED!

!testRun: #PortfolioTest #test03AddingMoreThanOneAccountTakeSumOfTheirBalance stamp: 'DA 5/21/2023 17:29:07'!
PASSED!

!testRun: #PortfolioTest #test04AddingEmptyPortfolioHaveBalanceCero stamp: 'DA 5/21/2023 17:29:07'!
PASSED!

!testRun: #PortfolioTest #test05AddingPortfolioWithAccountHaveBalanceOfThatAccount stamp: 'DA 5/21/2023 17:29:07'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithoutAccountsHasNoRegisteredTransactions stamp: 'DA 5/21/2023 17:29:07'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasRegisteredTheirAccountTransactions stamp: 'DA 5/21/2023 17:29:07'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioCanLookTheirTransactionsRecursively stamp: 'DA 5/21/2023 17:29:07'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCantAddAccountIfWasAddedBefore stamp: 'DA 5/21/2023 17:29:07'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCantAddPorfolioIfSharesSomeAccount stamp: 'DA 5/21/2023 17:29:08'!
FAILURE!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'DA 5/21/2023 17:29:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'DA 5/21/2023 17:29:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'DA 5/21/2023 17:29:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'DA 5/21/2023 17:29:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'DA 5/21/2023 17:29:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'DA 5/21/2023 17:29:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'DA 5/21/2023 17:29:08'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCantAddPorfolioIfSharesSomeAccount stamp: 'DA 5/21/2023 17:29:08'!
FAILURE!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'DA 5/21/2023 17:29:44'!
PASSED!

!testRun: #PortfolioTest #test02AddingOneAccountTakeTheirBalance stamp: 'DA 5/21/2023 17:29:44'!
PASSED!

!testRun: #PortfolioTest #test03AddingMoreThanOneAccountTakeSumOfTheirBalance stamp: 'DA 5/21/2023 17:29:44'!
PASSED!

!testRun: #PortfolioTest #test04AddingEmptyPortfolioHaveBalanceCero stamp: 'DA 5/21/2023 17:29:44'!
PASSED!

!testRun: #PortfolioTest #test05AddingPortfolioWithAccountHaveBalanceOfThatAccount stamp: 'DA 5/21/2023 17:29:44'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithoutAccountsHasNoRegisteredTransactions stamp: 'DA 5/21/2023 17:29:44'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasRegisteredTheirAccountTransactions stamp: 'DA 5/21/2023 17:29:44'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioCanLookTheirTransactionsRecursively stamp: 'DA 5/21/2023 17:29:44'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCantAddAccountIfWasAddedBefore stamp: 'DA 5/21/2023 17:29:44'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCantAddPorfolioIfSharesSomeAccount stamp: 'DA 5/21/2023 17:29:44'!
FAILURE!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'DA 5/21/2023 17:29:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'DA 5/21/2023 17:29:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'DA 5/21/2023 17:29:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'DA 5/21/2023 17:29:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'DA 5/21/2023 17:29:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'DA 5/21/2023 17:29:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'DA 5/21/2023 17:29:45'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCantAddPorfolioIfSharesSomeAccount stamp: 'DA 5/21/2023 17:29:45'!
FAILURE!
!Portfolio methodsFor: 'category-name' stamp: 'DA 5/21/2023 17:32:49' prior: 50626054 overrides: 50625994!
hasAccount: anAccount 
	^accounts hasAccount: anAccount ! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'DA 5/21/2023 17:32:58' prior: 50626410 overrides: 50625994!
hasAccount: anAccount
	" este es nuestro caso base.
	recorriendo el arbol de portfolios, si llegamos a una cuenta debemos verificar si la cuenta (self) es anAccount. 
	Si es es anAccount entonces la cuenta se encuentra en el arbol de portfolios por lo que debe devolver false. 
	Sin embargo si no es anAccount quiere decir que en esta rama, desde la raiz, no se encuentra. 
	"
	"^  (self isKindOf: anAccount) and: (self transactions = anAccount transactions ) ."
	^(self transactions = anAccount transactions)! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'DA 5/21/2023 17:33:00'!
PASSED!

!testRun: #PortfolioTest #test02AddingOneAccountTakeTheirBalance stamp: 'DA 5/21/2023 17:33:00'!
PASSED!

!testRun: #PortfolioTest #test03AddingMoreThanOneAccountTakeSumOfTheirBalance stamp: 'DA 5/21/2023 17:33:00'!
PASSED!

!testRun: #PortfolioTest #test04AddingEmptyPortfolioHaveBalanceCero stamp: 'DA 5/21/2023 17:33:00'!
PASSED!

!testRun: #PortfolioTest #test05AddingPortfolioWithAccountHaveBalanceOfThatAccount stamp: 'DA 5/21/2023 17:33:00'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithoutAccountsHasNoRegisteredTransactions stamp: 'DA 5/21/2023 17:33:00'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasRegisteredTheirAccountTransactions stamp: 'DA 5/21/2023 17:33:00'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioCanLookTheirTransactionsRecursively stamp: 'DA 5/21/2023 17:33:00'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCantAddAccountIfWasAddedBefore stamp: 'DA 5/21/2023 17:33:00'!
ERROR!

!testRun: #PortfolioTest #test10PortfolioCantAddPorfolioIfSharesSomeAccount stamp: 'DA 5/21/2023 17:33:00'!
ERROR!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'DA 5/21/2023 17:33:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'DA 5/21/2023 17:33:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'DA 5/21/2023 17:33:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'DA 5/21/2023 17:33:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'DA 5/21/2023 17:33:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'DA 5/21/2023 17:33:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'DA 5/21/2023 17:33:01'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCantAddAccountIfWasAddedBefore stamp: 'DA 5/21/2023 17:33:06'!
ERROR!
!Portfolio methodsFor: 'category-name' stamp: 'DA 5/21/2023 17:33:42' prior: 50627438 overrides: 50625994!
hasAccount: anAccount 
	^accounts do: [:account | account hasAccount: anAccount].! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'DA 5/21/2023 17:34:03'!
PASSED!

!testRun: #PortfolioTest #test02AddingOneAccountTakeTheirBalance stamp: 'DA 5/21/2023 17:34:03'!
PASSED!

!testRun: #PortfolioTest #test03AddingMoreThanOneAccountTakeSumOfTheirBalance stamp: 'DA 5/21/2023 17:34:03'!
PASSED!

!testRun: #PortfolioTest #test04AddingEmptyPortfolioHaveBalanceCero stamp: 'DA 5/21/2023 17:34:03'!
PASSED!

!testRun: #PortfolioTest #test05AddingPortfolioWithAccountHaveBalanceOfThatAccount stamp: 'DA 5/21/2023 17:34:03'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithoutAccountsHasNoRegisteredTransactions stamp: 'DA 5/21/2023 17:34:03'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasRegisteredTheirAccountTransactions stamp: 'DA 5/21/2023 17:34:03'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioCanLookTheirTransactionsRecursively stamp: 'DA 5/21/2023 17:34:03'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCantAddAccountIfWasAddedBefore stamp: 'DA 5/21/2023 17:34:03'!
ERROR!

!testRun: #PortfolioTest #test10PortfolioCantAddPorfolioIfSharesSomeAccount stamp: 'DA 5/21/2023 17:34:03'!
ERROR!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'DA 5/21/2023 17:34:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'DA 5/21/2023 17:34:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'DA 5/21/2023 17:34:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'DA 5/21/2023 17:34:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'DA 5/21/2023 17:34:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'DA 5/21/2023 17:34:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'DA 5/21/2023 17:34:03'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCantAddAccountIfWasAddedBefore stamp: 'DA 5/21/2023 17:34:06'!
ERROR!

!testRun: #PortfolioTest #test10PortfolioCantAddPorfolioIfSharesSomeAccount stamp: 'DA 5/21/2023 17:34:12'!
ERROR!
!Portfolio methodsFor: 'category-name' stamp: 'DA 5/21/2023 17:34:55' prior: 50627530 overrides: 50625994!
hasAccount: anAccount 
	^accounts anySatisfy: [:account | account hasAccount: anAccount].! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'DA 5/21/2023 17:34:56'!
PASSED!

!testRun: #PortfolioTest #test02AddingOneAccountTakeTheirBalance stamp: 'DA 5/21/2023 17:34:56'!
PASSED!

!testRun: #PortfolioTest #test03AddingMoreThanOneAccountTakeSumOfTheirBalance stamp: 'DA 5/21/2023 17:34:56'!
PASSED!

!testRun: #PortfolioTest #test04AddingEmptyPortfolioHaveBalanceCero stamp: 'DA 5/21/2023 17:34:56'!
PASSED!

!testRun: #PortfolioTest #test05AddingPortfolioWithAccountHaveBalanceOfThatAccount stamp: 'DA 5/21/2023 17:34:56'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithoutAccountsHasNoRegisteredTransactions stamp: 'DA 5/21/2023 17:34:56'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasRegisteredTheirAccountTransactions stamp: 'DA 5/21/2023 17:34:56'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioCanLookTheirTransactionsRecursively stamp: 'DA 5/21/2023 17:34:56'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCantAddAccountIfWasAddedBefore stamp: 'DA 5/21/2023 17:34:56'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCantAddPorfolioIfSharesSomeAccount stamp: 'DA 5/21/2023 17:34:56'!
FAILURE!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'DA 5/21/2023 17:34:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'DA 5/21/2023 17:34:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'DA 5/21/2023 17:34:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'DA 5/21/2023 17:34:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'DA 5/21/2023 17:34:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'DA 5/21/2023 17:34:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'DA 5/21/2023 17:34:57'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCantAddPorfolioIfSharesSomeAccount stamp: 'DA 5/21/2023 17:34:57'!
FAILURE!
!Portfolio methodsFor: 'category-name' stamp: 'DA 5/21/2023 17:50:07' prior: 50627606 overrides: 50625994!
hasAccount: aReceptiveAccount
	^ (accounts includes: aReceptiveAccount) or:
	(accounts anySatisfy: [:account | account hasAccount: aReceptiveAccount])! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'DA 5/21/2023 17:50:09'!
PASSED!

!testRun: #PortfolioTest #test02AddingOneAccountTakeTheirBalance stamp: 'DA 5/21/2023 17:50:09'!
PASSED!

!testRun: #PortfolioTest #test03AddingMoreThanOneAccountTakeSumOfTheirBalance stamp: 'DA 5/21/2023 17:50:09'!
PASSED!

!testRun: #PortfolioTest #test04AddingEmptyPortfolioHaveBalanceCero stamp: 'DA 5/21/2023 17:50:09'!
PASSED!

!testRun: #PortfolioTest #test05AddingPortfolioWithAccountHaveBalanceOfThatAccount stamp: 'DA 5/21/2023 17:50:09'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithoutAccountsHasNoRegisteredTransactions stamp: 'DA 5/21/2023 17:50:09'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasRegisteredTheirAccountTransactions stamp: 'DA 5/21/2023 17:50:09'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioCanLookTheirTransactionsRecursively stamp: 'DA 5/21/2023 17:50:09'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCantAddAccountIfWasAddedBefore stamp: 'DA 5/21/2023 17:50:09'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCantAddPorfolioIfSharesSomeAccount stamp: 'DA 5/21/2023 17:50:09'!
FAILURE!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'DA 5/21/2023 17:50:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'DA 5/21/2023 17:50:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'DA 5/21/2023 17:50:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'DA 5/21/2023 17:50:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'DA 5/21/2023 17:50:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'DA 5/21/2023 17:50:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'DA 5/21/2023 17:50:09'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCantAddPorfolioIfSharesSomeAccount stamp: 'DA 5/21/2023 17:50:09'!
FAILURE!
!Portfolio methodsFor: 'category-name' stamp: 'DA 5/21/2023 17:51:22' prior: 50627679 overrides: 50625994!
hasAccount: aAccount
	^ (accounts includes: aAccount) or:
	(accounts anySatisfy: [:account | account hasAccount: aAccount])! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'DA 5/21/2023 17:52:27' prior: 50627444 overrides: 50625994!
hasAccount: anAccount
	" este es nuestro caso base.
	recorriendo el arbol de portfolios, si llegamos a una cuenta debemos verificar si la cuenta (self) es anAccount. 
	Si es es anAccount entonces la cuenta se encuentra en el arbol de portfolios por lo que debe devolver false. 
	Sin embargo si no es anAccount quiere decir que en esta rama, desde la raiz, no se encuentra. 
	"
	"^  (self isKindOf: anAccount) and: (self transactions = anAccount transactions ) ."
	^false 
	"^(self transactions = anAccount transactions)"! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'DA 5/21/2023 17:52:29'!
PASSED!

!testRun: #PortfolioTest #test02AddingOneAccountTakeTheirBalance stamp: 'DA 5/21/2023 17:52:29'!
PASSED!

!testRun: #PortfolioTest #test03AddingMoreThanOneAccountTakeSumOfTheirBalance stamp: 'DA 5/21/2023 17:52:29'!
PASSED!

!testRun: #PortfolioTest #test04AddingEmptyPortfolioHaveBalanceCero stamp: 'DA 5/21/2023 17:52:29'!
PASSED!

!testRun: #PortfolioTest #test05AddingPortfolioWithAccountHaveBalanceOfThatAccount stamp: 'DA 5/21/2023 17:52:29'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithoutAccountsHasNoRegisteredTransactions stamp: 'DA 5/21/2023 17:52:29'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasRegisteredTheirAccountTransactions stamp: 'DA 5/21/2023 17:52:29'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioCanLookTheirTransactionsRecursively stamp: 'DA 5/21/2023 17:52:29'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCantAddAccountIfWasAddedBefore stamp: 'DA 5/21/2023 17:52:29'!
FAILURE!

!testRun: #PortfolioTest #test10PortfolioCantAddPorfolioIfSharesSomeAccount stamp: 'DA 5/21/2023 17:52:29'!
FAILURE!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'DA 5/21/2023 17:52:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'DA 5/21/2023 17:52:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'DA 5/21/2023 17:52:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'DA 5/21/2023 17:52:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'DA 5/21/2023 17:52:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'DA 5/21/2023 17:52:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'DA 5/21/2023 17:52:29'!
PASSED!
!Portfolio methodsFor: 'assertions' stamp: 'DA 5/21/2023 17:55:27' prior: 50627294!
cantAdd: anAccount 
	parents do: [:aParent | aParent cantAdd: anAccount].
	^((self = anAccount) or: [self hasAccount: anAccount])
	"
	(parents isEmpty) ifTrue: [^ accounts anySatisfy: [ :account | account hasAccount: anAccount ].]
				     ifFalse: [^parents inject: false into:[:res :aParent | res | aParent cantAdd: anAccount]].  "! !
!Portfolio methodsFor: 'assertions' stamp: 'DA 5/21/2023 17:58:42' prior: 50627844!
cantAdd: anAccount 
	parents do: [:aParent | aParent cantAdd: anAccount].
	^((self = anAccount) or: [self hasAccount: anAccount])
	"
	(parents isEmpty) ifTrue: [^ accounts anySatisfy: [ :account | account hasAccount: anAccount ].]
				     ifFalse: [^parents inject: false into:[:res :aParent | res | aParent cantAdd: anAccount]].  "! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'DA 5/21/2023 17:59:06'!
PASSED!

!testRun: #PortfolioTest #test02AddingOneAccountTakeTheirBalance stamp: 'DA 5/21/2023 17:59:06'!
PASSED!

!testRun: #PortfolioTest #test03AddingMoreThanOneAccountTakeSumOfTheirBalance stamp: 'DA 5/21/2023 17:59:06'!
PASSED!

!testRun: #PortfolioTest #test04AddingEmptyPortfolioHaveBalanceCero stamp: 'DA 5/21/2023 17:59:06'!
PASSED!

!testRun: #PortfolioTest #test05AddingPortfolioWithAccountHaveBalanceOfThatAccount stamp: 'DA 5/21/2023 17:59:06'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithoutAccountsHasNoRegisteredTransactions stamp: 'DA 5/21/2023 17:59:06'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasRegisteredTheirAccountTransactions stamp: 'DA 5/21/2023 17:59:06'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioCanLookTheirTransactionsRecursively stamp: 'DA 5/21/2023 17:59:06'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCantAddAccountIfWasAddedBefore stamp: 'DA 5/21/2023 17:59:06'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCantAddPorfolioIfSharesSomeAccount stamp: 'DA 5/21/2023 17:59:06'!
FAILURE!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'DA 5/21/2023 17:59:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'DA 5/21/2023 17:59:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'DA 5/21/2023 17:59:07'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'DA 5/21/2023 17:59:07'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'DA 5/21/2023 17:59:07'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'DA 5/21/2023 17:59:07'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'DA 5/21/2023 17:59:07'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCantAddPorfolioIfSharesSomeAccount stamp: 'DA 5/21/2023 17:59:07'!
FAILURE!
!Portfolio methodsFor: 'assertions' stamp: 'DA 5/21/2023 17:59:30' prior: 50627858!
cantAdd: anAccount 
	parents do: [:aParent | aParent cantAdd: anAccount].
	^((self == anAccount) or: [self hasAccount: anAccount])
	"
	(parents isEmpty) ifTrue: [^ accounts anySatisfy: [ :account | account hasAccount: anAccount ].]
				     ifFalse: [^parents inject: false into:[:res :aParent | res | aParent cantAdd: anAccount]].  "! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'DA 5/21/2023 17:59:31'!
PASSED!

!testRun: #PortfolioTest #test02AddingOneAccountTakeTheirBalance stamp: 'DA 5/21/2023 17:59:31'!
PASSED!

!testRun: #PortfolioTest #test03AddingMoreThanOneAccountTakeSumOfTheirBalance stamp: 'DA 5/21/2023 17:59:31'!
PASSED!

!testRun: #PortfolioTest #test04AddingEmptyPortfolioHaveBalanceCero stamp: 'DA 5/21/2023 17:59:32'!
PASSED!

!testRun: #PortfolioTest #test05AddingPortfolioWithAccountHaveBalanceOfThatAccount stamp: 'DA 5/21/2023 17:59:32'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithoutAccountsHasNoRegisteredTransactions stamp: 'DA 5/21/2023 17:59:32'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasRegisteredTheirAccountTransactions stamp: 'DA 5/21/2023 17:59:32'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioCanLookTheirTransactionsRecursively stamp: 'DA 5/21/2023 17:59:32'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCantAddAccountIfWasAddedBefore stamp: 'DA 5/21/2023 17:59:32'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCantAddPorfolioIfSharesSomeAccount stamp: 'DA 5/21/2023 17:59:32'!
FAILURE!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'DA 5/21/2023 17:59:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'DA 5/21/2023 17:59:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'DA 5/21/2023 17:59:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'DA 5/21/2023 17:59:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'DA 5/21/2023 17:59:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'DA 5/21/2023 17:59:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'DA 5/21/2023 17:59:32'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCantAddPorfolioIfSharesSomeAccount stamp: 'DA 5/21/2023 17:59:32'!
FAILURE!
!Portfolio methodsFor: 'assertions' stamp: 'DA 5/21/2023 17:59:41' prior: 50627938!
cantAdd: anAccount 
	parents do: [:aParent | aParent cantAdd: anAccount].
	^((self = anAccount) or: [self hasAccount: anAccount])
	"
	(parents isEmpty) ifTrue: [^ accounts anySatisfy: [ :account | account hasAccount: anAccount ].]
				     ifFalse: [^parents inject: false into:[:res :aParent | res | aParent cantAdd: anAccount]].  "! !
!Portfolio methodsFor: 'adding' stamp: 'DA 5/21/2023 18:02:46' prior: 50626615!
add: anAccount 
	(self cantAdd: anAccount) ifTrue: [^self error: Portfolio cantAddErrorDescription].
	accounts add: anAccount.
	anAccount registerParent: self. ! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'DA 5/21/2023 18:03:10'!
PASSED!

!testRun: #PortfolioTest #test02AddingOneAccountTakeTheirBalance stamp: 'DA 5/21/2023 18:03:11'!
PASSED!

!testRun: #PortfolioTest #test03AddingMoreThanOneAccountTakeSumOfTheirBalance stamp: 'DA 5/21/2023 18:03:11'!
PASSED!

!testRun: #PortfolioTest #test04AddingEmptyPortfolioHaveBalanceCero stamp: 'DA 5/21/2023 18:03:11'!
PASSED!

!testRun: #PortfolioTest #test05AddingPortfolioWithAccountHaveBalanceOfThatAccount stamp: 'DA 5/21/2023 18:03:11'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithoutAccountsHasNoRegisteredTransactions stamp: 'DA 5/21/2023 18:03:11'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasRegisteredTheirAccountTransactions stamp: 'DA 5/21/2023 18:03:11'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioCanLookTheirTransactionsRecursively stamp: 'DA 5/21/2023 18:03:11'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCantAddAccountIfWasAddedBefore stamp: 'DA 5/21/2023 18:03:11'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCantAddPorfolioIfSharesSomeAccount stamp: 'DA 5/21/2023 18:03:11'!
FAILURE!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'DA 5/21/2023 18:03:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'DA 5/21/2023 18:03:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'DA 5/21/2023 18:03:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'DA 5/21/2023 18:03:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'DA 5/21/2023 18:03:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'DA 5/21/2023 18:03:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'DA 5/21/2023 18:03:11'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCantAddPorfolioIfSharesSomeAccount stamp: 'DA 5/21/2023 18:03:11'!
FAILURE!
!PortfolioTest methodsFor: 'tests' stamp: 'DA 5/21/2023 18:03:45' prior: 50627104!
test10PortfolioCantAddPorfolioIfSharesSomeAccount
	|account portfolio1 portfolio2 portfolio3 temp|
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3:= Portfolio new.
	
	account := ReceptiveAccount new.
	portfolio1 add: account.
	portfolio2 add: account.
	portfolio3 add: portfolio2.
	temp := portfolio2 add: portfolio1.
	
	self 
	should: [ portfolio2 add: portfolio1]
	raise: Error
	withExceptionDo: [ :anError |
		self assert: Portfolio cantAddErrorDescription equals: anError messageText.
		self assert: 1 equals: portfolio2 accountsSize.
		self deny: (portfolio2 hasAccount: portfolio1).
		self assert: (portfolio2 hasAccount: account)]! !

!testRun: #PortfolioTest #test10PortfolioCantAddPorfolioIfSharesSomeAccount stamp: 'DA 5/21/2023 18:03:49'!
FAILURE!
!Portfolio methodsFor: 'assertions' stamp: 'DA 5/21/2023 18:11:11' prior: 50628018!
cantAdd: anAccount 
	parents do: [:aParent | aParent cantAdd: anAccount].
	((self = anAccount) or: [self hasAccount: anAccount]) ifTrue: [^self error: Portfolio cantAddErrorDescription].
	"
	(parents isEmpty) ifTrue: [^ accounts anySatisfy: [ :account | account hasAccount: anAccount ].]
				     ifFalse: [^parents inject: false into:[:res :aParent | res | aParent cantAdd: anAccount]].  "! !
!Portfolio methodsFor: 'assertions' stamp: 'DA 5/21/2023 18:11:11' prior: 50628135!
cantAdd: anAccount 
	parents do: [:aParent | aParent cantAdd: anAccount].
	((self = anAccount) or: [self hasAccount: anAccount]) ifTrue: [^self error: Portfolio cantAddErrorDescription].
	"
	(parents isEmpty) ifTrue: [^ accounts anySatisfy: [ :account | account hasAccount: anAccount ].]
				     ifFalse: [^parents inject: false into:[:res :aParent | res | aParent cantAdd: anAccount]].  "! !
!Portfolio methodsFor: 'assertions' stamp: 'DA 5/21/2023 18:11:31' prior: 50628150!
cantAdd: anAccount 
	parents do: [:aParent | aParent cantAdd: anAccount].
	^((self = anAccount) or: [self hasAccount: anAccount])
	"
	(parents isEmpty) ifTrue: [^ accounts anySatisfy: [ :account | account hasAccount: anAccount ].]
				     ifFalse: [^parents inject: false into:[:res :aParent | res | aParent cantAdd: anAccount]].  "! !
!Portfolio methodsFor: 'assertions' stamp: 'DA 5/21/2023 18:11:43'!
assertCantAdd: anAccount 
	parents do: [:aParent | aParent cantAdd: anAccount].
	((self = anAccount) or: [self hasAccount: anAccount])  ifTrue: [^self error: Portfolio cantAddErrorDescription].
	"
	(parents isEmpty) ifTrue: [^ accounts anySatisfy: [ :account | account hasAccount: anAccount ].]
				     ifFalse: [^parents inject: false into:[:res :aParent | res | aParent cantAdd: anAccount]].  "! !
!Portfolio methodsFor: 'adding' stamp: 'DA 5/21/2023 18:12:02' prior: 50628032!
add: anAccount 
	"(self cantAdd: anAccount) ifTrue: [^self error: Portfolio cantAddErrorDescription]."
	self assertCantAdd: anAccount.
	accounts add: anAccount.
	anAccount registerParent: self. ! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'DA 5/21/2023 18:12:03'!
PASSED!

!testRun: #PortfolioTest #test02AddingOneAccountTakeTheirBalance stamp: 'DA 5/21/2023 18:12:03'!
PASSED!

!testRun: #PortfolioTest #test03AddingMoreThanOneAccountTakeSumOfTheirBalance stamp: 'DA 5/21/2023 18:12:03'!
PASSED!

!testRun: #PortfolioTest #test04AddingEmptyPortfolioHaveBalanceCero stamp: 'DA 5/21/2023 18:12:03'!
PASSED!

!testRun: #PortfolioTest #test05AddingPortfolioWithAccountHaveBalanceOfThatAccount stamp: 'DA 5/21/2023 18:12:03'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithoutAccountsHasNoRegisteredTransactions stamp: 'DA 5/21/2023 18:12:03'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasRegisteredTheirAccountTransactions stamp: 'DA 5/21/2023 18:12:03'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioCanLookTheirTransactionsRecursively stamp: 'DA 5/21/2023 18:12:03'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCantAddAccountIfWasAddedBefore stamp: 'DA 5/21/2023 18:12:04'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCantAddPorfolioIfSharesSomeAccount stamp: 'DA 5/21/2023 18:12:04'!
FAILURE!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'DA 5/21/2023 18:12:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'DA 5/21/2023 18:12:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'DA 5/21/2023 18:12:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'DA 5/21/2023 18:12:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'DA 5/21/2023 18:12:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'DA 5/21/2023 18:12:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'DA 5/21/2023 18:12:04'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCantAddPorfolioIfSharesSomeAccount stamp: 'DA 5/21/2023 18:12:04'!
FAILURE!
!Portfolio methodsFor: 'assertions' stamp: 'DA 5/21/2023 18:17:57' prior: 50628178!
assertCantAdd: anAccount 
	parents do: [:aParent | aParent assertCantAdd: anAccount].
	((self = anAccount) or: [self hasAccount: anAccount])  ifTrue: [^self error: Portfolio cantAddErrorDescription].
	"
	(parents isEmpty) ifTrue: [^ accounts anySatisfy: [ :account | account hasAccount: anAccount ].]
				     ifFalse: [^parents inject: false into:[:res :aParent | res | aParent cantAdd: anAccount]].  "! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'DA 5/21/2023 18:17:59'!
PASSED!

!testRun: #PortfolioTest #test02AddingOneAccountTakeTheirBalance stamp: 'DA 5/21/2023 18:17:59'!
PASSED!

!testRun: #PortfolioTest #test03AddingMoreThanOneAccountTakeSumOfTheirBalance stamp: 'DA 5/21/2023 18:17:59'!
PASSED!

!testRun: #PortfolioTest #test04AddingEmptyPortfolioHaveBalanceCero stamp: 'DA 5/21/2023 18:17:59'!
PASSED!

!testRun: #PortfolioTest #test05AddingPortfolioWithAccountHaveBalanceOfThatAccount stamp: 'DA 5/21/2023 18:17:59'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithoutAccountsHasNoRegisteredTransactions stamp: 'DA 5/21/2023 18:17:59'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasRegisteredTheirAccountTransactions stamp: 'DA 5/21/2023 18:17:59'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioCanLookTheirTransactionsRecursively stamp: 'DA 5/21/2023 18:18:00'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCantAddAccountIfWasAddedBefore stamp: 'DA 5/21/2023 18:18:00'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCantAddPorfolioIfSharesSomeAccount stamp: 'DA 5/21/2023 18:18:00'!
FAILURE!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'DA 5/21/2023 18:18:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'DA 5/21/2023 18:18:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'DA 5/21/2023 18:18:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'DA 5/21/2023 18:18:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'DA 5/21/2023 18:18:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'DA 5/21/2023 18:18:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'DA 5/21/2023 18:18:00'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCantAddPorfolioIfSharesSomeAccount stamp: 'DA 5/21/2023 18:18:00'!
FAILURE!
!Portfolio methodsFor: 'category-name' stamp: 'DA 5/21/2023 18:21:56' prior: 50627754 overrides: 50625994!
hasAccount: aAccount
	^ (accounts includes: aAccount) or:
	[accounts anySatisfy: [:account | account hasAccount: aAccount]].! !

!testRun: #PortfolioTest #test10PortfolioCantAddPorfolioIfSharesSomeAccount stamp: 'DA 5/21/2023 18:22:23'!
FAILURE!
!Portfolio methodsFor: 'category-name' stamp: 'DA 5/21/2023 18:22:41' prior: 50628353 overrides: 50625994!
hasAccount: aAccount
	^ (accounts includes: aAccount) or:
	(accounts anySatisfy: [:account | account hasAccount: aAccount]).! !

Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #ReceptiveAccount category: 'Portfolio-Ejercicio' stamp: 'DA 5/21/2023 18:26:25'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'DA 5/21/2023 18:26:44' prior: 50626169 overrides: 50626004!
registerParent: aParent
	parents := parents add: aParent.
! !
!ReceptiveAccount methodsFor: 'initialization' stamp: 'DA 5/21/2023 18:27:19' prior: 50626123 overrides: 16920235!
initialize
	parents := OrderedCollection new.
	transactions := OrderedCollection new.! !

!testRun: #PortfolioTest #test07PortfolioHasRegisteredTheirAccountTransactions stamp: 'DA 5/21/2023 18:27:30'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'DA 5/21/2023 18:27:30'!
PASSED!

!testRun: #PortfolioTest #test02AddingOneAccountTakeTheirBalance stamp: 'DA 5/21/2023 18:27:30'!
PASSED!

!testRun: #PortfolioTest #test03AddingMoreThanOneAccountTakeSumOfTheirBalance stamp: 'DA 5/21/2023 18:27:30'!
PASSED!

!testRun: #PortfolioTest #test04AddingEmptyPortfolioHaveBalanceCero stamp: 'DA 5/21/2023 18:27:30'!
PASSED!

!testRun: #PortfolioTest #test05AddingPortfolioWithAccountHaveBalanceOfThatAccount stamp: 'DA 5/21/2023 18:27:30'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithoutAccountsHasNoRegisteredTransactions stamp: 'DA 5/21/2023 18:27:30'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasRegisteredTheirAccountTransactions stamp: 'DA 5/21/2023 18:27:30'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioCanLookTheirTransactionsRecursively stamp: 'DA 5/21/2023 18:27:30'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCantAddAccountIfWasAddedBefore stamp: 'DA 5/21/2023 18:27:30'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCantAddPorfolioIfSharesSomeAccount stamp: 'DA 5/21/2023 18:27:30'!
ERROR!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'DA 5/21/2023 18:27:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'DA 5/21/2023 18:27:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'DA 5/21/2023 18:27:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'DA 5/21/2023 18:27:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'DA 5/21/2023 18:27:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'DA 5/21/2023 18:27:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'DA 5/21/2023 18:27:30'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCantAddPorfolioIfSharesSomeAccount stamp: 'DA 5/21/2023 18:27:30'!
ERROR!
!PortfolioTest methodsFor: 'tests' stamp: 'DA 5/21/2023 18:27:51' prior: 50628107!
test10PortfolioCantAddPorfolioIfSharesSomeAccount
	|account portfolio1 portfolio2 portfolio3 temp|
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3:= Portfolio new.
	
	account := ReceptiveAccount new.
	portfolio1 add: account.
	portfolio2 add: account.
	portfolio3 add: portfolio2.
	"temp := portfolio2 add: portfolio1."
	
	self 
	should: [ portfolio2 add: portfolio1]
	raise: Error
	withExceptionDo: [ :anError |
		self assert: Portfolio cantAddErrorDescription equals: anError messageText.
		self assert: 1 equals: portfolio2 accountsSize.
		self deny: (portfolio2 hasAccount: portfolio1).
		self assert: (portfolio2 hasAccount: account)]! !

!testRun: #PortfolioTest #test10PortfolioCantAddPorfolioIfSharesSomeAccount stamp: 'DA 5/21/2023 18:27:54'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'DA 5/21/2023 18:27:54'!
PASSED!

!testRun: #PortfolioTest #test02AddingOneAccountTakeTheirBalance stamp: 'DA 5/21/2023 18:27:54'!
PASSED!

!testRun: #PortfolioTest #test03AddingMoreThanOneAccountTakeSumOfTheirBalance stamp: 'DA 5/21/2023 18:27:54'!
PASSED!

!testRun: #PortfolioTest #test04AddingEmptyPortfolioHaveBalanceCero stamp: 'DA 5/21/2023 18:27:54'!
PASSED!

!testRun: #PortfolioTest #test05AddingPortfolioWithAccountHaveBalanceOfThatAccount stamp: 'DA 5/21/2023 18:27:54'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithoutAccountsHasNoRegisteredTransactions stamp: 'DA 5/21/2023 18:27:54'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasRegisteredTheirAccountTransactions stamp: 'DA 5/21/2023 18:27:55'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioCanLookTheirTransactionsRecursively stamp: 'DA 5/21/2023 18:27:55'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCantAddAccountIfWasAddedBefore stamp: 'DA 5/21/2023 18:27:55'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCantAddPorfolioIfSharesSomeAccount stamp: 'DA 5/21/2023 18:27:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'DA 5/21/2023 18:27:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'DA 5/21/2023 18:27:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'DA 5/21/2023 18:27:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'DA 5/21/2023 18:27:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'DA 5/21/2023 18:27:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'DA 5/21/2023 18:27:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'DA 5/21/2023 18:27:55'!
PASSED!

!methodRemoval: Portfolio #cantAdd: stamp: 'DA 5/21/2023 18:29:45'!
cantAdd: anAccount 
	parents do: [:aParent | aParent cantAdd: anAccount].
	^((self = anAccount) or: [self hasAccount: anAccount])
	"
	(parents isEmpty) ifTrue: [^ accounts anySatisfy: [ :account | account hasAccount: anAccount ].]
				     ifFalse: [^parents inject: false into:[:res :aParent | res | aParent cantAdd: anAccount]].  "!
!Portfolio methodsFor: 'adding' stamp: 'DA 5/21/2023 18:30:11' prior: 50628194!
add: anAccount 
	self assertCantAdd: anAccount.
	accounts add: anAccount.
	anAccount registerParent: self. ! !
!PortfolioTest methodsFor: 'tests' stamp: 'DA 5/21/2023 18:33:15' prior: 50628469!
test10PortfolioCantAddPorfolioIfSharesSomeAccount
	|account portfolio1 portfolio2 portfolio3 temp|
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3:= Portfolio new.
	
	account := ReceptiveAccount new.
	portfolio1 add: account.
	portfolio2 add: account.
	portfolio3 add: portfolio2.
	temp := portfolio2 add: portfolio1.
	
	self 
	should: [ portfolio2 add: portfolio1]
	raise: Error
	withExceptionDo: [ :anError |
		self assert: Portfolio cantAddErrorDescription equals: anError messageText.
		self assert: 1 equals: portfolio2 accountsSize.
		self deny: (portfolio2 hasAccount: portfolio1).
		self assert: (portfolio2 hasAccount: account)]! !

!testRun: #PortfolioTest #test10PortfolioCantAddPorfolioIfSharesSomeAccount stamp: 'DA 5/21/2023 18:34:03'!
ERROR!
!PortfolioTest methodsFor: 'tests' stamp: 'DA 5/21/2023 18:37:22' prior: 50628579!
test10PortfolioCantAddPorfolioIfSharesSomeAccount
	|account portfolio1 portfolio2 portfolio3 |
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3:= Portfolio new.
	
	account := ReceptiveAccount new.
	portfolio1 add: account.
	portfolio2 add: account.
	portfolio3 add: portfolio2.
	
	self 
	should: [ portfolio2 add: portfolio1]
	raise: Error
	withExceptionDo: [ :anError |
		self assert: Portfolio cantAddErrorDescription equals: anError messageText.
		self assert: 1 equals: portfolio2 accountsSize.
		self deny: (portfolio2 hasAccount: portfolio1).
		self assert: (portfolio2 hasAccount: account)]! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'DA 5/21/2023 18:39:12' prior: 50627762 overrides: 50625994!
hasAccount: anAccount
	^false ! !
!Portfolio class methodsFor: 'nil' stamp: 'DA 5/21/2023 18:42:22'!
with: anAccount
	^ self initializeWith: anAccount! !
!Portfolio methodsFor: 'initialize' stamp: 'DA 5/21/2023 18:43:08'!
initializeWith: anAccount
	accounts := accounts add: anAccount.! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'DA 5/21/2023 18:43:20' prior: 50628634!
with: anAccount
	^ self new initializeWith: anAccount! !
!PortfolioTest methodsFor: 'tests' stamp: 'DA 5/21/2023 18:44:09' prior: 50625786!
test02AddingOneAccountTakeTheirBalance
	|account|
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	self assert: (account balance) equals: (Portfolio with: account balance).! !

!testRun: #PortfolioTest #test02AddingOneAccountTakeTheirBalance stamp: 'DA 5/21/2023 18:44:10'!
FAILURE!
!PortfolioTest methodsFor: 'tests' stamp: 'DA 5/21/2023 18:44:21' prior: 50628649!
test02AddingOneAccountTakeTheirBalance
	|account|
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	self assert: (account balance) equals: ((Portfolio with: account) balance).! !

!testRun: #PortfolioTest #test02AddingOneAccountTakeTheirBalance stamp: 'DA 5/21/2023 18:44:22'!
ERROR!

!testRun: #PortfolioTest #test02AddingOneAccountTakeTheirBalance stamp: 'DA 5/21/2023 18:44:42'!
ERROR!
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'DA 5/21/2023 18:46:14' prior: 50628644!
with: anAccount
	^ self new add: anAccount! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'DA 5/21/2023 18:46:55' prior: 50628679!
with: anAccount
	^ self new initializeWith: anAccount! !
!Portfolio methodsFor: 'initialize' stamp: 'DA 5/21/2023 18:47:53' prior: 50628638!
initializeWith: anAccount
	accounts :=  OrderedCollection with: anAccount.
	parents := OrderedCollection new. ! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'DA 5/21/2023 18:47:55'!
PASSED!

!testRun: #PortfolioTest #test02AddingOneAccountTakeTheirBalance stamp: 'DA 5/21/2023 18:47:55'!
PASSED!

!testRun: #PortfolioTest #test03AddingMoreThanOneAccountTakeSumOfTheirBalance stamp: 'DA 5/21/2023 18:47:55'!
PASSED!

!testRun: #PortfolioTest #test04AddingEmptyPortfolioHaveBalanceCero stamp: 'DA 5/21/2023 18:47:55'!
PASSED!

!testRun: #PortfolioTest #test05AddingPortfolioWithAccountHaveBalanceOfThatAccount stamp: 'DA 5/21/2023 18:47:55'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithoutAccountsHasNoRegisteredTransactions stamp: 'DA 5/21/2023 18:47:55'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasRegisteredTheirAccountTransactions stamp: 'DA 5/21/2023 18:47:55'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioCanLookTheirTransactionsRecursively stamp: 'DA 5/21/2023 18:47:55'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCantAddAccountIfWasAddedBefore stamp: 'DA 5/21/2023 18:47:55'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCantAddPorfolioIfSharesSomeAccount stamp: 'DA 5/21/2023 18:47:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'DA 5/21/2023 18:47:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'DA 5/21/2023 18:47:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'DA 5/21/2023 18:47:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'DA 5/21/2023 18:47:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'DA 5/21/2023 18:47:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'DA 5/21/2023 18:47:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'DA 5/21/2023 18:47:55'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'DA 5/21/2023 18:48:07' prior: 50628662!
test02AddingOneAccountTakeTheirBalance
	|account|
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	self assert: (account balance) equals: ((Portfolio with: account) balance).! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'DA 5/21/2023 18:48:51'!
with: anAccount with: otherAccount
	^ (self new initializeWith: anAccount) add: otherAccount.! !
!PortfolioTest methodsFor: 'tests' stamp: 'DA 5/21/2023 18:49:24' prior: 50625796!
test03AddingMoreThanOneAccountTakeSumOfTheirBalance

	|porfolio account1 account2|
	
	porfolio := Portfolio new.
	
	account1 := ReceptiveAccount new.
	Deposit register: 100 on: account1.
	
	account2 := ReceptiveAccount new.
	Deposit register: 200 on: account2.
	
	porfolio add: account1.
	porfolio add: account2.
	
	
	self assert: (account1 balance + account2 balance) equals: ((Portfolio with: account1 with: account2) balance).! !

!testRun: #PortfolioTest #test03AddingMoreThanOneAccountTakeSumOfTheirBalance stamp: 'DA 5/21/2023 18:49:25'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'DA 5/21/2023 18:49:25'!
PASSED!

!testRun: #PortfolioTest #test02AddingOneAccountTakeTheirBalance stamp: 'DA 5/21/2023 18:49:25'!
PASSED!

!testRun: #PortfolioTest #test03AddingMoreThanOneAccountTakeSumOfTheirBalance stamp: 'DA 5/21/2023 18:49:25'!
PASSED!

!testRun: #PortfolioTest #test04AddingEmptyPortfolioHaveBalanceCero stamp: 'DA 5/21/2023 18:49:25'!
PASSED!

!testRun: #PortfolioTest #test05AddingPortfolioWithAccountHaveBalanceOfThatAccount stamp: 'DA 5/21/2023 18:49:25'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithoutAccountsHasNoRegisteredTransactions stamp: 'DA 5/21/2023 18:49:25'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasRegisteredTheirAccountTransactions stamp: 'DA 5/21/2023 18:49:25'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioCanLookTheirTransactionsRecursively stamp: 'DA 5/21/2023 18:49:25'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCantAddAccountIfWasAddedBefore stamp: 'DA 5/21/2023 18:49:25'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCantAddPorfolioIfSharesSomeAccount stamp: 'DA 5/21/2023 18:49:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'DA 5/21/2023 18:49:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'DA 5/21/2023 18:49:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'DA 5/21/2023 18:49:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'DA 5/21/2023 18:49:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'DA 5/21/2023 18:49:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'DA 5/21/2023 18:49:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'DA 5/21/2023 18:49:26'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'DA 5/21/2023 18:50:51' prior: 50628773!
test03AddingMoreThanOneAccountTakeSumOfTheirBalance


	| anAccount otherAccount |
	anAccount := ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	
	otherAccount := ReceptiveAccount new.
	Deposit register: 200 on: otherAccount.
		
	self assert: (anAccount balance + otherAccount balance) equals: ((Portfolio with: anAccount with: otherAccount) balance).! !
!PortfolioTest methodsFor: 'tests' stamp: 'DA 5/21/2023 18:51:03' prior: 50628856!
test03AddingMoreThanOneAccountTakeSumOfTheirBalance

	| anAccount otherAccount |
	
	anAccount := ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	
	otherAccount := ReceptiveAccount new.
	Deposit register: 200 on: otherAccount.
		
	self assert: (anAccount balance + otherAccount balance) equals: ((Portfolio with: anAccount with: otherAccount) balance).! !
!PortfolioTest methodsFor: 'tests' stamp: 'DA 5/21/2023 18:52:00' prior: 50625811!
test04AddingEmptyPortfolioHaveBalanceCero

	|portfolio|
	
	portfolio := Portfolio new.

	self assert: 0 equals: ((Portfolio with: portfolio)balance).! !

!testRun: #PortfolioTest #test04AddingEmptyPortfolioHaveBalanceCero stamp: 'DA 5/21/2023 18:52:01'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'DA 5/21/2023 18:52:01'!
PASSED!

!testRun: #PortfolioTest #test02AddingOneAccountTakeTheirBalance stamp: 'DA 5/21/2023 18:52:02'!
PASSED!

!testRun: #PortfolioTest #test03AddingMoreThanOneAccountTakeSumOfTheirBalance stamp: 'DA 5/21/2023 18:52:02'!
PASSED!

!testRun: #PortfolioTest #test04AddingEmptyPortfolioHaveBalanceCero stamp: 'DA 5/21/2023 18:52:02'!
PASSED!

!testRun: #PortfolioTest #test05AddingPortfolioWithAccountHaveBalanceOfThatAccount stamp: 'DA 5/21/2023 18:52:02'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithoutAccountsHasNoRegisteredTransactions stamp: 'DA 5/21/2023 18:52:02'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasRegisteredTheirAccountTransactions stamp: 'DA 5/21/2023 18:52:02'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioCanLookTheirTransactionsRecursively stamp: 'DA 5/21/2023 18:52:02'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCantAddAccountIfWasAddedBefore stamp: 'DA 5/21/2023 18:52:02'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCantAddPorfolioIfSharesSomeAccount stamp: 'DA 5/21/2023 18:52:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'DA 5/21/2023 18:52:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'DA 5/21/2023 18:52:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'DA 5/21/2023 18:52:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'DA 5/21/2023 18:52:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'DA 5/21/2023 18:52:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'DA 5/21/2023 18:52:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'DA 5/21/2023 18:52:02'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'DA 5/21/2023 18:52:50' prior: 50625839!
test07PortfolioHasRegisteredTheirAccountTransactions
	|account transaction|
	account := ReceptiveAccount new.
	transaction := Deposit for: 100.
	
	account register: transaction.
	
	self assert: ((Portfolio with: account) hasRegistered: transaction). ! !
!PortfolioTest methodsFor: 'tests' stamp: 'DA 5/21/2023 18:55:46' prior: 50625851!
test08PortfolioCanLookTheirTransactionsRecursively
	|portfolio simpleAccount portfolioAccount depositTransaction withdrawTransaction|
	"portfolio1 := Portfolio new.
	portfolio2 := Portfolio new."
	
	simpleAccount := ReceptiveAccount new.
	depositTransaction := Deposit for: 100.
	simpleAccount register: depositTransaction.
	"portfolio1 add: simpleAccount."
	
	portfolioAccount := ReceptiveAccount new.
	withdrawTransaction:= Withdraw for: 50.
	portfolioAccount register: withdrawTransaction. 
	"
	portfolio2 add: portfolioAccount.
	portfolio1 add: portfolio2."
	
	portfolio := Portfolio with: simpleAccount with: (Portfolio with: portfolioAccount).
	self assert:2 equals: (portfolio transactions size).
	self assert: (portfolio hasRegistered: depositTransaction).
	self assert: (portfolio hasRegistered: withdrawTransaction). ! !

!testRun: #PortfolioTest #test08PortfolioCanLookTheirTransactionsRecursively stamp: 'DA 5/21/2023 18:55:48'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'DA 5/21/2023 18:55:48'!
PASSED!

!testRun: #PortfolioTest #test02AddingOneAccountTakeTheirBalance stamp: 'DA 5/21/2023 18:55:48'!
PASSED!

!testRun: #PortfolioTest #test03AddingMoreThanOneAccountTakeSumOfTheirBalance stamp: 'DA 5/21/2023 18:55:48'!
PASSED!

!testRun: #PortfolioTest #test04AddingEmptyPortfolioHaveBalanceCero stamp: 'DA 5/21/2023 18:55:48'!
PASSED!

!testRun: #PortfolioTest #test05AddingPortfolioWithAccountHaveBalanceOfThatAccount stamp: 'DA 5/21/2023 18:55:48'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithoutAccountsHasNoRegisteredTransactions stamp: 'DA 5/21/2023 18:55:48'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasRegisteredTheirAccountTransactions stamp: 'DA 5/21/2023 18:55:48'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioCanLookTheirTransactionsRecursively stamp: 'DA 5/21/2023 18:55:48'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCantAddAccountIfWasAddedBefore stamp: 'DA 5/21/2023 18:55:48'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCantAddPorfolioIfSharesSomeAccount stamp: 'DA 5/21/2023 18:55:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'DA 5/21/2023 18:55:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'DA 5/21/2023 18:55:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'DA 5/21/2023 18:55:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'DA 5/21/2023 18:55:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'DA 5/21/2023 18:55:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'DA 5/21/2023 18:55:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'DA 5/21/2023 18:55:48'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'DA 5/21/2023 18:56:06' prior: 50628971!
test08PortfolioCanLookTheirTransactionsRecursively
	|portfolio simpleAccount portfolioAccount depositTransaction withdrawTransaction|
	
	simpleAccount := ReceptiveAccount new.
	depositTransaction := Deposit for: 100.
	simpleAccount register: depositTransaction.
	
	portfolioAccount := ReceptiveAccount new.
	withdrawTransaction:= Withdraw for: 50.
	portfolioAccount register: withdrawTransaction. 
	
	portfolio := Portfolio with: simpleAccount with: (Portfolio with: portfolioAccount).
	
	self assert:2 equals: (portfolio transactions size).
	self assert: (portfolio hasRegistered: depositTransaction).
	self assert: (portfolio hasRegistered: withdrawTransaction). ! !
!PortfolioTest methodsFor: 'tests' stamp: 'DA 5/21/2023 18:56:32' prior: 50626848!
test09PortfolioCantAddAccountIfWasAddedBefore
	|account portfolio |
	
	account := ReceptiveAccount new.
	portfolio := Portfolio with: account.
	
	self 
	should: [ portfolio add: account ]
	raise: Error
	withExceptionDo: [ :anError |
		self assert: Portfolio cantAddErrorDescription equals: anError messageText.
		self assert: 1 equals: portfolio accountsSize.
		self assert: (portfolio hasAccount: account)]! !

!testRun: #PortfolioTest #test09PortfolioCantAddAccountIfWasAddedBefore stamp: 'DA 5/21/2023 18:56:34'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'DA 5/21/2023 18:56:34'!
PASSED!

!testRun: #PortfolioTest #test02AddingOneAccountTakeTheirBalance stamp: 'DA 5/21/2023 18:56:34'!
PASSED!

!testRun: #PortfolioTest #test03AddingMoreThanOneAccountTakeSumOfTheirBalance stamp: 'DA 5/21/2023 18:56:34'!
PASSED!

!testRun: #PortfolioTest #test04AddingEmptyPortfolioHaveBalanceCero stamp: 'DA 5/21/2023 18:56:34'!
PASSED!

!testRun: #PortfolioTest #test05AddingPortfolioWithAccountHaveBalanceOfThatAccount stamp: 'DA 5/21/2023 18:56:34'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithoutAccountsHasNoRegisteredTransactions stamp: 'DA 5/21/2023 18:56:34'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasRegisteredTheirAccountTransactions stamp: 'DA 5/21/2023 18:56:34'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioCanLookTheirTransactionsRecursively stamp: 'DA 5/21/2023 18:56:34'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCantAddAccountIfWasAddedBefore stamp: 'DA 5/21/2023 18:56:34'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCantAddPorfolioIfSharesSomeAccount stamp: 'DA 5/21/2023 18:56:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'DA 5/21/2023 18:56:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'DA 5/21/2023 18:56:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'DA 5/21/2023 18:56:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'DA 5/21/2023 18:56:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'DA 5/21/2023 18:56:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'DA 5/21/2023 18:56:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'DA 5/21/2023 18:56:34'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'DA 5/21/2023 19:00:19' prior: 50628606!
test10PortfolioCantAddPorfolioIfSharesSomeAccount
	|account portfolio childPortfolio otherPortfolio |
	account := ReceptiveAccount new.
	
	childPortfolio := Portfolio with: account.
	portfolio := Portfolio with: childPortfolio.
	otherPortfolio := Portfolio with: account.
	
	self 
	should: [childPortfolio add: otherPortfolio]
	raise: Error
	withExceptionDo: [ :anError |
		self assert: Portfolio cantAddErrorDescription equals: anError messageText.
		self assert: 1 equals: childPortfolio accountsSize.
		self deny: (childPortfolio hasAccount: otherPortfolio).
		self assert: (childPortfolio hasAccount: account)]! !
!PortfolioTest methodsFor: 'tests' stamp: 'DA 5/21/2023 19:00:35' prior: 50629172!
test10PortfolioCantAddPorfolioIfSharesSomeAccount
	|account portfolio childPortfolio otherPortfolio |
	account := ReceptiveAccount new.
	
	childPortfolio := Portfolio with: account.
	portfolio := Portfolio with: childPortfolio.
	otherPortfolio := Portfolio with: account.
	
	self 
	should: [childPortfolio add: otherPortfolio]
	raise: Error
	withExceptionDo: [ :anError |
		self assert: Portfolio cantAddErrorDescription equals: anError messageText.
		self assert: 1 equals: portfolio accountsSize.
		self deny: (childPortfolio hasAccount: otherPortfolio).
		self assert: (childPortfolio hasAccount: account)]! !

!testRun: #PortfolioTest #test10PortfolioCantAddPorfolioIfSharesSomeAccount stamp: 'DA 5/21/2023 19:00:36'!
FAILURE!
!PortfolioTest methodsFor: 'tests' stamp: 'DA 5/21/2023 19:01:17' prior: 50629194!
test10PortfolioCantAddPorfolioIfSharesSomeAccount
	|account portfolio childPortfolio otherPortfolio |
	account := ReceptiveAccount new.
	
	childPortfolio := Portfolio with: account.
	portfolio := Portfolio with: childPortfolio.
	otherPortfolio := Portfolio with: account.
	
	self 
	should: [childPortfolio add: otherPortfolio]
	raise: Error
	withExceptionDo: [ :anError |
		self assert: Portfolio cantAddErrorDescription equals: anError messageText.
		self assert: 1 equals: childPortfolio accountsSize.
		self deny: (childPortfolio hasAccount: otherPortfolio).
		self assert: (childPortfolio hasAccount: account)]! !

!testRun: #PortfolioTest #test10PortfolioCantAddPorfolioIfSharesSomeAccount stamp: 'DA 5/21/2023 19:01:20'!
FAILURE!
!PortfolioTest methodsFor: 'tests' stamp: 'DA 5/21/2023 19:02:42' prior: 50629220!
test10PortfolioCantAddPorfolioIfSharesSomeAccount
	|account portfolio childPortfolio otherPortfolio |
	account := ReceptiveAccount new.
	
	childPortfolio := Portfolio with: account.
	portfolio := Portfolio new add: childPortfolio.
	otherPortfolio := Portfolio with: account.
	
	self 
	should: [childPortfolio add: otherPortfolio]
	raise: Error
	withExceptionDo: [ :anError |
		self assert: Portfolio cantAddErrorDescription equals: anError messageText.
		self assert: 1 equals: childPortfolio accountsSize.
		self deny: (childPortfolio hasAccount: otherPortfolio).
		self assert: (childPortfolio hasAccount: account)]! !

!testRun: #PortfolioTest #test10PortfolioCantAddPorfolioIfSharesSomeAccount stamp: 'DA 5/21/2023 19:02:45'!
FAILURE!
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'DA 5/21/2023 19:03:08' prior: 50628684!
with: anAccount
	^ self new add: anAccount! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'DA 5/21/2023 19:03:18' prior: 50628767!
with: anAccount with: otherAccount
	^ (self new add: anAccount) add: otherAccount.! !

!methodRemoval: Portfolio #initializeWith: stamp: 'DA 5/21/2023 19:03:26'!
initializeWith: anAccount
	accounts :=  OrderedCollection with: anAccount.
	parents := OrderedCollection new. !

!testRun: #PortfolioTest #test07PortfolioHasRegisteredTheirAccountTransactions stamp: 'DA 5/21/2023 19:03:33'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'DA 5/21/2023 19:03:33'!
PASSED!

!testRun: #PortfolioTest #test02AddingOneAccountTakeTheirBalance stamp: 'DA 5/21/2023 19:03:34'!
PASSED!

!testRun: #PortfolioTest #test03AddingMoreThanOneAccountTakeSumOfTheirBalance stamp: 'DA 5/21/2023 19:03:34'!
PASSED!

!testRun: #PortfolioTest #test04AddingEmptyPortfolioHaveBalanceCero stamp: 'DA 5/21/2023 19:03:34'!
PASSED!

!testRun: #PortfolioTest #test05AddingPortfolioWithAccountHaveBalanceOfThatAccount stamp: 'DA 5/21/2023 19:03:34'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithoutAccountsHasNoRegisteredTransactions stamp: 'DA 5/21/2023 19:03:34'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasRegisteredTheirAccountTransactions stamp: 'DA 5/21/2023 19:03:34'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioCanLookTheirTransactionsRecursively stamp: 'DA 5/21/2023 19:03:34'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCantAddAccountIfWasAddedBefore stamp: 'DA 5/21/2023 19:03:34'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCantAddPorfolioIfSharesSomeAccount stamp: 'DA 5/21/2023 19:03:34'!
FAILURE!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'DA 5/21/2023 19:03:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'DA 5/21/2023 19:03:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'DA 5/21/2023 19:03:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'DA 5/21/2023 19:03:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'DA 5/21/2023 19:03:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'DA 5/21/2023 19:03:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'DA 5/21/2023 19:03:34'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCantAddPorfolioIfSharesSomeAccount stamp: 'DA 5/21/2023 19:03:34'!
FAILURE!
!PortfolioTest methodsFor: 'tests' stamp: 'DA 5/21/2023 19:04:40' prior: 50625820!
test05AddingPortfolioWithAccountHaveBalanceOfThatAccount

	|portfolio account|
	
	account := ReceptiveAccount new.
	Deposit register: 50 on: account.
	
	portfolio := Portfolio with: (Portfolio with: account).
	
	self assert: (account balance) equals: portfolio balance.! !

!testRun: #PortfolioTest #test05AddingPortfolioWithAccountHaveBalanceOfThatAccount stamp: 'DA 5/21/2023 19:04:41'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'DA 5/21/2023 19:04:41'!
PASSED!

!testRun: #PortfolioTest #test02AddingOneAccountTakeTheirBalance stamp: 'DA 5/21/2023 19:04:41'!
PASSED!

!testRun: #PortfolioTest #test03AddingMoreThanOneAccountTakeSumOfTheirBalance stamp: 'DA 5/21/2023 19:04:41'!
PASSED!

!testRun: #PortfolioTest #test04AddingEmptyPortfolioHaveBalanceCero stamp: 'DA 5/21/2023 19:04:41'!
PASSED!

!testRun: #PortfolioTest #test05AddingPortfolioWithAccountHaveBalanceOfThatAccount stamp: 'DA 5/21/2023 19:04:41'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithoutAccountsHasNoRegisteredTransactions stamp: 'DA 5/21/2023 19:04:41'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasRegisteredTheirAccountTransactions stamp: 'DA 5/21/2023 19:04:41'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioCanLookTheirTransactionsRecursively stamp: 'DA 5/21/2023 19:04:41'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCantAddAccountIfWasAddedBefore stamp: 'DA 5/21/2023 19:04:41'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCantAddPorfolioIfSharesSomeAccount stamp: 'DA 5/21/2023 19:04:41'!
FAILURE!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'DA 5/21/2023 19:04:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'DA 5/21/2023 19:04:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'DA 5/21/2023 19:04:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'DA 5/21/2023 19:04:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'DA 5/21/2023 19:04:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'DA 5/21/2023 19:04:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'DA 5/21/2023 19:04:41'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCantAddPorfolioIfSharesSomeAccount stamp: 'DA 5/21/2023 19:04:42'!
FAILURE!

!testRun: #PortfolioTest #test10PortfolioCantAddPorfolioIfSharesSomeAccount stamp: 'DA 5/21/2023 19:05:09'!
FAILURE!
!PortfolioTest methodsFor: 'tests' stamp: 'DA 5/21/2023 19:05:35' prior: 50629246!
test10PortfolioCantAddPorfolioIfSharesSomeAccount
	|account portfolio childPortfolio otherPortfolio |
	account := ReceptiveAccount new.
	
	childPortfolio := Portfolio with: account.
	portfolio := Portfolio with: childPortfolio.
	otherPortfolio := Portfolio with: account.
	
	self 
	should: [childPortfolio add: otherPortfolio]
	raise: Error
	withExceptionDo: [ :anError |
		self assert: Portfolio cantAddErrorDescription equals: anError messageText.
		self assert: 1 equals: childPortfolio accountsSize.
		self deny: (childPortfolio hasAccount: otherPortfolio).
		self assert: (childPortfolio hasAccount: account)]! !

!testRun: #PortfolioTest #test10PortfolioCantAddPorfolioIfSharesSomeAccount stamp: 'DA 5/21/2023 19:05:39'!
FAILURE!
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'DA 5/21/2023 19:06:32' prior: 50629278!
with: anAccount with: otherAccount
	^ (self new add: anAccount) add: otherAccount.! !

!testRun: #PortfolioTest #test10PortfolioCantAddPorfolioIfSharesSomeAccount stamp: 'DA 5/21/2023 19:08:28'!
FAILURE!
!Portfolio class methodsFor: 'instance creation' stamp: 'DA 5/21/2023 19:10:29' prior: 50629473!
with: anAccount with: otherAccount
	^ (self with: anAccount) add: otherAccount.! !

!testRun: #PortfolioTest #test10PortfolioCantAddPorfolioIfSharesSomeAccount stamp: 'DA 5/21/2023 19:10:44'!
FAILURE!

!methodRemoval: Portfolio class #with:with: stamp: 'DA 5/21/2023 19:11:05'!
with: anAccount with: otherAccount
	^ (self with: anAccount) add: otherAccount.!
!PortfolioTest methodsFor: 'tests' stamp: 'DA 5/21/2023 19:11:41' prior: 50628871!
test03AddingMoreThanOneAccountTakeSumOfTheirBalance

	| anAccount otherAccount |
	
	anAccount := ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	
	otherAccount := ReceptiveAccount new.
	Deposit register: 200 on: otherAccount.
		
	self assert: (anAccount balance + otherAccount balance) equals: ((Portfolio with: anAccount) add: otherAccount) balance.! !
!PortfolioTest methodsFor: 'tests' stamp: 'DA 5/21/2023 19:12:07' prior: 50629066!
test08PortfolioCanLookTheirTransactionsRecursively
	|portfolio simpleAccount portfolioAccount depositTransaction withdrawTransaction|
	
	simpleAccount := ReceptiveAccount new.
	depositTransaction := Deposit for: 100.
	simpleAccount register: depositTransaction.
	
	portfolioAccount := ReceptiveAccount new.
	withdrawTransaction:= Withdraw for: 50.
	portfolioAccount register: withdrawTransaction. 
	
	portfolio := (Portfolio with: simpleAccount) add: (Portfolio with: portfolioAccount).
	
	self assert: 2 equals: (portfolio transactions size).
	self assert: (portfolio hasRegistered: depositTransaction).
	self assert: (portfolio hasRegistered: withdrawTransaction). ! !

!testRun: #PortfolioTest #test10PortfolioCantAddPorfolioIfSharesSomeAccount stamp: 'DA 5/21/2023 19:12:27'!
FAILURE!
!ReceptiveAccount methodsFor: 'adding' stamp: 'DA 5/21/2023 19:19:34' prior: 50628387 overrides: 50626004!
registerParent: aParent
	parents add: aParent.
! !

!testRun: #PortfolioTest #test10PortfolioCantAddPorfolioIfSharesSomeAccount stamp: 'DA 5/21/2023 19:19:46'!
FAILURE!

!testRun: #PortfolioTest #test10PortfolioCantAddPorfolioIfSharesSomeAccount stamp: 'DA 5/21/2023 19:19:52'!
FAILURE!
!PortfolioTest methodsFor: 'tests' stamp: 'DA 5/21/2023 19:22:24' prior: 50629446!
test10PortfolioCantAddPorfolioIfSharesSomeAccount
	|account portfolio childPortfolio otherPortfolio |
	account := ReceptiveAccount new.
	account := ReceptiveAccount new.
	
	
	childPortfolio := Portfolio with: account.
	portfolio := Portfolio with: childPortfolio.
	otherPortfolio := Portfolio with: account.
	
	self 
	should: [childPortfolio add: otherPortfolio]
	raise: Error
	withExceptionDo: [ :anError |
		self assert: Portfolio cantAddErrorDescription equals: anError messageText.
		self assert: 1 equals: childPortfolio accountsSize.
		self deny: (childPortfolio hasAccount: otherPortfolio).
		self assert: (childPortfolio hasAccount: account)]! !
!PortfolioTest methodsFor: 'tests' stamp: 'DA 5/21/2023 19:22:45' prior: 50629552!
test10PortfolioCantAddPorfolioIfSharesSomeAccount
	|account portfolio childPortfolio otherPortfolio |
	account := ReceptiveAccount new.
	
	childPortfolio := Portfolio with: account.
	portfolio := Portfolio with: childPortfolio.
	otherPortfolio := Portfolio with: account.
	
	self 
	should: [childPortfolio add: otherPortfolio]
	raise: Error
	withExceptionDo: [ :anError |
		self assert: Portfolio cantAddErrorDescription equals: anError messageText.
		self assert: 1 equals: childPortfolio accountsSize.
		self deny: (childPortfolio hasAccount: otherPortfolio).
		self assert: (childPortfolio hasAccount: account)]! !

!testRun: #PortfolioTest #test10PortfolioCantAddPorfolioIfSharesSomeAccount stamp: 'DA 5/21/2023 19:23:18'!
FAILURE!
!PortfolioTest methodsFor: 'tests' stamp: 'DA 5/21/2023 19:25:14' prior: 50629576!
test10PortfolioCantAddPorfolioIfSharesSomeAccount
	|account temp portfolio childPortfolio otherPortfolio |
	account := ReceptiveAccount new.
	
	childPortfolio := Portfolio with: account.
	portfolio := Portfolio with: childPortfolio.
	otherPortfolio := Portfolio with: account.
	
	temp := childPortfolio add: otherPortfolio.
	self 
	should: [childPortfolio add: otherPortfolio]
	raise: Error
	withExceptionDo: [ :anError |
		self assert: Portfolio cantAddErrorDescription equals: anError messageText.
		self assert: 1 equals: childPortfolio accountsSize.
		self deny: (childPortfolio hasAccount: otherPortfolio).
		self assert: (childPortfolio hasAccount: account)]! !
!Portfolio methodsFor: 'assertions' stamp: 'DA 5/21/2023 19:26:03' prior: 50628270!
assertCantAdd: anAccount 
	parents do: [:aParent | aParent assertCantAdd: anAccount].
	((self = anAccount) or: [self hasAccount: anAccount])  ifTrue: [^self error: Portfolio cantAddErrorDescription].
! !
!ReceptiveAccount methodsFor: 'adding' stamp: 'DA 5/21/2023 19:33:14' prior: 50629540 overrides: 50626004!
registerParent: aParent
	"parents add: aParent."
! !

Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #ReceptiveAccount category: 'Portfolio-Ejercicio' stamp: 'DA 5/21/2023 19:33:25'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!testRun: #PortfolioTest #test10PortfolioCantAddPorfolioIfSharesSomeAccount stamp: 'DA 5/21/2023 19:33:47'!
FAILURE!

!classDefinition: #ReceptiveAccount category: 'Portfolio-Ejercicio' stamp: 'DA 5/21/2023 19:34:20'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!ReceptiveAccount methodsFor: 'adding' stamp: 'DA 5/21/2023 19:34:16' prior: 50629636 overrides: 50626004!
registerParent: aParent
	parents add: aParent.
! !
!PortfolioTest methodsFor: 'tests' stamp: 'DA 5/21/2023 19:34:48' prior: 50629602!
test10PortfolioCantAddPorfolioIfSharesSomeAccount
	|account temp portfolio childPortfolio otherPortfolio |
	account := ReceptiveAccount new.
	
	childPortfolio := Portfolio with: account.
	portfolio := Portfolio with: childPortfolio.
	otherPortfolio := Portfolio with: account.
	
	temp := childPortfolio add: otherPortfolio.
	
	self 
	should: [childPortfolio add: otherPortfolio]
	raise: Error
	withExceptionDo: [ :anError |
		self assert: Portfolio cantAddErrorDescription equals: anError messageText.
		self assert: 1 equals: childPortfolio accountsSize.
		self deny: (childPortfolio hasAccount: otherPortfolio).
		self assert: (childPortfolio hasAccount: account)]! !
!PortfolioTest methodsFor: 'tests' stamp: 'DA 5/21/2023 19:37:23' prior: 50629671!
test10PortfolioCantAddPorfolioIfSharesSomeAccount
	|account account2 temp portfolio childPortfolio otherPortfolio |
	account := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	childPortfolio := Portfolio with: account.
	portfolio := Portfolio with: childPortfolio.
	otherPortfolio := Portfolio with: account2.
	
	temp := childPortfolio add: otherPortfolio.
	
	self 
	should: [childPortfolio add: otherPortfolio]
	raise: Error
	withExceptionDo: [ :anError |
		self assert: Portfolio cantAddErrorDescription equals: anError messageText.
		self assert: 1 equals: childPortfolio accountsSize.
		self deny: (childPortfolio hasAccount: otherPortfolio).
		self assert: (childPortfolio hasAccount: account)]! !

!testRun: #PortfolioTest #test10PortfolioCantAddPorfolioIfSharesSomeAccount stamp: 'DA 5/21/2023 19:37:26'!
FAILURE!
!PortfolioTest methodsFor: 'tests' stamp: 'DA 5/21/2023 19:37:40' prior: 50629695!
test10PortfolioCantAddPorfolioIfSharesSomeAccount
	|account account2 temp portfolio childPortfolio otherPortfolio |
	account := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	childPortfolio := Portfolio with: account.
	portfolio := Portfolio with: childPortfolio.
	otherPortfolio := Portfolio with: account2.
	
	"temp := childPortfolio add: otherPortfolio."
	
	self 
	should: [childPortfolio add: otherPortfolio]
	raise: Error
	withExceptionDo: [ :anError |
		self assert: Portfolio cantAddErrorDescription equals: anError messageText.
		self assert: 1 equals: childPortfolio accountsSize.
		self deny: (childPortfolio hasAccount: otherPortfolio).
		self assert: (childPortfolio hasAccount: account)]! !

!testRun: #PortfolioTest #test10PortfolioCantAddPorfolioIfSharesSomeAccount stamp: 'DA 5/21/2023 19:37:44'!
FAILURE!
!PortfolioTest methodsFor: 'tests' stamp: 'DA 5/21/2023 19:38:04' prior: 50629724!
test10PortfolioCantAddPorfolioIfSharesSomeAccount
	|account account2 temp portfolio childPortfolio otherPortfolio |
	account := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	childPortfolio := Portfolio with: account.
	portfolio := Portfolio with: childPortfolio.
	otherPortfolio := Portfolio with: account2.
	
	"temp := childPortfolio add: otherPortfolio."
	
	self 
	should: [childPortfolio add: otherPortfolio]
	raise: Error
	withExceptionDo: [ :anError |
		self assert: Portfolio cantAddErrorDescription equals: anError messageText.
		"self assert: 1 equals: childPortfolio accountsSize."
		self deny: (childPortfolio hasAccount: otherPortfolio).
		self assert: (childPortfolio hasAccount: account)]! !

!testRun: #PortfolioTest #test10PortfolioCantAddPorfolioIfSharesSomeAccount stamp: 'DA 5/21/2023 19:38:08'!
FAILURE!
!PortfolioTest methodsFor: 'tests' stamp: 'DA 5/21/2023 19:38:45' prior: 50629753!
test10PortfolioCantAddPorfolioIfSharesSomeAccount
	|account account2 temp portfolio childPortfolio otherPortfolio |
	account := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	childPortfolio := Portfolio with: account.
	portfolio := Portfolio with: childPortfolio.
	otherPortfolio := Portfolio with: account2.
	
	"temp := childPortfolio add: otherPortfolio."
	
	self 
	should: [childPortfolio add: otherPortfolio]
	raise: Error
	withExceptionDo: [ :anError |
		self assert: Portfolio cantAddErrorDescription equals: anError messageText.
		"self assert: 1 equals: childPortfolio accountsSize."
		self deny: (childPortfolio hasAccount: otherPortfolio).
		"self assert: (childPortfolio hasAccount: account)"]! !

!testRun: #PortfolioTest #test10PortfolioCantAddPorfolioIfSharesSomeAccount stamp: 'DA 5/21/2023 19:38:49'!
FAILURE!
!PortfolioTest methodsFor: 'tests' stamp: 'DA 5/21/2023 19:38:57' prior: 50629782!
test10PortfolioCantAddPorfolioIfSharesSomeAccount
	|account account2 temp portfolio childPortfolio otherPortfolio |
	account := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	childPortfolio := Portfolio with: account.
	portfolio := Portfolio with: childPortfolio.
	otherPortfolio := Portfolio with: account2.
	
	"temp := childPortfolio add: otherPortfolio."
	
	self 
	should: [childPortfolio add: otherPortfolio]
	raise: Error
	withExceptionDo: [ :anError |
		self assert: Portfolio cantAddErrorDescription equals: anError messageText.
		"self assert: 1 equals: childPortfolio accountsSize."
		"self deny: (childPortfolio hasAccount: otherPortfolio)".
		"self assert: (childPortfolio hasAccount: account)"]! !

!testRun: #PortfolioTest #test10PortfolioCantAddPorfolioIfSharesSomeAccount stamp: 'DA 5/21/2023 19:39:01'!
FAILURE!
!PortfolioTest methodsFor: 'tests' stamp: 'DA 5/21/2023 19:42:49' prior: 50629811!
test10PortfolioCantAddPorfolioIfSharesSomeAccount
	|account temp portfolio childPortfolio otherPortfolio |
	account := ReceptiveAccount new.
	
	childPortfolio := Portfolio with: account.
	portfolio := Portfolio with: childPortfolio.
	otherPortfolio := Portfolio with: account.
	
	"temp := childPortfolio add: otherPortfolio."
	
	self 
	should: [childPortfolio add: otherPortfolio]
	raise: Error
	withExceptionDo: [ :anError |
		self assert: Portfolio cantAddErrorDescription equals: anError messageText.
		self assert: 1 equals: childPortfolio accountsSize.
		self deny: (childPortfolio hasAccount: otherPortfolio).
		self assert: (childPortfolio hasAccount: account)]! !


!testRun: #PortfolioTest #test10PortfolioCantAddPorfolioIfSharesSomeAccount stamp: 'DA 5/21/2023 21:04:58'!
FAILURE!
!PortfolioTest methodsFor: 'tests' stamp: 'DA 5/21/2023 21:05:13' prior: 50626527!
test09PortfolioCantAddAccountIfWasAddedBefore
	|account portfolio |
	portfolio := Portfolio new.
	
	account := ReceptiveAccount new.
	portfolio add: account.
	
	"temp := portfolio add: account."
	
	self 
	should: [ portfolio add: account ]
	raise: Error
	withExceptionDo: [ :anError |
		self assert: Portfolio cantAddAccountDescription equals: anError messageText.
		self assert: 1 equals: portfolio accountsSize.
		self assert: (portfolio hasAccount: account)]! !

!testRun: #PortfolioTest #test10PortfolioCantAddPorfolioIfSharesSomeAccount stamp: 'DA 5/21/2023 21:05:24'!
FAILURE!
!PortfolioTest methodsFor: 'tests' stamp: 'DA 5/21/2023 21:05:50' prior: 50626666!
test09PortfolioCantAddAccountIfWasAddedBefore
	|account portfolio |
	portfolio := Portfolio new.
	
	account := ReceptiveAccount new.
	portfolio add: account.
	
	"temp := portfolio add: account."
	
	self 
	should: [ portfolio add: account ]
	raise: Error
	withExceptionDo: [ :anError |
		self assert: Portfolio cantAddErrorDescription equals: anError messageText.
		self assert: 1 equals: portfolio accountsSize.
		self assert: (portfolio hasAccount: account)]! !

!testRun: #PortfolioTest #test09PortfolioCantAddAccountIfWasAddedBefore stamp: 'DA 5/21/2023 21:05:51'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'DA 5/21/2023 21:05:51'!
PASSED!

!testRun: #PortfolioTest #test02AddingOneAccountTakeTheirBalance stamp: 'DA 5/21/2023 21:05:51'!
PASSED!

!testRun: #PortfolioTest #test03AddingMoreThanOneAccountTakeSumOfTheirBalance stamp: 'DA 5/21/2023 21:05:51'!
PASSED!

!testRun: #PortfolioTest #test04AddingEmptyPortfolioHaveBalanceCero stamp: 'DA 5/21/2023 21:05:51'!
PASSED!

!testRun: #PortfolioTest #test05AddingPortfolioWithAccountHaveBalanceOfThatAccount stamp: 'DA 5/21/2023 21:05:51'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithoutAccountsHasNoRegisteredTransactions stamp: 'DA 5/21/2023 21:05:52'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasRegisteredTheirAccountTransactions stamp: 'DA 5/21/2023 21:05:52'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioCanLookTheirTransactionsRecursively stamp: 'DA 5/21/2023 21:05:52'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCantAddAccountIfWasAddedBefore stamp: 'DA 5/21/2023 21:05:52'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCantAddPorfolioIfSharesSomeAccount stamp: 'DA 5/21/2023 21:05:52'!
FAILURE!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'DA 5/21/2023 21:05:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'DA 5/21/2023 21:05:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'DA 5/21/2023 21:05:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'DA 5/21/2023 21:05:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'DA 5/21/2023 21:05:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'DA 5/21/2023 21:05:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'DA 5/21/2023 21:05:52'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCantAddPorfolioIfSharesSomeAccount stamp: 'DA 5/21/2023 21:05:52'!
FAILURE!
!PortfolioTest methodsFor: 'tests' stamp: 'DA 5/21/2023 21:06:08' prior: 50626687!
test09PortfolioCantAddAccountIfWasAddedBefore
	|account portfolio |
	portfolio := Portfolio new.
	
	account := ReceptiveAccount new.
	portfolio add: account.
	
	self 
	should: [ portfolio add: account ]
	raise: Error
	withExceptionDo: [ :anError |
		self assert: Portfolio cantAddErrorDescription equals: anError messageText.
		self assert: 1 equals: portfolio accountsSize.
		self assert: (portfolio hasAccount: account)]! !

Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #ReceptiveAccount category: 'Portfolio-Ejercicio' stamp: 'DA 5/21/2023 21:06:21'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'DA 5/21/2023 21:06:33' prior: 50626169 overrides: 50626004!
registerParent: aParent
	parents add: aParent
! !
!ReceptiveAccount methodsFor: 'initialization' stamp: 'DA 5/21/2023 21:06:49' prior: 50626123 overrides: 16920235!
initialize
	parents := OrderedCollection new.
	transactions := OrderedCollection new.! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'DA 5/21/2023 21:06:49'!
PASSED!

!testRun: #PortfolioTest #test02AddingOneAccountTakeTheirBalance stamp: 'DA 5/21/2023 21:06:49'!
PASSED!

!testRun: #PortfolioTest #test03AddingMoreThanOneAccountTakeSumOfTheirBalance stamp: 'DA 5/21/2023 21:06:49'!
PASSED!

!testRun: #PortfolioTest #test04AddingEmptyPortfolioHaveBalanceCero stamp: 'DA 5/21/2023 21:06:49'!
PASSED!

!testRun: #PortfolioTest #test05AddingPortfolioWithAccountHaveBalanceOfThatAccount stamp: 'DA 5/21/2023 21:06:50'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithoutAccountsHasNoRegisteredTransactions stamp: 'DA 5/21/2023 21:06:50'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasRegisteredTheirAccountTransactions stamp: 'DA 5/21/2023 21:06:50'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioCanLookTheirTransactionsRecursively stamp: 'DA 5/21/2023 21:06:50'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCantAddAccountIfWasAddedBefore stamp: 'DA 5/21/2023 21:06:50'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCantAddPorfolioIfSharesSomeAccount stamp: 'DA 5/21/2023 21:06:50'!
FAILURE!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'DA 5/21/2023 21:06:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'DA 5/21/2023 21:06:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'DA 5/21/2023 21:06:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'DA 5/21/2023 21:06:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'DA 5/21/2023 21:06:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'DA 5/21/2023 21:06:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'DA 5/21/2023 21:06:50'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCantAddPorfolioIfSharesSomeAccount stamp: 'DA 5/21/2023 21:06:50'!
FAILURE!
!Portfolio methodsFor: 'assertions' stamp: 'DA 5/21/2023 21:08:19' prior: 50626507!
cantAdd: anAccount 
	parents do: [:aParent | aParent cantAdd: anAccount].
	^((self = anAccount) or: [self hasAccount: anAccount]) 
"
	(parents isEmpty) ifTrue: [^ accounts anySatisfy: [ :account | account hasAccount: anAccount ].]
				     ifFalse: [parents inject: true into:[:res :parent | res & parent cantAdd: anAccount]].  "! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'DA 5/21/2023 21:08:20'!
PASSED!

!testRun: #PortfolioTest #test02AddingOneAccountTakeTheirBalance stamp: 'DA 5/21/2023 21:08:20'!
PASSED!

!testRun: #PortfolioTest #test03AddingMoreThanOneAccountTakeSumOfTheirBalance stamp: 'DA 5/21/2023 21:08:20'!
PASSED!

!testRun: #PortfolioTest #test04AddingEmptyPortfolioHaveBalanceCero stamp: 'DA 5/21/2023 21:08:20'!
PASSED!

!testRun: #PortfolioTest #test05AddingPortfolioWithAccountHaveBalanceOfThatAccount stamp: 'DA 5/21/2023 21:08:21'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithoutAccountsHasNoRegisteredTransactions stamp: 'DA 5/21/2023 21:08:21'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasRegisteredTheirAccountTransactions stamp: 'DA 5/21/2023 21:08:21'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioCanLookTheirTransactionsRecursively stamp: 'DA 5/21/2023 21:08:21'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCantAddAccountIfWasAddedBefore stamp: 'DA 5/21/2023 21:08:21'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCantAddPorfolioIfSharesSomeAccount stamp: 'DA 5/21/2023 21:08:21'!
FAILURE!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'DA 5/21/2023 21:08:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'DA 5/21/2023 21:08:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'DA 5/21/2023 21:08:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'DA 5/21/2023 21:08:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'DA 5/21/2023 21:08:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'DA 5/21/2023 21:08:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'DA 5/21/2023 21:08:21'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCantAddPorfolioIfSharesSomeAccount stamp: 'DA 5/21/2023 21:08:21'!
FAILURE!
!Portfolio methodsFor: 'category-name' stamp: 'DA 5/21/2023 21:09:46' prior: 50626054 overrides: 50625994!
hasAccount: anAccount 
	^ (accounts includes: anAccount) or:
	(accounts anySatisfy: [:account | account hasAccount: anAccount]).! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'DA 5/21/2023 21:09:47'!
PASSED!

!testRun: #PortfolioTest #test02AddingOneAccountTakeTheirBalance stamp: 'DA 5/21/2023 21:09:47'!
PASSED!

!testRun: #PortfolioTest #test03AddingMoreThanOneAccountTakeSumOfTheirBalance stamp: 'DA 5/21/2023 21:09:47'!
PASSED!

!testRun: #PortfolioTest #test04AddingEmptyPortfolioHaveBalanceCero stamp: 'DA 5/21/2023 21:09:47'!
PASSED!

!testRun: #PortfolioTest #test05AddingPortfolioWithAccountHaveBalanceOfThatAccount stamp: 'DA 5/21/2023 21:09:47'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithoutAccountsHasNoRegisteredTransactions stamp: 'DA 5/21/2023 21:09:47'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasRegisteredTheirAccountTransactions stamp: 'DA 5/21/2023 21:09:47'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioCanLookTheirTransactionsRecursively stamp: 'DA 5/21/2023 21:09:47'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCantAddAccountIfWasAddedBefore stamp: 'DA 5/21/2023 21:09:47'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCantAddPorfolioIfSharesSomeAccount stamp: 'DA 5/21/2023 21:09:47'!
FAILURE!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'DA 5/21/2023 21:09:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'DA 5/21/2023 21:09:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'DA 5/21/2023 21:09:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'DA 5/21/2023 21:09:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'DA 5/21/2023 21:09:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'DA 5/21/2023 21:09:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'DA 5/21/2023 21:09:48'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCantAddPorfolioIfSharesSomeAccount stamp: 'DA 5/21/2023 21:09:48'!
FAILURE!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'DA 5/21/2023 21:11:06' prior: 50626410 overrides: 50625994!
hasAccount: anAccount
	^false! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'DA 5/21/2023 21:11:07'!
PASSED!

!testRun: #PortfolioTest #test02AddingOneAccountTakeTheirBalance stamp: 'DA 5/21/2023 21:11:07'!
PASSED!

!testRun: #PortfolioTest #test03AddingMoreThanOneAccountTakeSumOfTheirBalance stamp: 'DA 5/21/2023 21:11:07'!
PASSED!

!testRun: #PortfolioTest #test04AddingEmptyPortfolioHaveBalanceCero stamp: 'DA 5/21/2023 21:11:07'!
PASSED!

!testRun: #PortfolioTest #test05AddingPortfolioWithAccountHaveBalanceOfThatAccount stamp: 'DA 5/21/2023 21:11:07'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithoutAccountsHasNoRegisteredTransactions stamp: 'DA 5/21/2023 21:11:07'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasRegisteredTheirAccountTransactions stamp: 'DA 5/21/2023 21:11:07'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioCanLookTheirTransactionsRecursively stamp: 'DA 5/21/2023 21:11:07'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCantAddAccountIfWasAddedBefore stamp: 'DA 5/21/2023 21:11:07'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCantAddPorfolioIfSharesSomeAccount stamp: 'DA 5/21/2023 21:11:07'!
FAILURE!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'DA 5/21/2023 21:11:07'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'DA 5/21/2023 21:11:07'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'DA 5/21/2023 21:11:07'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'DA 5/21/2023 21:11:07'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'DA 5/21/2023 21:11:07'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'DA 5/21/2023 21:11:07'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'DA 5/21/2023 21:11:07'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCantAddPorfolioIfSharesSomeAccount stamp: 'DA 5/21/2023 21:11:07'!
FAILURE!
!PortfolioTest methodsFor: 'tests' stamp: 'DA 5/21/2023 21:12:32' prior: 50626635!
test10PortfolioCantAddPorfolioIfSharesSomeAccount
	|account portfolio1 portfolio2 portfolio3|
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	
	account := ReceptiveAccount new.
	portfolio1 add: account.
	portfolio2 add: account.
	portfolio3 add: portfolio2.
	
	self 
	should: [ portfolio2 add: portfolio1]
	raise: Error
	withExceptionDo: [ :anError |
		self assert: Portfolio cantAddErrorDescription equals: anError messageText.
		self assert: 1 equals: portfolio2 accountsSize.
		self assert: (portfolio2 hasAccount: account)]! !

!testRun: #PortfolioTest #test10PortfolioCantAddPorfolioIfSharesSomeAccount stamp: 'DA 5/21/2023 21:12:34'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'DA 5/21/2023 21:13:26' prior: 50626615!
add: anAccount 
	"(self cantAdd: anAccount) ifTrue: [^self error: self class cantAddErrorDescription]."
	self assertCantAdd: anAccount.
	accounts add: anAccount.
	anAccount registerParent: self. ! !
!Portfolio methodsFor: 'assertions' stamp: 'DA 5/21/2023 21:13:48'!
assertCantAdd: anAccount 
	parents do: [:aParent | aParent cantAdd: anAccount].
	((self = anAccount) or: [self hasAccount: anAccount])  ifTrue: [^self error: Portfolio cantAddErrorDescription].! !
!Portfolio methodsFor: 'assertions' stamp: 'DA 5/21/2023 21:13:50' prior: 50627143!
assertCantAdd: anAccount 
	parents do: [:aParent | aParent cantAdd: anAccount].
	((self = anAccount) or: [self hasAccount: anAccount]) ifTrue: [^self error: Portfolio cantAddErrorDescription].! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'DA 5/21/2023 21:13:51'!
PASSED!

!testRun: #PortfolioTest #test02AddingOneAccountTakeTheirBalance stamp: 'DA 5/21/2023 21:13:51'!
PASSED!

!testRun: #PortfolioTest #test03AddingMoreThanOneAccountTakeSumOfTheirBalance stamp: 'DA 5/21/2023 21:13:51'!
PASSED!

!testRun: #PortfolioTest #test04AddingEmptyPortfolioHaveBalanceCero stamp: 'DA 5/21/2023 21:13:52'!
PASSED!

!testRun: #PortfolioTest #test05AddingPortfolioWithAccountHaveBalanceOfThatAccount stamp: 'DA 5/21/2023 21:13:52'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithoutAccountsHasNoRegisteredTransactions stamp: 'DA 5/21/2023 21:13:52'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasRegisteredTheirAccountTransactions stamp: 'DA 5/21/2023 21:13:52'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioCanLookTheirTransactionsRecursively stamp: 'DA 5/21/2023 21:13:52'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCantAddAccountIfWasAddedBefore stamp: 'DA 5/21/2023 21:13:52'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCantAddPorfolioIfSharesSomeAccount stamp: 'DA 5/21/2023 21:13:52'!
FAILURE!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'DA 5/21/2023 21:13:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'DA 5/21/2023 21:13:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'DA 5/21/2023 21:13:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'DA 5/21/2023 21:13:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'DA 5/21/2023 21:13:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'DA 5/21/2023 21:13:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'DA 5/21/2023 21:13:55'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCantAddPorfolioIfSharesSomeAccount stamp: 'DA 5/21/2023 21:13:55'!
FAILURE!
!Portfolio methodsFor: 'assertions' stamp: 'DA 5/21/2023 21:14:00' prior: 50627152!
assertCantAdd: anAccount 
	parents do: [:aParent | aParent assertCantAdd: anAccount].
	((self = anAccount) or: [self hasAccount: anAccount]) ifTrue: [^self error: Portfolio cantAddErrorDescription].! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'DA 5/21/2023 21:14:05'!
PASSED!

!testRun: #PortfolioTest #test02AddingOneAccountTakeTheirBalance stamp: 'DA 5/21/2023 21:14:05'!
PASSED!

!testRun: #PortfolioTest #test03AddingMoreThanOneAccountTakeSumOfTheirBalance stamp: 'DA 5/21/2023 21:14:05'!
PASSED!

!testRun: #PortfolioTest #test04AddingEmptyPortfolioHaveBalanceCero stamp: 'DA 5/21/2023 21:14:05'!
PASSED!

!testRun: #PortfolioTest #test05AddingPortfolioWithAccountHaveBalanceOfThatAccount stamp: 'DA 5/21/2023 21:14:06'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithoutAccountsHasNoRegisteredTransactions stamp: 'DA 5/21/2023 21:14:06'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasRegisteredTheirAccountTransactions stamp: 'DA 5/21/2023 21:14:06'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioCanLookTheirTransactionsRecursively stamp: 'DA 5/21/2023 21:14:06'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCantAddAccountIfWasAddedBefore stamp: 'DA 5/21/2023 21:14:06'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCantAddPorfolioIfSharesSomeAccount stamp: 'DA 5/21/2023 21:14:06'!
FAILURE!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'DA 5/21/2023 21:14:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'DA 5/21/2023 21:14:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'DA 5/21/2023 21:14:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'DA 5/21/2023 21:14:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'DA 5/21/2023 21:14:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'DA 5/21/2023 21:14:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'DA 5/21/2023 21:14:06'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCantAddPorfolioIfSharesSomeAccount stamp: 'DA 5/21/2023 21:14:06'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'DA 5/21/2023 21:14:29' prior: 50627134!
add: anAccount 
	self assertCantAdd: anAccount.
	accounts add: anAccount.
	anAccount registerParent: self. ! !

!methodRemoval: Portfolio #cantAdd: stamp: 'DA 5/21/2023 21:14:54'!
cantAdd: anAccount 
	parents do: [:aParent | aParent cantAdd: anAccount].
	^((self = anAccount) or: [self hasAccount: anAccount]) 
"
	(parents isEmpty) ifTrue: [^ accounts anySatisfy: [ :account | account hasAccount: anAccount ].]
				     ifFalse: [parents inject: true into:[:res :parent | res & parent cantAdd: anAccount]].  "!

!testRun: #PortfolioTest #test10PortfolioCantAddPorfolioIfSharesSomeAccount stamp: 'DA 5/21/2023 21:17:12'!
FAILURE!

!classRemoval: #Withdraw stamp: 'DA 5/21/2023 21:18:09'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Deposit stamp: 'DA 5/21/2023 21:18:09'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #AccountTransaction stamp: 'DA 5/21/2023 21:18:09'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #ReceptiveAccount stamp: 'DA 5/21/2023 21:18:09'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Portfolio stamp: 'DA 5/21/2023 21:18:09'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Account stamp: 'DA 5/21/2023 21:18:10'!
Object subclass: #Account
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #ReceptiveAccountTest stamp: 'DA 5/21/2023 21:18:10'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #PortfolioTest stamp: 'DA 5/21/2023 21:18:10'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

----End fileIn of D:\windows64\Portfolio-Ejercicio.st----!
!PortfolioTest methodsFor: 'tests' stamp: 'DA 5/21/2023 21:18:47' prior: 50627494!
test10PortfolioCantAddPorfolioIfSharesSomeAccount
	|account portfolio childPortfolio otherPortfolio |
	account := ReceptiveAccount new.
	
	childPortfolio := Portfolio with: account.
	portfolio := Portfolio with: childPortfolio.
	otherPortfolio := Portfolio with: account.
	
	self 
	should: [childPortfolio add: otherPortfolio]
	raise: Error
	withExceptionDo: [ :anError |
		self assert: Portfolio cantAddErrorDescription equals: anError messageText.
		self assert: 1 equals: childPortfolio accountsSize.
		self deny: (childPortfolio hasAccount: otherPortfolio).
		self assert: (childPortfolio hasAccount: account)]! !

!testRun: #PortfolioTest #test10PortfolioCantAddPorfolioIfSharesSomeAccount stamp: 'DA 5/21/2023 21:18:51'!
FAILURE!

----QUIT----(21 May 2023 21:33:42) CuisUniversity-5799.image priorSource: 9440205!

----STARTUP---- (21 May 2023 21:40:22) as D:\windows64\CuisUniversity-5799.image!


----QUIT----(21 May 2023 21:41:01) CuisUniversity-5799.image priorSource: 9480575!