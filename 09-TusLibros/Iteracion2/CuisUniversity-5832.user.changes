

----QUIT----(30 May 2023 00:05:32) CuisUniversity-5832.image priorSource: 4928100!

----STARTUP---- (30 May 2023 00:05:33) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-5832.image!


----QUIT----(30 May 2023 00:05:33) CuisUniversity-5832.image priorSource: 9366537!

----STARTUP---- (2 June 2023 18:03:14) as D:\ISW1\windows64\CuisUniversity-5832.image!


----End fileIn of C:\Users\daiana\Downloads\2023-1c-main (5)\2023-1c-main\08-MarsRover-ElRegreso\MarsRover-WithHeading.st----!

TestCase subclass: #MarsRoverLoggerTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverLoggerTest category: 'MarsRover-WithHeading' stamp: 'DA 6/2/2023 18:17:38'!
TestCase subclass: #MarsRoverLoggerTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #PositionLogger category: 'MarsRover-WithHeading' stamp: 'DA 6/2/2023 18:20:24'!
Object subclass: #PositionLogger
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverLoggerTest methodsFor: 'no messages' stamp: 'DA 6/2/2023 18:20:15'!
test01PositionLoggerOfMarsRoverThatDidntMoveIsEmpty
	|marsRover positionLogger|
	
	marsRover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth. 
	
	positionLogger := PositionLogger new.
	
	marsRover addLogger: positionLogger.
	
	self assert: marsRover logs isEmpty. ! !

!testRun: #MarsRoverLoggerTest #test01PositionLoggerOfMarsRoverThatDidntMoveIsEmpty stamp: 'DA 6/2/2023 18:20:30'!
ERROR!
!MarsRover methodsFor: 'tracking' stamp: 'DA 6/2/2023 18:20:48'!
addLogger: positionLogger 
	self shouldBeImplemented.! !

!classDefinition: #MarsRover category: 'MarsRover-WithHeading' stamp: 'DA 6/2/2023 18:21:12'!
Object subclass: #MarsRover
	instanceVariableNames: 'position head loggers'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRover methodsFor: 'tracking' stamp: 'DA 6/2/2023 18:21:10' prior: 50624890!
addLogger: positionLogger 
	loggers add: positionLogger ! !

!testRun: #MarsRoverLoggerTest #test01PositionLoggerOfMarsRoverThatDidntMoveIsEmpty stamp: 'DA 6/2/2023 18:21:23'!
ERROR!
!MarsRover methodsFor: 'initialization' stamp: 'DA 6/2/2023 18:22:17' prior: 50624556!
initializeAt: aPosition heading: aHeadingType

	position := aPosition.
	head := aHeadingType for: self.
	loggers := OrderedCollection new.! !

!testRun: #MarsRoverLoggerTest #test01PositionLoggerOfMarsRoverThatDidntMoveIsEmpty stamp: 'DA 6/2/2023 18:22:33'!
ERROR!
!MarsRover methodsFor: 'category-name' stamp: 'DA 6/2/2023 18:22:45'!
logs
	self shouldBeImplemented.! !
!MarsRover methodsFor: 'category-name' stamp: 'DA 6/2/2023 18:23:05' prior: 50624923!
logs
	^ OrderedCollection new.! !

!testRun: #MarsRoverLoggerTest #test01PositionLoggerOfMarsRoverThatDidntMoveIsEmpty stamp: 'DA 6/2/2023 18:23:07'!
PASSED!

!testRun: #MarsRoverLoggerTest #test01PositionLoggerOfMarsRoverThatDidntMoveIsEmpty stamp: 'DA 6/2/2023 18:23:07'!
PASSED!
!MarsRoverLoggerTest methodsFor: 'tests' stamp: 'DA 6/2/2023 18:25:17'!
test02
	|marsRover positionLogger|
	
	marsRover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth. 
	
	positionLogger := PositionLogger new.
	
	marsRover addLogger: positionLogger.
	
	marsRover process: 'f'.
	
	self assert: 1@2 equals: PositionLogger logs. ! !

!methodRemoval: MarsRover #logs stamp: 'DA 6/2/2023 18:25:47'!
logs
	^ OrderedCollection new.!
!MarsRoverLoggerTest methodsFor: 'tests' stamp: 'DA 6/2/2023 18:26:02' prior: 50624875!
test01PositionLoggerOfMarsRoverThatDidntMoveIsEmpty
	|marsRover positionLogger|
	
	marsRover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth. 
	
	positionLogger := PositionLogger new.
	
	marsRover addLogger: positionLogger.
	
	self assert: positionLogger logs isEmpty. ! !

!testRun: #MarsRoverLoggerTest #test01PositionLoggerOfMarsRoverThatDidntMoveIsEmpty stamp: 'DA 6/2/2023 18:26:05'!
ERROR!
!PositionLogger methodsFor: 'category-name' stamp: 'DA 6/2/2023 18:26:14'!
logs
	self shouldBeImplemented.! !
!PositionLogger methodsFor: 'category-name' stamp: 'DA 6/2/2023 18:26:22' prior: 50624968!
logs
	^ OrderedCollection new! !

!testRun: #MarsRoverLoggerTest #test01PositionLoggerOfMarsRoverThatDidntMoveIsEmpty stamp: 'DA 6/2/2023 18:26:24'!
PASSED!

!testRun: #MarsRoverLoggerTest #test01PositionLoggerOfMarsRoverThatDidntMoveIsEmpty stamp: 'DA 6/2/2023 18:26:24'!
PASSED!

!testRun: #MarsRoverLoggerTest #test02 stamp: 'DA 6/2/2023 18:26:24'!
ERROR!

!testRun: #MarsRoverLoggerTest #test02 stamp: 'DA 6/2/2023 18:26:24'!
ERROR!

!testRun: #MarsRoverLoggerTest #test01PositionLoggerOfMarsRoverThatDidntMoveIsEmpty stamp: 'DA 6/2/2023 18:26:44'!
PASSED!
!MarsRoverLoggerTest methodsFor: 'tests' stamp: 'DA 6/2/2023 18:27:05' prior: 50624939!
test02
	|marsRover positionLogger|
	
	marsRover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth. 
	
	positionLogger := PositionLogger new.
	
	marsRover addLogger: positionLogger.
	
	marsRover process: 'f'.
	
	self assert: 1@2 equals: positionLogger logs. ! !

!testRun: #MarsRoverLoggerTest #test02 stamp: 'DA 6/2/2023 18:27:06'!
FAILURE!

Object subclass: #PositionLogger
	instanceVariableNames: 'logs'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #PositionLogger category: 'MarsRover-WithHeading' stamp: 'DA 6/2/2023 18:27:53'!
Object subclass: #PositionLogger
	instanceVariableNames: 'logs'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!PositionLogger methodsFor: 'category-name' stamp: 'DA 6/2/2023 18:28:02' prior: 50624972!
logs
	^ logs! !
!PositionLogger methodsFor: 'category-name' stamp: 'DA 6/2/2023 18:28:15' prior: 50625019!
logs
	^ logs last! !
!PositionLogger methodsFor: 'category-name' stamp: 'DA 6/2/2023 18:28:42' overrides: 16920235!
initialize
	logs := OrderedCollection new! !

!testRun: #MarsRoverLoggerTest #test01PositionLoggerOfMarsRoverThatDidntMoveIsEmpty stamp: 'DA 6/2/2023 18:28:52'!
ERROR!

!testRun: #MarsRoverLoggerTest #test01PositionLoggerOfMarsRoverThatDidntMoveIsEmpty stamp: 'DA 6/2/2023 18:28:52'!
ERROR!
!PositionLogger methodsFor: 'category-name' stamp: 'DA 6/2/2023 18:29:40' prior: 50625023!
logs
	(logs isEmpty) ifTrue: [^OrderedCollection new].
	^ logs last! !

!testRun: #MarsRoverLoggerTest #test01PositionLoggerOfMarsRoverThatDidntMoveIsEmpty stamp: 'DA 6/2/2023 18:29:46'!
PASSED!

!testRun: #MarsRoverLoggerTest #test02 stamp: 'DA 6/2/2023 18:29:52'!
FAILURE!

!testRun: #MarsRoverLoggerTest #test02 stamp: 'DA 6/2/2023 18:29:52'!
FAILURE!
!MarsRoverLoggerTest methodsFor: 'tests' stamp: 'DA 6/2/2023 18:30:51' prior: 50624993!
test02
	|marsRover positionLogger|
	
	marsRover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth. 
	
	positionLogger := PositionLogger new.
	
	marsRover addLogger: positionLogger.
	
	marsRover process: 'f'.
	
	self assert: 0@1 equals: positionLogger logs. ! !
!MarsRover methodsFor: 'moving' stamp: 'DA 6/2/2023 18:31:45' prior: 50624620!
moveNorth
	
	position := position + (0@1).
	loggers do: [:aLogger | aLogger addPosition: position].! !

!testRun: #MarsRoverLoggerTest #test02 stamp: 'DA 6/2/2023 18:31:57'!
ERROR!

!testRun: #MarsRoverLoggerTest #test02 stamp: 'DA 6/2/2023 18:31:57'!
ERROR!
!PositionLogger methodsFor: 'category-name' stamp: 'DA 6/2/2023 18:32:05'!
addPosition: aPosition 
	self shouldBeImplemented.! !
!PositionLogger methodsFor: 'category-name' stamp: 'DA 6/2/2023 18:32:18' prior: 50625075!
addPosition: aPosition 
	logs addLast: aPosition.! !

!testRun: #MarsRoverLoggerTest #test02 stamp: 'DA 6/2/2023 18:32:20'!
PASSED!

!testRun: #MarsRoverLoggerTest #test02 stamp: 'DA 6/2/2023 18:32:23'!
PASSED!
!MarsRoverLoggerTest methodsFor: 'tests' stamp: 'DA 6/2/2023 18:33:29'!
test03
	|marsRover positionLogger|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth. 
	
	positionLogger := PositionLogger new.
	
	marsRover addLogger: positionLogger.
	
	marsRover process: 'b'.
	
	self assert: 1@0 equals: positionLogger logs. ! !

!testRun: #MarsRoverLoggerTest #test03 stamp: 'DA 6/2/2023 18:33:30'!
FAILURE!
!MarsRover methodsFor: 'moving' stamp: 'DA 6/2/2023 18:34:07' prior: 50624624!
moveSouth
	
	position := position + (0@-1).
	loggers do: [:aLogger | aLogger addPosition: position].! !

!testRun: #MarsRoverLoggerTest #test03 stamp: 'DA 6/2/2023 18:34:16'!
PASSED!
!MarsRoverLoggerTest methodsFor: 'tests' stamp: 'DA 6/2/2023 18:34:46'!
test02PositionLoggerRegisterMoveFoward
	|marsRover positionLogger|
	
	marsRover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth. 
	
	positionLogger := PositionLogger new.
	
	marsRover addLogger: positionLogger.
	
	marsRover process: 'f'.
	
	self assert: 0@1 equals: positionLogger logs. ! !

!methodRemoval: MarsRoverLoggerTest #test02 stamp: 'DA 6/2/2023 18:34:46'!
test02
	|marsRover positionLogger|
	
	marsRover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth. 
	
	positionLogger := PositionLogger new.
	
	marsRover addLogger: positionLogger.
	
	marsRover process: 'f'.
	
	self assert: 0@1 equals: positionLogger logs. !
!MarsRoverLoggerTest methodsFor: 'tests' stamp: 'DA 6/2/2023 18:35:06'!
test03PositionLoggerRegisterMoveBackward
	|marsRover positionLogger|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth. 
	
	positionLogger := PositionLogger new.
	
	marsRover addLogger: positionLogger.
	
	marsRover process: 'b'.
	
	self assert: 1@0 equals: positionLogger logs. ! !

!methodRemoval: MarsRoverLoggerTest #test03 stamp: 'DA 6/2/2023 18:35:06'!
test03
	|marsRover positionLogger|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth. 
	
	positionLogger := PositionLogger new.
	
	marsRover addLogger: positionLogger.
	
	marsRover process: 'b'.
	
	self assert: 1@0 equals: positionLogger logs. !

!classDefinition: #HeadingLogger category: 'MarsRover-WithHeading' stamp: 'DA 6/2/2023 18:38:14'!
Object subclass: #HeadingLogger
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverLoggerTest methodsFor: 'tests' stamp: 'DA 6/2/2023 18:38:08'!
test04HeadingLoggerRegisterRotatingRight
	|marsRover headingLogger|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth. 
	
	headingLogger := HeadingLogger new.
	
	marsRover addLogger: headingLogger.
	
	marsRover process: 'r'.
	
	self assert: 'East' equals: headingLogger logs. ! !

!testRun: #MarsRoverLoggerTest #test04HeadingLoggerRegisterRotatingRight stamp: 'DA 6/2/2023 18:38:19'!
ERROR!

!testRun: #MarsRoverLoggerTest #test04HeadingLoggerRegisterRotatingRight stamp: 'DA 6/2/2023 18:38:19'!
ERROR!
!HeadingLogger methodsFor: 'category-name' stamp: 'DA 6/2/2023 18:38:26'!
logs
	self shouldBeImplemented.! !

!classDefinition: #HeadingLogger category: 'MarsRover-WithHeading' stamp: 'DA 6/2/2023 18:38:42'!
Object subclass: #HeadingLogger
	instanceVariableNames: 'logs'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!HeadingLogger methodsFor: 'category-name' stamp: 'DA 6/2/2023 18:38:40' prior: 50625182!
logs
	^ logs! !

!testRun: #MarsRoverLoggerTest #test04HeadingLoggerRegisterRotatingRight stamp: 'DA 6/2/2023 18:38:44'!
FAILURE!
!HeadingLogger methodsFor: 'nil' stamp: 'DA 6/2/2023 18:39:09' overrides: 16920235!
initialize
	logs := ''! !
!MarsRoverLoggerTest methodsFor: 'tests' stamp: 'DA 6/2/2023 18:40:45'!
test02PositionLoggerRegisterMoveNorth
	|marsRover positionLogger|
	
	marsRover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth. 
	
	positionLogger := PositionLogger new.
	
	marsRover addLogger: positionLogger.
	
	marsRover process: 'f'.
	
	self assert: 0@1 equals: positionLogger logs. ! !

!methodRemoval: MarsRoverLoggerTest #test02PositionLoggerRegisterMoveFoward stamp: 'DA 6/2/2023 18:40:45'!
test02PositionLoggerRegisterMoveFoward
	|marsRover positionLogger|
	
	marsRover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth. 
	
	positionLogger := PositionLogger new.
	
	marsRover addLogger: positionLogger.
	
	marsRover process: 'f'.
	
	self assert: 0@1 equals: positionLogger logs. !
!MarsRoverLoggerTest methodsFor: 'tests' stamp: 'DA 6/2/2023 18:40:55'!
test03PositionLoggerRegisterMoveSouth
	|marsRover positionLogger|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth. 
	
	positionLogger := PositionLogger new.
	
	marsRover addLogger: positionLogger.
	
	marsRover process: 'b'.
	
	self assert: 1@0 equals: positionLogger logs. ! !

!methodRemoval: MarsRoverLoggerTest #test03PositionLoggerRegisterMoveBackward stamp: 'DA 6/2/2023 18:40:55'!
test03PositionLoggerRegisterMoveBackward
	|marsRover positionLogger|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth. 
	
	positionLogger := PositionLogger new.
	
	marsRover addLogger: positionLogger.
	
	marsRover process: 'b'.
	
	self assert: 1@0 equals: positionLogger logs. !
!MarsRoverLoggerTest methodsFor: 'tests' stamp: 'DA 6/2/2023 18:41:57'!
test04PositionLoggerRegisterMoveEast
	|marsRover positionLogger|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingEast. 
	
	positionLogger := PositionLogger new.
	
	marsRover addLogger: positionLogger.
	
	marsRover process: 'f'.
	
	self assert: 2@1 equals: positionLogger logs. ! !

!testRun: #MarsRoverLoggerTest #test04PositionLoggerRegisterMoveEast stamp: 'DA 6/2/2023 18:42:03'!
FAILURE!

!testRun: #MarsRoverLoggerTest #test04PositionLoggerRegisterMoveEast stamp: 'DA 6/2/2023 18:42:03'!
FAILURE!
!MarsRover methodsFor: 'moving' stamp: 'DA 6/2/2023 18:42:31' prior: 50624612!
moveEast
	
	position := position + (1@0).
	loggers do: [:aLogger | aLogger addPosition: position].! !

!testRun: #MarsRoverLoggerTest #test04PositionLoggerRegisterMoveEast stamp: 'DA 6/2/2023 18:42:36'!
PASSED!
!MarsRoverLoggerTest methodsFor: 'tests' stamp: 'DA 6/2/2023 18:42:59'!
test04PositionLoggerRegisterMoveWest
	|marsRover positionLogger|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingEast. 
	
	positionLogger := PositionLogger new.
	
	marsRover addLogger: positionLogger.
	
	marsRover process: 'b'.
	
	self assert: 0@1 equals: positionLogger logs. ! !
!MarsRoverLoggerTest methodsFor: 'tests' stamp: 'DA 6/2/2023 18:43:10'!
test05PositionLoggerRegisterMoveWest
	|marsRover positionLogger|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingEast. 
	
	positionLogger := PositionLogger new.
	
	marsRover addLogger: positionLogger.
	
	marsRover process: 'b'.
	
	self assert: 0@1 equals: positionLogger logs. ! !

!methodRemoval: MarsRoverLoggerTest #test04PositionLoggerRegisterMoveWest stamp: 'DA 6/2/2023 18:43:10'!
test04PositionLoggerRegisterMoveWest
	|marsRover positionLogger|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingEast. 
	
	positionLogger := PositionLogger new.
	
	marsRover addLogger: positionLogger.
	
	marsRover process: 'b'.
	
	self assert: 0@1 equals: positionLogger logs. !

!testRun: #MarsRoverLoggerTest #test05PositionLoggerRegisterMoveWest stamp: 'DA 6/2/2023 18:43:16'!
FAILURE!

!testRun: #MarsRoverLoggerTest #test05PositionLoggerRegisterMoveWest stamp: 'DA 6/2/2023 18:43:16'!
FAILURE!
!MarsRover methodsFor: 'moving' stamp: 'DA 6/2/2023 18:43:34' prior: 50624628!
moveWest
	
	position := position + (-1@0).
	loggers do: [:aLogger | aLogger addPosition: position].! !

!testRun: #MarsRoverLoggerTest #test05PositionLoggerRegisterMoveWest stamp: 'DA 6/2/2023 18:43:40'!
PASSED!
!MarsRoverLoggerTest methodsFor: 'tests' stamp: 'DA 6/2/2023 18:43:53'!
test06HeadingLoggerRegisterRotatingRight
	|marsRover headingLogger|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth. 
	
	headingLogger := HeadingLogger new.
	
	marsRover addLogger: headingLogger.
	
	marsRover process: 'r'.
	
	self assert: 'East' equals: headingLogger logs. ! !

!methodRemoval: MarsRoverLoggerTest #test04HeadingLoggerRegisterRotatingRight stamp: 'DA 6/2/2023 18:43:53'!
test04HeadingLoggerRegisterRotatingRight
	|marsRover headingLogger|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth. 
	
	headingLogger := HeadingLogger new.
	
	marsRover addLogger: headingLogger.
	
	marsRover process: 'r'.
	
	self assert: 'East' equals: headingLogger logs. !
!MarsRoverLoggerTest methodsFor: 'tests' stamp: 'DA 6/2/2023 18:44:33'!
test06HeadingLoggerRegisterHeadingEast
	|marsRover headingLogger|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth. 
	
	headingLogger := HeadingLogger new.
	
	marsRover addLogger: headingLogger.
	
	marsRover process: 'r'.
	
	self assert: 'East' equals: headingLogger logs. ! !
!MarsRoverLoggerTest methodsFor: 'tests' stamp: 'DA 6/2/2023 18:44:56'!
test07HeadingLoggerRegisterHeadingWest
	|marsRover headingLogger|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth. 
	
	headingLogger := HeadingLogger new.
	
	marsRover addLogger: headingLogger.
	
	marsRover process: 'r'.
	
	self assert: 'East' equals: headingLogger logs. ! !

!methodRemoval: MarsRoverLoggerTest #test06HeadingLoggerRegisterRotatingRight stamp: 'DA 6/2/2023 18:44:56'!
test06HeadingLoggerRegisterRotatingRight
	|marsRover headingLogger|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth. 
	
	headingLogger := HeadingLogger new.
	
	marsRover addLogger: headingLogger.
	
	marsRover process: 'r'.
	
	self assert: 'East' equals: headingLogger logs. !

!testRun: #MarsRoverLoggerTest #test06HeadingLoggerRegisterHeadingEast stamp: 'DA 6/2/2023 18:45:03'!
FAILURE!

!testRun: #MarsRoverLoggerTest #test06HeadingLoggerRegisterHeadingEast stamp: 'DA 6/2/2023 18:45:03'!
FAILURE!
!MarsRover methodsFor: 'heading' stamp: 'DA 6/2/2023 18:45:58' prior: 50624562!
headEast
	
	head := MarsRoverHeadingEast for: self.
	loggers do: [:aLogger | aLogger registerRotation: 'East'].! !
!MarsRover methodsFor: 'heading' stamp: 'DA 6/2/2023 18:46:14' prior: 50625403!
headEast
	
	head := MarsRoverHeadingEast for: self.
	loggers do: [:aLogger | aLogger addHeading: 'East'].! !

!testRun: #MarsRoverLoggerTest #test06HeadingLoggerRegisterHeadingEast stamp: 'DA 6/2/2023 18:46:24'!
ERROR!

!testRun: #MarsRoverLoggerTest #test06HeadingLoggerRegisterHeadingEast stamp: 'DA 6/2/2023 18:46:24'!
ERROR!
!HeadingLogger methodsFor: 'category-name' stamp: 'DA 6/2/2023 18:46:29'!
addHeading: aRenameMe1 
	self shouldBeImplemented.! !
!HeadingLogger methodsFor: 'category-name' stamp: 'DA 6/2/2023 18:46:48' prior: 50625423!
addHeading: aHeading
	logs := aHeading! !

!testRun: #MarsRoverLoggerTest #test06HeadingLoggerRegisterHeadingEast stamp: 'DA 6/2/2023 18:46:50'!
PASSED!

!testRun: #MarsRoverLoggerTest #test06HeadingLoggerRegisterHeadingEast stamp: 'DA 6/2/2023 18:46:54'!
PASSED!
!MarsRoverLoggerTest methodsFor: 'tests' stamp: 'DA 6/2/2023 18:47:03' prior: 50625371!
test07HeadingLoggerRegisterHeadingWest
	|marsRover headingLogger|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth. 
	
	headingLogger := HeadingLogger new.
	
	marsRover addLogger: headingLogger.
	
	marsRover process: 'l'.
	
	self assert: 'East' equals: headingLogger logs. ! !

!testRun: #MarsRoverLoggerTest #test07HeadingLoggerRegisterHeadingWest stamp: 'DA 6/2/2023 18:47:06'!
FAILURE!

!testRun: #MarsRoverLoggerTest #test07HeadingLoggerRegisterHeadingWest stamp: 'DA 6/2/2023 18:47:06'!
FAILURE!
!MarsRoverLoggerTest methodsFor: 'tests' stamp: 'DA 6/2/2023 18:47:14' prior: 50625439!
test07HeadingLoggerRegisterHeadingWest
	|marsRover headingLogger|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth. 
	
	headingLogger := HeadingLogger new.
	
	marsRover addLogger: headingLogger.
	
	marsRover process: 'l'.
	
	self assert: 'West' equals: headingLogger logs. ! !

!testRun: #MarsRoverLoggerTest #test07HeadingLoggerRegisterHeadingWest stamp: 'DA 6/2/2023 18:47:15'!
FAILURE!
!MarsRover methodsFor: 'heading' stamp: 'DA 6/2/2023 18:47:34' prior: 50624574!
headWest
	
	head := MarsRoverHeadingWest for: self. 
	loggers do: [:aLogger | aLogger addHeading: 'West'].! !

!testRun: #MarsRoverLoggerTest #test01PositionLoggerOfMarsRoverThatDidntMoveIsEmpty stamp: 'DA 6/2/2023 18:47:40'!
PASSED!

!testRun: #MarsRoverLoggerTest #test02PositionLoggerRegisterMoveNorth stamp: 'DA 6/2/2023 18:47:40'!
PASSED!

!testRun: #MarsRoverLoggerTest #test03PositionLoggerRegisterMoveSouth stamp: 'DA 6/2/2023 18:47:40'!
PASSED!

!testRun: #MarsRoverLoggerTest #test04PositionLoggerRegisterMoveEast stamp: 'DA 6/2/2023 18:47:40'!
PASSED!

!testRun: #MarsRoverLoggerTest #test05PositionLoggerRegisterMoveWest stamp: 'DA 6/2/2023 18:47:40'!
PASSED!

!testRun: #MarsRoverLoggerTest #test06HeadingLoggerRegisterHeadingEast stamp: 'DA 6/2/2023 18:47:40'!
PASSED!

!testRun: #MarsRoverLoggerTest #test07HeadingLoggerRegisterHeadingWest stamp: 'DA 6/2/2023 18:47:40'!
PASSED!
!MarsRoverLoggerTest methodsFor: 'tests' stamp: 'DA 6/2/2023 18:48:06'!
test08HeadingLoggerRegisterHeadingNorth
	|marsRover headingLogger|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingEast. 
	
	headingLogger := HeadingLogger new.
	
	marsRover addLogger: headingLogger.
	
	marsRover process: 'l'.
	
	self assert: 'North' equals: headingLogger logs. ! !

!testRun: #MarsRoverLoggerTest #test08HeadingLoggerRegisterHeadingNorth stamp: 'DA 6/2/2023 18:48:09'!
FAILURE!

!testRun: #MarsRoverLoggerTest #test08HeadingLoggerRegisterHeadingNorth stamp: 'DA 6/2/2023 18:48:09'!
FAILURE!
!MarsRover methodsFor: 'heading' stamp: 'DA 6/2/2023 18:48:23' prior: 50624566!
headNorth
	
	head := MarsRoverHeadingNorth for: self.
	! !
!MarsRover methodsFor: 'heading' stamp: 'DA 6/2/2023 18:48:32' prior: 50625524!
headNorth
	
	head := MarsRoverHeadingNorth for: self.
	loggers do: [:aLogger | aLogger addHeading: 'East'].
	! !
!MarsRover methodsFor: 'heading' stamp: 'DA 6/2/2023 18:48:38' prior: 50625529!
headNorth
	
	head := MarsRoverHeadingNorth for: self.
	loggers do: [:aLogger | aLogger addHeading: 'North'].
	! !

!testRun: #MarsRoverLoggerTest #test08HeadingLoggerRegisterHeadingNorth stamp: 'DA 6/2/2023 18:48:46'!
PASSED!
!MarsRoverLoggerTest methodsFor: 'tests' stamp: 'DA 6/2/2023 18:49:10'!
test09HeadingLoggerRegisterHeadingSouth
	|marsRover headingLogger|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingEast. 
	
	headingLogger := HeadingLogger new.
	
	marsRover addLogger: headingLogger.
	
	marsRover process: 'r'.
	
	self assert: 'South' equals: headingLogger logs. ! !

!testRun: #MarsRoverLoggerTest #test09HeadingLoggerRegisterHeadingSouth stamp: 'DA 6/2/2023 18:49:14'!
FAILURE!

!testRun: #MarsRoverLoggerTest #test09HeadingLoggerRegisterHeadingSouth stamp: 'DA 6/2/2023 18:49:14'!
FAILURE!
!MarsRover methodsFor: 'heading' stamp: 'DA 6/2/2023 18:49:28' prior: 50624570!
headSouth
	
	head := MarsRoverHeadingSouth for: self.
	loggers do: [:aLogger | aLogger addHeading: 'South'].! !

!testRun: #MarsRoverLoggerTest #test09HeadingLoggerRegisterHeadingSouth stamp: 'DA 6/2/2023 18:49:34'!
PASSED!

----SNAPSHOT----(2 June 2023 18:49:39) CuisUniversity-5832.image priorSource: 9366758!
!MarsRoverLoggerTest methodsFor: 'tests' stamp: 'DA 6/2/2023 18:51:19' prior: 50625359!
test06HeadingLoggerRegisterHeadingEast
	|marsRover headingLogger|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth. 
	
	headingLogger := HeadingLogger new.
	
	marsRover addLogger: headingLogger.
	
	marsRover process: 'r'.
	
	self assert: (OrderedCollection with: 'East') equals: headingLogger logs. ! !
!MarsRoverLoggerTest methodsFor: 'tests' stamp: 'DA 6/2/2023 18:51:34' prior: 50625458!
test07HeadingLoggerRegisterHeadingWest
	|marsRover headingLogger|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth. 
	
	headingLogger := HeadingLogger new.
	
	marsRover addLogger: headingLogger.
	
	marsRover process: 'l'.
	
	self assert: (OrderedCollection with: 'West') equals: headingLogger logs. ! !
!MarsRoverLoggerTest methodsFor: 'tests' stamp: 'DA 6/2/2023 18:51:47' prior: 50625505!
test08HeadingLoggerRegisterHeadingNorth
	|marsRover headingLogger|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingEast. 
	
	headingLogger := HeadingLogger new.
	
	marsRover addLogger: headingLogger.
	
	marsRover process: 'l'.
	
	self assert: (OrderedCollection with: 'North') equals: headingLogger logs. ! !
!MarsRoverLoggerTest methodsFor: 'tests' stamp: 'DA 6/2/2023 18:52:02' prior: 50625546!
test09HeadingLoggerRegisterHeadingSouth
	|marsRover headingLogger|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingEast. 
	
	headingLogger := HeadingLogger new.
	
	marsRover addLogger: headingLogger.
	
	marsRover process: 'r'.
	
	self assert: (OrderedCollection with: 'South') equals: headingLogger logs. ! !
!HeadingLogger methodsFor: 'category-name' stamp: 'DA 6/2/2023 18:52:16' prior: 50625428!
addHeading: aHeading
	logs add: aHeading! !
!HeadingLogger methodsFor: 'initialization' stamp: 'DA 6/2/2023 18:52:27' prior: 50625201 overrides: 16920235!
initialize
	logs := OrderedCollection new.! !

!testRun: #MarsRoverLoggerTest #test03PositionLoggerRegisterMoveSouth stamp: 'DA 6/2/2023 18:52:39'!
PASSED!

!testRun: #MarsRoverLoggerTest #test01PositionLoggerOfMarsRoverThatDidntMoveIsEmpty stamp: 'DA 6/2/2023 18:52:39'!
PASSED!

!testRun: #MarsRoverLoggerTest #test02PositionLoggerRegisterMoveNorth stamp: 'DA 6/2/2023 18:52:39'!
PASSED!

!testRun: #MarsRoverLoggerTest #test03PositionLoggerRegisterMoveSouth stamp: 'DA 6/2/2023 18:52:39'!
PASSED!

!testRun: #MarsRoverLoggerTest #test04PositionLoggerRegisterMoveEast stamp: 'DA 6/2/2023 18:52:39'!
PASSED!

!testRun: #MarsRoverLoggerTest #test05PositionLoggerRegisterMoveWest stamp: 'DA 6/2/2023 18:52:39'!
PASSED!

!testRun: #MarsRoverLoggerTest #test06HeadingLoggerRegisterHeadingEast stamp: 'DA 6/2/2023 18:52:39'!
PASSED!

!testRun: #MarsRoverLoggerTest #test07HeadingLoggerRegisterHeadingWest stamp: 'DA 6/2/2023 18:52:39'!
PASSED!

!testRun: #MarsRoverLoggerTest #test08HeadingLoggerRegisterHeadingNorth stamp: 'DA 6/2/2023 18:52:39'!
PASSED!

!testRun: #MarsRoverLoggerTest #test09HeadingLoggerRegisterHeadingSouth stamp: 'DA 6/2/2023 18:52:39'!
PASSED!

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'DA 6/2/2023 18:52:39'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'DA 6/2/2023 18:52:39'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'DA 6/2/2023 18:52:39'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'DA 6/2/2023 18:52:39'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'DA 6/2/2023 18:52:39'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'DA 6/2/2023 18:52:40'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'DA 6/2/2023 18:52:40'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'DA 6/2/2023 18:52:40'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'DA 6/2/2023 18:52:40'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'DA 6/2/2023 18:52:40'!
PASSED!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'DA 6/2/2023 18:52:40'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'DA 6/2/2023 18:52:40'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'DA 6/2/2023 18:52:40'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'DA 6/2/2023 18:52:40'!
PASSED!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'DA 6/2/2023 18:52:40'!
PASSED!
!MarsRoverLoggerTest methodsFor: 'tests' stamp: 'DA 6/2/2023 18:55:38'!
test10PositionLoggerRegisterMoreThanOneMovement
	|marsRover positionLogger|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth. 
	
	positionLogger := HeadingLogger new.
	
	marsRover addLogger: positionLogger.
	
	marsRover process: 'ff'.
	
	self assert: (OrderedCollection with: 1@2 with: 1@3) equals: positionLogger logs. ! !

!testRun: #MarsRoverLoggerTest #test10PositionLoggerRegisterMoreThanOneMovement stamp: 'DA 6/2/2023 18:55:42'!
ERROR!

!testRun: #MarsRoverLoggerTest #test10PositionLoggerRegisterMoreThanOneMovement stamp: 'DA 6/2/2023 18:55:42'!
ERROR!
!MarsRoverLoggerTest methodsFor: 'tests' stamp: 'DA 6/2/2023 18:55:51' prior: 50625728!
test10PositionLoggerRegisterMoreThanOneMovement
	|marsRover positionLogger|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth. 
	
	positionLogger := PositionLogger new.
	
	marsRover addLogger: positionLogger.
	
	marsRover process: 'ff'.
	
	self assert: (OrderedCollection with: 1@2 with: 1@3) equals: positionLogger logs. ! !

!testRun: #MarsRoverLoggerTest #test10PositionLoggerRegisterMoreThanOneMovement stamp: 'DA 6/2/2023 18:55:52'!
FAILURE!
!PositionLogger methodsFor: 'category-name' stamp: 'DA 6/2/2023 18:56:09' prior: 50625039!
logs
	(logs isEmpty) ifTrue: [^OrderedCollection new].
	^ logs ! !

!testRun: #MarsRoverLoggerTest #test10PositionLoggerRegisterMoreThanOneMovement stamp: 'DA 6/2/2023 18:56:16'!
PASSED!
!MarsRoverLoggerTest methodsFor: 'tests' stamp: 'DA 6/2/2023 18:57:17'!
test10HeadingLoggerRegisterMoreThanOneRotation
	|marsRover headingLogger|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth. 
	
	headingLogger := HeadingLogger new.
	
	marsRover addLogger: headingLogger.
	
	marsRover process: 'rl'.
	
	self assert: (OrderedCollection with: 'East' with: 'North') equals: headingLogger logs. ! !
!MarsRoverLoggerTest methodsFor: 'tests' stamp: 'DA 6/2/2023 18:57:25'!
test11HeadingLoggerRegisterMoreThanOneRotation
	|marsRover headingLogger|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth. 
	
	headingLogger := HeadingLogger new.
	
	marsRover addLogger: headingLogger.
	
	marsRover process: 'rl'.
	
	self assert: (OrderedCollection with: 'East' with: 'North') equals: headingLogger logs. ! !

!methodRemoval: MarsRoverLoggerTest #test10HeadingLoggerRegisterMoreThanOneRotation stamp: 'DA 6/2/2023 18:57:25'!
test10HeadingLoggerRegisterMoreThanOneRotation
	|marsRover headingLogger|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth. 
	
	headingLogger := HeadingLogger new.
	
	marsRover addLogger: headingLogger.
	
	marsRover process: 'rl'.
	
	self assert: (OrderedCollection with: 'East' with: 'North') equals: headingLogger logs. !

!testRun: #MarsRoverLoggerTest #test11HeadingLoggerRegisterMoreThanOneRotation stamp: 'DA 6/2/2023 18:57:28'!
PASSED!
!MarsRoverLoggerTest methodsFor: 'tests' stamp: 'DA 6/2/2023 19:00:23'!
test12HeadingLoggerOfMarsRoverNotRotatingIsEmpty
	|marsRover headingLogger|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth. 
	
	headingLogger := HeadingLogger new.
	
	marsRover addLogger: headingLogger.
	
	marsRover process: 'f'.
	
	self assert: headingLogger logs isEmpty. ! !

!testRun: #MarsRoverLoggerTest #test12HeadingLoggerOfMarsRoverNotRotatingIsEmpty stamp: 'DA 6/2/2023 19:00:27'!
ERROR!

!testRun: #MarsRoverLoggerTest #test12HeadingLoggerOfMarsRoverNotRotatingIsEmpty stamp: 'DA 6/2/2023 19:00:27'!
ERROR!

!testRun: #MarsRoverLoggerTest #test12HeadingLoggerOfMarsRoverNotRotatingIsEmpty stamp: 'DA 6/2/2023 19:00:50'!
ERROR!

!testRun: #MarsRoverLoggerTest #test12HeadingLoggerOfMarsRoverNotRotatingIsEmpty stamp: 'DA 6/2/2023 19:00:50'!
ERROR!

!testRun: #MarsRoverLoggerTest #test12HeadingLoggerOfMarsRoverNotRotatingIsEmpty stamp: 'DA 6/2/2023 19:01:13'!
ERROR!

!testRun: #MarsRoverLoggerTest #test12HeadingLoggerOfMarsRoverNotRotatingIsEmpty stamp: 'DA 6/2/2023 19:01:13'!
ERROR!
!HeadingLogger methodsFor: 'category-name' stamp: 'DA 6/2/2023 19:01:20'!
addPosition: aPosition 
	self shouldBeImplemented.! !
!HeadingLogger methodsFor: 'category-name' stamp: 'DA 6/2/2023 19:01:24' prior: 50625855!
addPosition: aPosition 
	! !

!testRun: #MarsRoverLoggerTest #test12HeadingLoggerOfMarsRoverNotRotatingIsEmpty stamp: 'DA 6/2/2023 19:01:26'!
PASSED!
!MarsRoverLoggerTest methodsFor: 'tests' stamp: 'DA 6/2/2023 19:02:14'!
test13HPositionLoggerOfMarsRoverRotatingNotTrackMovements
	|marsRover headingLogger|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth. 
	
	headingLogger := HeadingLogger new.
	
	marsRover addLogger: headingLogger.
	
	marsRover process: 'f'.
	
	self assert: headingLogger logs isEmpty. ! !
!MarsRoverLoggerTest methodsFor: 'tests' stamp: 'DA 6/2/2023 19:02:30' prior: 50625867!
test13HPositionLoggerOfMarsRoverRotatingNotTrackMovements
	|marsRover positionLogger|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth. 
	
	positionLogger := HeadingLogger new.
	
	marsRover addLogger: positionLogger.
	
	marsRover process: 'f'.
	
	self assert: positionLogger logs isEmpty. ! !
!MarsRoverLoggerTest methodsFor: 'tests' stamp: 'DA 6/2/2023 19:02:40' prior: 50625880!
test13HPositionLoggerOfMarsRoverRotatingNotTrackMovements
	|marsRover positionLogger|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth. 
	
	positionLogger := PositionLogger new.
	
	marsRover addLogger: positionLogger.
	
	marsRover process: 'r'.
	
	self assert: positionLogger logs isEmpty. ! !
!MarsRoverLoggerTest methodsFor: 'tests' stamp: 'DA 6/2/2023 19:03:08'!
test13PositionLoggerOfMarsRoverRotatingDoesntTrackMovements
	|marsRover positionLogger|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth. 
	
	positionLogger := PositionLogger new.
	
	marsRover addLogger: positionLogger.
	
	marsRover process: 'r'.
	
	self assert: positionLogger logs isEmpty. ! !

!methodRemoval: MarsRoverLoggerTest #test13HPositionLoggerOfMarsRoverRotatingNotTrackMovements stamp: 'DA 6/2/2023 19:03:08'!
test13HPositionLoggerOfMarsRoverRotatingNotTrackMovements
	|marsRover positionLogger|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth. 
	
	positionLogger := PositionLogger new.
	
	marsRover addLogger: positionLogger.
	
	marsRover process: 'r'.
	
	self assert: positionLogger logs isEmpty. !

!testRun: #MarsRoverLoggerTest #test13PositionLoggerOfMarsRoverRotatingDoesntTrackMovements stamp: 'DA 6/2/2023 19:03:12'!
ERROR!

!testRun: #MarsRoverLoggerTest #test13PositionLoggerOfMarsRoverRotatingDoesntTrackMovements stamp: 'DA 6/2/2023 19:03:12'!
ERROR!
!PositionLogger methodsFor: 'category-name' stamp: 'DA 6/2/2023 19:03:18'!
addHeading: aRenameMe1 
	self shouldBeImplemented.! !
!PositionLogger methodsFor: 'category-name' stamp: 'DA 6/2/2023 19:03:26' prior: 50625939!
addHeading: aHeading

! !

!testRun: #MarsRoverLoggerTest #test13PositionLoggerOfMarsRoverRotatingDoesntTrackMovements stamp: 'DA 6/2/2023 19:03:28'!
PASSED!

!testRun: #MarsRoverLoggerTest #test01PositionLoggerOfMarsRoverThatDidntMoveIsEmpty stamp: 'DA 6/2/2023 19:03:33'!
PASSED!

!testRun: #MarsRoverLoggerTest #test02PositionLoggerRegisterMoveNorth stamp: 'DA 6/2/2023 19:03:33'!
FAILURE!

!testRun: #MarsRoverLoggerTest #test03PositionLoggerRegisterMoveSouth stamp: 'DA 6/2/2023 19:03:33'!
FAILURE!

!testRun: #MarsRoverLoggerTest #test04PositionLoggerRegisterMoveEast stamp: 'DA 6/2/2023 19:03:33'!
FAILURE!

!testRun: #MarsRoverLoggerTest #test05PositionLoggerRegisterMoveWest stamp: 'DA 6/2/2023 19:03:33'!
FAILURE!

!testRun: #MarsRoverLoggerTest #test06HeadingLoggerRegisterHeadingEast stamp: 'DA 6/2/2023 19:03:33'!
PASSED!

!testRun: #MarsRoverLoggerTest #test07HeadingLoggerRegisterHeadingWest stamp: 'DA 6/2/2023 19:03:33'!
PASSED!

!testRun: #MarsRoverLoggerTest #test08HeadingLoggerRegisterHeadingNorth stamp: 'DA 6/2/2023 19:03:33'!
PASSED!

!testRun: #MarsRoverLoggerTest #test09HeadingLoggerRegisterHeadingSouth stamp: 'DA 6/2/2023 19:03:33'!
PASSED!

!testRun: #MarsRoverLoggerTest #test10PositionLoggerRegisterMoreThanOneMovement stamp: 'DA 6/2/2023 19:03:33'!
PASSED!

!testRun: #MarsRoverLoggerTest #test11HeadingLoggerRegisterMoreThanOneRotation stamp: 'DA 6/2/2023 19:03:33'!
PASSED!

!testRun: #MarsRoverLoggerTest #test12HeadingLoggerOfMarsRoverNotRotatingIsEmpty stamp: 'DA 6/2/2023 19:03:33'!
PASSED!

!testRun: #MarsRoverLoggerTest #test13PositionLoggerOfMarsRoverRotatingDoesntTrackMovements stamp: 'DA 6/2/2023 19:03:34'!
PASSED!

!testRun: #MarsRoverLoggerTest #test02PositionLoggerRegisterMoveNorth stamp: 'DA 6/2/2023 19:03:43'!
FAILURE!
!MarsRoverLoggerTest methodsFor: 'tests' stamp: 'DA 6/2/2023 19:04:05' prior: 50625205!
test02PositionLoggerRegisterMoveNorth
	|marsRover positionLogger|
	
	marsRover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth. 
	
	positionLogger := PositionLogger new.
	
	marsRover addLogger: positionLogger.
	
	marsRover process: 'f'.
	
	self assert: (OrderedCollection with: 0@1) equals: positionLogger logs. ! !
!MarsRoverLoggerTest methodsFor: 'tests' stamp: 'DA 6/2/2023 19:04:17' prior: 50625229!
test03PositionLoggerRegisterMoveSouth
	|marsRover positionLogger|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth. 
	
	positionLogger := PositionLogger new.
	
	marsRover addLogger: positionLogger.
	
	marsRover process: 'b'.
	
	self assert: (OrderedCollection with: 1@0) equals: positionLogger logs. ! !
!MarsRoverLoggerTest methodsFor: 'tests' stamp: 'DA 6/2/2023 19:04:30' prior: 50625254!
test04PositionLoggerRegisterMoveEast
	|marsRover positionLogger|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingEast. 
	
	positionLogger := PositionLogger new.
	
	marsRover addLogger: positionLogger.
	
	marsRover process: 'f'.
	
	self assert: (OrderedCollection with: 2@1) equals: positionLogger logs. ! !
!MarsRoverLoggerTest methodsFor: 'tests' stamp: 'DA 6/2/2023 19:04:44' prior: 50625294!
test05PositionLoggerRegisterMoveWest
	|marsRover positionLogger|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingEast. 
	
	positionLogger := PositionLogger new.
	
	marsRover addLogger: positionLogger.
	
	marsRover process: 'b'.
	
	self assert: (OrderedCollection with: 0@1) equals: positionLogger logs. ! !

!testRun: #MarsRoverLoggerTest #test01PositionLoggerOfMarsRoverThatDidntMoveIsEmpty stamp: 'DA 6/2/2023 19:04:50'!
PASSED!

!testRun: #MarsRoverLoggerTest #test02PositionLoggerRegisterMoveNorth stamp: 'DA 6/2/2023 19:04:50'!
PASSED!

!testRun: #MarsRoverLoggerTest #test03PositionLoggerRegisterMoveSouth stamp: 'DA 6/2/2023 19:04:50'!
PASSED!

!testRun: #MarsRoverLoggerTest #test04PositionLoggerRegisterMoveEast stamp: 'DA 6/2/2023 19:04:50'!
PASSED!

!testRun: #MarsRoverLoggerTest #test05PositionLoggerRegisterMoveWest stamp: 'DA 6/2/2023 19:04:50'!
PASSED!

!testRun: #MarsRoverLoggerTest #test06HeadingLoggerRegisterHeadingEast stamp: 'DA 6/2/2023 19:04:50'!
PASSED!

!testRun: #MarsRoverLoggerTest #test07HeadingLoggerRegisterHeadingWest stamp: 'DA 6/2/2023 19:04:50'!
PASSED!

!testRun: #MarsRoverLoggerTest #test08HeadingLoggerRegisterHeadingNorth stamp: 'DA 6/2/2023 19:04:50'!
PASSED!

!testRun: #MarsRoverLoggerTest #test09HeadingLoggerRegisterHeadingSouth stamp: 'DA 6/2/2023 19:04:50'!
PASSED!

!testRun: #MarsRoverLoggerTest #test10PositionLoggerRegisterMoreThanOneMovement stamp: 'DA 6/2/2023 19:04:50'!
PASSED!

!testRun: #MarsRoverLoggerTest #test11HeadingLoggerRegisterMoreThanOneRotation stamp: 'DA 6/2/2023 19:04:50'!
PASSED!

!testRun: #MarsRoverLoggerTest #test12HeadingLoggerOfMarsRoverNotRotatingIsEmpty stamp: 'DA 6/2/2023 19:04:50'!
PASSED!

!testRun: #MarsRoverLoggerTest #test13PositionLoggerOfMarsRoverRotatingDoesntTrackMovements stamp: 'DA 6/2/2023 19:04:50'!
PASSED!

!classDefinition: #PositionHeadingLogger category: 'MarsRover-WithHeading' stamp: 'DA 6/2/2023 19:06:18'!
Object subclass: #PositionHeadingLogger
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverLoggerTest methodsFor: 'tests' stamp: 'DA 6/2/2023 19:06:16'!
test13PositionHeadingLoggerOfMarsRoverThatDidntMoveIsEmpty
	|marsRover positionHeadingLogger|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth. 
	
	positionHeadingLogger := PositionHeadingLogger new.
	
	marsRover addLogger: positionHeadingLogger.
	
	marsRover process: ''.
	
	self assert: positionHeadingLogger logs isEmpty. ! !
!MarsRoverLoggerTest methodsFor: 'tests' stamp: 'DA 6/2/2023 19:06:32'!
test14PositionHeadingLoggerOfMarsRoverThatDidntMoveIsEmpty
	|marsRover positionHeadingLogger|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth. 
	
	positionHeadingLogger := PositionHeadingLogger new.
	
	marsRover addLogger: positionHeadingLogger.
	
	marsRover process: ''.
	
	self assert: positionHeadingLogger logs isEmpty. ! !

!methodRemoval: MarsRoverLoggerTest #test13PositionHeadingLoggerOfMarsRoverThatDidntMoveIsEmpty stamp: 'DA 6/2/2023 19:06:32'!
test13PositionHeadingLoggerOfMarsRoverThatDidntMoveIsEmpty
	|marsRover positionHeadingLogger|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth. 
	
	positionHeadingLogger := PositionHeadingLogger new.
	
	marsRover addLogger: positionHeadingLogger.
	
	marsRover process: ''.
	
	self assert: positionHeadingLogger logs isEmpty. !

!testRun: #MarsRoverLoggerTest #test14PositionHeadingLoggerOfMarsRoverThatDidntMoveIsEmpty stamp: 'DA 6/2/2023 19:06:39'!
ERROR!

!testRun: #MarsRoverLoggerTest #test14PositionHeadingLoggerOfMarsRoverThatDidntMoveIsEmpty stamp: 'DA 6/2/2023 19:06:39'!
ERROR!
!PositionHeadingLogger methodsFor: 'category-name' stamp: 'DA 6/2/2023 19:06:45'!
logs
	self shouldBeImplemented.! !

!classDefinition: #PositionHeadingLogger category: 'MarsRover-WithHeading' stamp: 'DA 6/2/2023 19:06:59'!
Object subclass: #PositionHeadingLogger
	instanceVariableNames: 'logs'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!PositionHeadingLogger methodsFor: 'category-name' stamp: 'DA 6/2/2023 19:06:57' prior: 50626161!
logs
	^logs! !

!testRun: #MarsRoverLoggerTest #test14PositionHeadingLoggerOfMarsRoverThatDidntMoveIsEmpty stamp: 'DA 6/2/2023 19:07:06'!
ERROR!
!PositionHeadingLogger methodsFor: 'nil' stamp: 'DA 6/2/2023 19:07:27' overrides: 16920235!
initialize
	logs := OrderedCollection new! !

!testRun: #MarsRoverLoggerTest #test14PositionHeadingLoggerOfMarsRoverThatDidntMoveIsEmpty stamp: 'DA 6/2/2023 19:07:53'!
PASSED!
!MarsRoverLoggerTest methodsFor: 'tests' stamp: 'DA 6/2/2023 19:09:31'!
test14PositionHeadingLoggerOfMarsRoverTrackMovementAndRotation
	|marsRover positionHeadingLogger|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth. 
	
	positionHeadingLogger := PositionHeadingLogger new.
	
	marsRover addLogger: positionHeadingLogger.
	
	marsRover process: 'fr'.
	
	self assert: (OrderedCollection with: 1@2 with: 'East') equals: positionHeadingLogger logs . ! !
!MarsRoverLoggerTest methodsFor: 'tests' stamp: 'DA 6/2/2023 19:10:12'!
test15PositionHeadingLoggerOfMarsRoverTrackMovementAndRotation
	|marsRover positionHeadingLogger|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth. 
	
	positionHeadingLogger := PositionHeadingLogger new.
	
	marsRover addLogger: positionHeadingLogger.
	
	marsRover process: 'fr'.
	
	self assert: (OrderedCollection with: 1@2 with: 'East') equals: positionHeadingLogger logs . ! !

!methodRemoval: MarsRoverLoggerTest #test14PositionHeadingLoggerOfMarsRoverTrackMovementAndRotation stamp: 'DA 6/2/2023 19:10:12'!
test14PositionHeadingLoggerOfMarsRoverTrackMovementAndRotation
	|marsRover positionHeadingLogger|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth. 
	
	positionHeadingLogger := PositionHeadingLogger new.
	
	marsRover addLogger: positionHeadingLogger.
	
	marsRover process: 'fr'.
	
	self assert: (OrderedCollection with: 1@2 with: 'East') equals: positionHeadingLogger logs . !

!testRun: #MarsRoverLoggerTest #test15PositionHeadingLoggerOfMarsRoverTrackMovementAndRotation stamp: 'DA 6/2/2023 19:10:42'!
ERROR!

!testRun: #MarsRoverLoggerTest #test15PositionHeadingLoggerOfMarsRoverTrackMovementAndRotation stamp: 'DA 6/2/2023 19:10:42'!
ERROR!
!PositionHeadingLogger methodsFor: 'category-name' stamp: 'DA 6/2/2023 19:10:48'!
addPosition: aPosition 
	self shouldBeImplemented.! !
!PositionHeadingLogger methodsFor: 'category-name' stamp: 'DA 6/2/2023 19:10:58' prior: 50626245!
addPosition: aPosition 
	logs addLast: aPosition ! !

!testRun: #MarsRoverLoggerTest #test15PositionHeadingLoggerOfMarsRoverTrackMovementAndRotation stamp: 'DA 6/2/2023 19:11:01'!
ERROR!
!PositionHeadingLogger methodsFor: 'category-name' stamp: 'DA 6/2/2023 19:11:06'!
addHeading: aRenameMe1 
	self shouldBeImplemented.! !
!PositionHeadingLogger methodsFor: 'category-name' stamp: 'DA 6/2/2023 19:11:27' prior: 50626259!
addHeading: aHeading
	logs addLast: aHeading ! !

!testRun: #MarsRoverLoggerTest #test15PositionHeadingLoggerOfMarsRoverTrackMovementAndRotation stamp: 'DA 6/2/2023 19:11:29'!
PASSED!

!testRun: #MarsRoverLoggerTest #test15PositionHeadingLoggerOfMarsRoverTrackMovementAndRotation stamp: 'DA 6/2/2023 19:11:32'!
PASSED!

!classRenamed: #MarsRoverLoggerTest as: #PositionLoggerTest stamp: 'DA 6/2/2023 19:23:33'!
Smalltalk renameClassNamed: #MarsRoverLoggerTest as: #PositionLoggerTest!

TestCase subclass: #HeadingLoggerTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #HeadingLoggerTest category: 'MarsRover-WithHeading' stamp: 'DA 6/2/2023 19:23:56'!
TestCase subclass: #HeadingLoggerTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!PositionLoggerTest class methodsFor: 'tests' stamp: 'DA 6/2/2023 19:24:17'!
test06HeadingLoggerRegisterHeadingEast
	|marsRover headingLogger|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth. 
	
	headingLogger := HeadingLogger new.
	
	marsRover addLogger: headingLogger.
	
	marsRover process: 'r'.
	
	self assert: (OrderedCollection with: 'East') equals: headingLogger logs. ! !

!methodRemoval: PositionLoggerTest #test06HeadingLoggerRegisterHeadingEast stamp: 'DA 6/2/2023 19:24:17'!
test06HeadingLoggerRegisterHeadingEast
	|marsRover headingLogger|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth. 
	
	headingLogger := HeadingLogger new.
	
	marsRover addLogger: headingLogger.
	
	marsRover process: 'r'.
	
	self assert: (OrderedCollection with: 'East') equals: headingLogger logs. !
!PositionLoggerTest methodsFor: 'tests' stamp: 'DA 6/2/2023 19:24:24'!
test06HeadingLoggerRegisterHeadingEast
	|marsRover headingLogger|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth. 
	
	headingLogger := HeadingLogger new.
	
	marsRover addLogger: headingLogger.
	
	marsRover process: 'r'.
	
	self assert: (OrderedCollection with: 'East') equals: headingLogger logs. ! !

!methodRemoval: PositionLoggerTest class #test06HeadingLoggerRegisterHeadingEast stamp: 'DA 6/2/2023 19:24:24'!
test06HeadingLoggerRegisterHeadingEast
	|marsRover headingLogger|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth. 
	
	headingLogger := HeadingLogger new.
	
	marsRover addLogger: headingLogger.
	
	marsRover process: 'r'.
	
	self assert: (OrderedCollection with: 'East') equals: headingLogger logs. !
!HeadingLoggerTest methodsFor: 'no messages' stamp: 'DA 6/2/2023 19:26:12'!
test12HeadingLoggerOfMarsRoverNotRotatingIsEmpty
	|marsRover headingLogger|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth. 
	
	headingLogger := HeadingLogger new.
	
	marsRover addLogger: headingLogger.
	
	marsRover process: 'f'.
	
	self assert: headingLogger logs isEmpty. ! !
!HeadingLoggerTest methodsFor: 'as yet unclassified' stamp: 'DA 6/2/2023 19:26:32'!
test01HeadingLoggerOfMarsRoverNotRotatingIsEmpty
	|marsRover headingLogger|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth. 
	
	headingLogger := HeadingLogger new.
	
	marsRover addLogger: headingLogger.
	
	marsRover process: 'f'.
	
	self assert: headingLogger logs isEmpty. ! !

!methodRemoval: HeadingLoggerTest #test12HeadingLoggerOfMarsRoverNotRotatingIsEmpty stamp: 'DA 6/2/2023 19:26:32'!
test12HeadingLoggerOfMarsRoverNotRotatingIsEmpty
	|marsRover headingLogger|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth. 
	
	headingLogger := HeadingLogger new.
	
	marsRover addLogger: headingLogger.
	
	marsRover process: 'f'.
	
	self assert: headingLogger logs isEmpty. !

!methodRemoval: PositionLoggerTest #test12HeadingLoggerOfMarsRoverNotRotatingIsEmpty stamp: 'DA 6/2/2023 19:26:49'!
test12HeadingLoggerOfMarsRoverNotRotatingIsEmpty
	|marsRover headingLogger|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth. 
	
	headingLogger := HeadingLogger new.
	
	marsRover addLogger: headingLogger.
	
	marsRover process: 'f'.
	
	self assert: headingLogger logs isEmpty. !
!HeadingLoggerTest methodsFor: 'as yet unclassified' stamp: 'DA 6/2/2023 19:27:06'!
test02HeadingLoggerRegisterHeadingEast
	|marsRover headingLogger|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth. 
	
	headingLogger := HeadingLogger new.
	
	marsRover addLogger: headingLogger.
	
	marsRover process: 'r'.
	
	self assert: (OrderedCollection with: 'East') equals: headingLogger logs. ! !
!HeadingLoggerTest methodsFor: 'as yet unclassified' stamp: 'DA 6/2/2023 19:27:30'!
test03HeadingLoggerRegisterHeadingWest
	|marsRover headingLogger|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth. 
	
	headingLogger := HeadingLogger new.
	
	marsRover addLogger: headingLogger.
	
	marsRover process: 'l'.
	
	self assert: (OrderedCollection with: 'West') equals: headingLogger logs.! !
!HeadingLoggerTest methodsFor: 'as yet unclassified' stamp: 'DA 6/2/2023 19:27:47'!
test04HeadingLoggerRegisterHeadingNorth
	|marsRover headingLogger|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingEast. 
	
	headingLogger := HeadingLogger new.
	
	marsRover addLogger: headingLogger.
	
	marsRover process: 'l'.
	
	self assert: (OrderedCollection with: 'North') equals: headingLogger logs. ! !
!HeadingLoggerTest methodsFor: 'as yet unclassified' stamp: 'DA 6/2/2023 19:28:12'!
test05HeadingLoggerRegisterHeadingSouth
	|marsRover headingLogger|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingEast. 
	
	headingLogger := HeadingLogger new.
	
	marsRover addLogger: headingLogger.
	
	marsRover process: 'r'.
	
	self assert: (OrderedCollection with: 'South') equals: headingLogger logs. ! !
!HeadingLoggerTest methodsFor: 'as yet unclassified' stamp: 'DA 6/2/2023 19:28:34'!
test06HeadingLoggerRegisterMoreThanOneRotation
	|marsRover headingLogger|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth. 
	
	headingLogger := HeadingLogger new.
	
	marsRover addLogger: headingLogger.
	
	marsRover process: 'rl'.
	
	self assert: (OrderedCollection with: 'East' with: 'North') equals: headingLogger logs. ! !

!methodRemoval: PositionLoggerTest #test06HeadingLoggerRegisterHeadingEast stamp: 'DA 6/2/2023 19:28:40'!
test06HeadingLoggerRegisterHeadingEast
	|marsRover headingLogger|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth. 
	
	headingLogger := HeadingLogger new.
	
	marsRover addLogger: headingLogger.
	
	marsRover process: 'r'.
	
	self assert: (OrderedCollection with: 'East') equals: headingLogger logs. !

!methodRemoval: PositionLoggerTest #test07HeadingLoggerRegisterHeadingWest stamp: 'DA 6/2/2023 19:28:42'!
test07HeadingLoggerRegisterHeadingWest
	|marsRover headingLogger|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth. 
	
	headingLogger := HeadingLogger new.
	
	marsRover addLogger: headingLogger.
	
	marsRover process: 'l'.
	
	self assert: (OrderedCollection with: 'West') equals: headingLogger logs. !

!methodRemoval: PositionLoggerTest #test08HeadingLoggerRegisterHeadingNorth stamp: 'DA 6/2/2023 19:28:43'!
test08HeadingLoggerRegisterHeadingNorth
	|marsRover headingLogger|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingEast. 
	
	headingLogger := HeadingLogger new.
	
	marsRover addLogger: headingLogger.
	
	marsRover process: 'l'.
	
	self assert: (OrderedCollection with: 'North') equals: headingLogger logs. !

!methodRemoval: PositionLoggerTest #test09HeadingLoggerRegisterHeadingSouth stamp: 'DA 6/2/2023 19:28:44'!
test09HeadingLoggerRegisterHeadingSouth
	|marsRover headingLogger|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingEast. 
	
	headingLogger := HeadingLogger new.
	
	marsRover addLogger: headingLogger.
	
	marsRover process: 'r'.
	
	self assert: (OrderedCollection with: 'South') equals: headingLogger logs. !

!methodRemoval: PositionLoggerTest #test11HeadingLoggerRegisterMoreThanOneRotation stamp: 'DA 6/2/2023 19:28:46'!
test11HeadingLoggerRegisterMoreThanOneRotation
	|marsRover headingLogger|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth. 
	
	headingLogger := HeadingLogger new.
	
	marsRover addLogger: headingLogger.
	
	marsRover process: 'rl'.
	
	self assert: (OrderedCollection with: 'East' with: 'North') equals: headingLogger logs. !
!PositionLoggerTest methodsFor: 'tests' stamp: 'DA 6/2/2023 19:28:59'!
test06PositionLoggerRegisterMoreThanOneMovement
	|marsRover positionLogger|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth. 
	
	positionLogger := PositionLogger new.
	
	marsRover addLogger: positionLogger.
	
	marsRover process: 'ff'.
	
	self assert: (OrderedCollection with: 1@2 with: 1@3) equals: positionLogger logs. ! !

!methodRemoval: PositionLoggerTest #test10PositionLoggerRegisterMoreThanOneMovement stamp: 'DA 6/2/2023 19:28:59'!
test10PositionLoggerRegisterMoreThanOneMovement
	|marsRover positionLogger|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth. 
	
	positionLogger := PositionLogger new.
	
	marsRover addLogger: positionLogger.
	
	marsRover process: 'ff'.
	
	self assert: (OrderedCollection with: 1@2 with: 1@3) equals: positionLogger logs. !
!PositionLoggerTest methodsFor: 'tests' stamp: 'DA 6/2/2023 19:29:09'!
test07PositionLoggerOfMarsRoverRotatingDoesntTrackMovements
	|marsRover positionLogger|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth. 
	
	positionLogger := PositionLogger new.
	
	marsRover addLogger: positionLogger.
	
	marsRover process: 'r'.
	
	self assert: positionLogger logs isEmpty. ! !

!methodRemoval: PositionLoggerTest #test13PositionLoggerOfMarsRoverRotatingDoesntTrackMovements stamp: 'DA 6/2/2023 19:29:09'!
test13PositionLoggerOfMarsRoverRotatingDoesntTrackMovements
	|marsRover positionLogger|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth. 
	
	positionLogger := PositionLogger new.
	
	marsRover addLogger: positionLogger.
	
	marsRover process: 'r'.
	
	self assert: positionLogger logs isEmpty. !

TestCase subclass: #PositionHeadingLoggerTest
	instanceVariableNames: 'logs'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #PositionHeadingLoggerTest category: 'MarsRover-WithHeading' stamp: 'DA 6/2/2023 19:29:27'!
TestCase subclass: #PositionHeadingLoggerTest
	instanceVariableNames: 'logs'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!PositionHeadingLoggerTest methodsFor: 'no messages' stamp: 'DA 6/2/2023 19:29:36'!
test01PositionHeadingLoggerOfMarsRoverThatDidntMoveIsEmpty
	|marsRover positionHeadingLogger|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth. 
	
	positionHeadingLogger := PositionHeadingLogger new.
	
	marsRover addLogger: positionHeadingLogger.
	
	marsRover process: ''.
	
	self assert: positionHeadingLogger logs isEmpty. ! !

!methodRemoval: PositionLoggerTest #test14PositionHeadingLoggerOfMarsRoverThatDidntMoveIsEmpty stamp: 'DA 6/2/2023 19:29:42'!
test14PositionHeadingLoggerOfMarsRoverThatDidntMoveIsEmpty
	|marsRover positionHeadingLogger|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth. 
	
	positionHeadingLogger := PositionHeadingLogger new.
	
	marsRover addLogger: positionHeadingLogger.
	
	marsRover process: ''.
	
	self assert: positionHeadingLogger logs isEmpty. !
!PositionHeadingLoggerTest methodsFor: 'as yet unclassified' stamp: 'DA 6/2/2023 19:29:57'!
test02PositionHeadingLoggerOfMarsRoverTrackMovementAndRotation
	|marsRover positionHeadingLogger|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth. 
	
	positionHeadingLogger := PositionHeadingLogger new.
	
	marsRover addLogger: positionHeadingLogger.
	
	marsRover process: 'fr'.
	
	self assert: (OrderedCollection with: 1@2 with: 'East') equals: positionHeadingLogger logs . ! !

!methodRemoval: PositionLoggerTest #test15PositionHeadingLoggerOfMarsRoverTrackMovementAndRotation stamp: 'DA 6/2/2023 19:30:03'!
test15PositionHeadingLoggerOfMarsRoverTrackMovementAndRotation
	|marsRover positionHeadingLogger|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth. 
	
	positionHeadingLogger := PositionHeadingLogger new.
	
	marsRover addLogger: positionHeadingLogger.
	
	marsRover process: 'fr'.
	
	self assert: (OrderedCollection with: 1@2 with: 'East') equals: positionHeadingLogger logs . !

TestCase subclass: #PositionWindowLoggerTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #PositionWindowLoggerTest category: 'MarsRover-WithHeading' stamp: 'DA 6/2/2023 19:30:50'!
TestCase subclass: #PositionWindowLoggerTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #PositionWindowLogger category: 'MarsRover-WithHeading' stamp: 'DA 6/2/2023 19:34:21'!
Object subclass: #PositionWindowLogger
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!PositionWindowLoggerTest methodsFor: 'no messages' stamp: 'DA 6/2/2023 19:34:16'!
test01PositionWindowLoggerDontLogIfEmptyCommand
	|marsRover positionWindowLogger|
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	positionWindowLogger := PositionWindowLogger new. 
	
	marsRover addLogger: positionWindowLogger.
	marsRover process: ''.
	self assert: positionWindowLogger positionValue isEmpty. ! !

!testRun: #PositionWindowLoggerTest #test01PositionWindowLoggerDontLogIfEmptyCommand stamp: 'DA 6/2/2023 19:34:26'!
ERROR!
!PositionWindowLogger methodsFor: 'category-name' stamp: 'DA 6/2/2023 19:34:33'!
positionValue
	self shouldBeImplemented.! !

!classDefinition: #PositionWindowLogger category: 'MarsRover-WithHeading' stamp: 'DA 6/2/2023 19:34:46'!
Object subclass: #PositionWindowLogger
	instanceVariableNames: 'positionValue'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!PositionWindowLogger methodsFor: 'category-name' stamp: 'DA 6/2/2023 19:34:44' prior: 50626696!
positionValue
	^positionValue! !

!testRun: #PositionWindowLoggerTest #test01PositionWindowLoggerDontLogIfEmptyCommand stamp: 'DA 6/2/2023 19:34:48'!
ERROR!
!PositionWindowLogger methodsFor: 'category-name' stamp: 'DA 6/2/2023 19:35:07' overrides: 16920235!
initialize
	positionValue := ''.! !
!PositionWindowLogger methodsFor: 'category-name' stamp: 'DA 6/2/2023 19:35:51' prior: 50626718 overrides: 16920235!
initialize
	positionValue := OrderedCollection new.! !

!testRun: #PositionWindowLoggerTest #test01PositionWindowLoggerDontLogIfEmptyCommand stamp: 'DA 6/2/2023 19:35:57'!
PASSED!
!PositionWindowLoggerTest methodsFor: 'as yet unclassified' stamp: 'DA 6/2/2023 19:37:57'!
test02PositionWindowLoggerRegisterMovement
	|marsRover positionWindowLogger|
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	positionWindowLogger := PositionWindowLogger new. 
	
	marsRover addLogger: positionWindowLogger.
	marsRover process: 'f'.
	
	self assert: 1@2 equals: positionWindowLogger positionValue. ! !

!testRun: #PositionWindowLoggerTest #test02PositionWindowLoggerRegisterMovement stamp: 'DA 6/2/2023 19:38:04'!
ERROR!

!testRun: #PositionWindowLoggerTest #test02PositionWindowLoggerRegisterMovement stamp: 'DA 6/2/2023 19:38:04'!
ERROR!
!PositionWindowLogger methodsFor: 'category-name' stamp: 'DA 6/2/2023 19:38:11'!
addPosition: aPosition 
	self shouldBeImplemented.! !
!PositionWindowLogger methodsFor: 'category-name' stamp: 'DA 6/2/2023 19:38:26' prior: 50626753!
addPosition: aPosition 
	positionValue := aPosition ! !

!testRun: #PositionWindowLoggerTest #test02PositionWindowLoggerRegisterMovement stamp: 'DA 6/2/2023 19:38:28'!
PASSED!
!PositionWindowLogger methodsFor: 'category-name' stamp: 'DA 6/2/2023 19:38:53' prior: 50626723 overrides: 16920235!
initialize
	positionValue := ''.! !
!PositionWindowLogger methodsFor: 'category-name' stamp: 'DA 6/2/2023 19:39:04' prior: 50626758!
addPosition: aPosition 
	positionValue := aPosition printString ! !
!PositionWindowLoggerTest methodsFor: 'as yet unclassified' stamp: 'DA 6/2/2023 19:39:16' prior: 50626732!
test02PositionWindowLoggerRegisterMovement
	|marsRover positionWindowLogger|
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	positionWindowLogger := PositionWindowLogger new. 
	
	marsRover addLogger: positionWindowLogger.
	marsRover process: 'f'.
	
	self assert: '1@2' equals: positionWindowLogger positionValue. ! !

!testRun: #PositionWindowLoggerTest #test02PositionWindowLoggerRegisterMovement stamp: 'DA 6/2/2023 19:39:19'!
PASSED!
!PositionWindowLoggerTest methodsFor: 'as yet unclassified' stamp: 'DA 6/2/2023 19:39:38' prior: 50626679!
test01PositionWindowLoggerDontLogIfEmptyCommand
	|marsRover positionWindowLogger|
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	positionWindowLogger := PositionWindowLogger new. 
	
	marsRover addLogger: positionWindowLogger.
	marsRover process: ''.
	self assert: '' equals: positionWindowLogger positionValue. ! !

!testRun: #PositionWindowLoggerTest #test01PositionWindowLoggerDontLogIfEmptyCommand stamp: 'DA 6/2/2023 19:39:45'!
PASSED!

!testRun: #PositionWindowLoggerTest #test02PositionWindowLoggerRegisterMovement stamp: 'DA 6/2/2023 19:39:45'!
PASSED!
!PositionWindowLoggerTest methodsFor: 'as yet unclassified' stamp: 'DA 6/2/2023 19:40:49'!
test03PositionWindowLoggerDoesntRegisterRotation
	|marsRover positionWindowLogger|
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	positionWindowLogger := PositionWindowLogger new. 
	
	marsRover addLogger: positionWindowLogger.
	marsRover process: 'r'.
	
	self assert: '' equals: positionWindowLogger positionValue. ! !

!testRun: #PositionWindowLoggerTest #test03PositionWindowLoggerDoesntRegisterRotation stamp: 'DA 6/2/2023 19:40:52'!
ERROR!

!testRun: #PositionWindowLoggerTest #test03PositionWindowLoggerDoesntRegisterRotation stamp: 'DA 6/2/2023 19:40:52'!
ERROR!
!PositionWindowLogger methodsFor: 'category-name' stamp: 'DA 6/2/2023 19:40:56'!
addHeading: aRenameMe1 
	self shouldBeImplemented.! !
!PositionWindowLogger methodsFor: 'category-name' stamp: 'DA 6/2/2023 19:41:08' prior: 50626839!
addHeading: aHeading
	! !

!testRun: #PositionWindowLoggerTest #test03PositionWindowLoggerDoesntRegisterRotation stamp: 'DA 6/2/2023 19:41:09'!
PASSED!
!PositionWindowLoggerTest methodsFor: 'as yet unclassified' stamp: 'DA 6/2/2023 19:42:49'!
test04PositionWindowLoggerStoreLastPosition
	|marsRover positionWindowLogger|
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	positionWindowLogger := PositionWindowLogger new. 
	
	marsRover addLogger: positionWindowLogger.
	marsRover process: 'ff'.
	
	self assert: '1@3' equals: positionWindowLogger positionValue. ! !

!testRun: #PositionWindowLoggerTest #test04PositionWindowLoggerStoreLastPosition stamp: 'DA 6/2/2023 19:42:54'!
PASSED!

TestCase subclass: #HeadingWindowLoggerTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #HeadingWindowLoggerTest category: 'MarsRover-WithHeading' stamp: 'DA 6/2/2023 19:45:23'!
TestCase subclass: #HeadingWindowLoggerTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!HeadingWindowLoggerTest methodsFor: 'no messages' stamp: 'DA 6/2/2023 19:45:51'!
test01HeadingWindowLoggerDontLogIfEmptyCommand
	|marsRover positionWindowLogger|
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	positionWindowLogger := PositionWindowLogger new. 
	
	marsRover addLogger: positionWindowLogger.
	marsRover process: ''.
	self assert: '' equals: positionWindowLogger positionValue. ! !
!HeadingWindowLoggerTest methodsFor: 'as yet unclassified' stamp: 'DA 6/2/2023 19:46:14' prior: 50626882!
test01HeadingWindowLoggerDontLogIfEmptyCommand
	|marsRover headingWindowLogger|
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	headingWindowLogger := PositionWindowLogger new. 
	
	marsRover addLogger: headingWindowLogger.
	marsRover process: ''.
	self assert: '' equals: headingWindowLogger positionValue. ! !

!classDefinition: #HeadingWindowLogger category: 'MarsRover-WithHeading' stamp: 'DA 6/2/2023 19:46:27'!
Object subclass: #HeadingWindowLogger
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!HeadingWindowLoggerTest methodsFor: 'as yet unclassified' stamp: 'DA 6/2/2023 19:46:24' prior: 50626896!
test01HeadingWindowLoggerDontLogIfEmptyCommand
	|marsRover headingWindowLogger|
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	headingWindowLogger := HeadingWindowLogger new. 
	
	marsRover addLogger: headingWindowLogger.
	marsRover process: ''.
	
	self assert: '' equals: headingWindowLogger positionValue. ! !

!testRun: #HeadingWindowLoggerTest #test01HeadingWindowLoggerDontLogIfEmptyCommand stamp: 'DA 6/2/2023 19:46:31'!
ERROR!

!testRun: #HeadingWindowLoggerTest #test01HeadingWindowLoggerDontLogIfEmptyCommand stamp: 'DA 6/2/2023 19:46:31'!
ERROR!
!HeadingWindowLogger methodsFor: 'category-name' stamp: 'DA 6/2/2023 19:46:39'!
positionValue
	self shouldBeImplemented.! !
!HeadingWindowLoggerTest methodsFor: 'as yet unclassified' stamp: 'DA 6/2/2023 19:46:50' prior: 50626918!
test01HeadingWindowLoggerDontLogIfEmptyCommand
	|marsRover headingWindowLogger|
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	headingWindowLogger := HeadingWindowLogger new. 
	
	marsRover addLogger: headingWindowLogger.
	marsRover process: ''.
	
	self assert: '' equals: headingWindowLogger headingValue. ! !

!testRun: #HeadingWindowLoggerTest #test01HeadingWindowLoggerDontLogIfEmptyCommand stamp: 'DA 6/2/2023 19:46:53'!
ERROR!
!HeadingWindowLogger methodsFor: 'category-name' stamp: 'DA 6/2/2023 19:46:57'!
headingValue
	self shouldBeImplemented.! !

!classDefinition: #HeadingWindowLogger category: 'MarsRover-WithHeading' stamp: 'DA 6/2/2023 19:47:09'!
Object subclass: #HeadingWindowLogger
	instanceVariableNames: 'headingValue'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!HeadingWindowLogger methodsFor: 'category-name' stamp: 'DA 6/2/2023 19:47:07' prior: 50626961!
headingValue
	^headingValue.! !

!testRun: #HeadingWindowLoggerTest #test01HeadingWindowLoggerDontLogIfEmptyCommand stamp: 'DA 6/2/2023 19:47:16'!
FAILURE!

!methodRemoval: HeadingWindowLogger #positionValue stamp: 'DA 6/2/2023 19:47:29'!
positionValue
	self shouldBeImplemented.!
!HeadingWindowLogger methodsFor: 'category-name' stamp: 'DA 6/2/2023 19:47:41' overrides: 16920235!
initialize 
	headingValue := ''! !

!testRun: #HeadingWindowLoggerTest #test01HeadingWindowLoggerDontLogIfEmptyCommand stamp: 'DA 6/2/2023 19:47:47'!
PASSED!
!HeadingWindowLoggerTest methodsFor: 'as yet unclassified' stamp: 'DA 6/2/2023 19:48:17'!
test02HeadingWindowLoggerRegisterRotation
	|marsRover positionWindowLogger|
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	positionWindowLogger := PositionWindowLogger new. 
	
	marsRover addLogger: positionWindowLogger.
	marsRover process: 'f'.
	
	self assert: '1@2' equals: positionWindowLogger positionValue. ! !
!HeadingWindowLoggerTest methodsFor: 'as yet unclassified' stamp: 'DA 6/2/2023 19:48:54' prior: 50626994!
test02HeadingWindowLoggerRegisterRotation
	|marsRover headingWindowLogger|
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	headingWindowLogger := PositionWindowLogger new. 
	
	marsRover addLogger: headingWindowLogger.
	marsRover process: 'f'.
	
	self assert: '1@2' equals: headingWindowLogger positionValue. ! !
!HeadingWindowLoggerTest methodsFor: 'as yet unclassified' stamp: 'DA 6/2/2023 19:49:16' prior: 50627008!
test02HeadingWindowLoggerRegisterRotation
	|marsRover headingWindowLogger|
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	headingWindowLogger := HeadingWindowLogger new. 
	
	marsRover addLogger: headingWindowLogger.
	marsRover process: 'r'.
	
	self assert: 'East' equals: headingWindowLogger headingValue. ! !

!testRun: #HeadingWindowLoggerTest #test02HeadingWindowLoggerRegisterRotation stamp: 'DA 6/2/2023 19:49:20'!
ERROR!
!HeadingWindowLogger methodsFor: 'category-name' stamp: 'DA 6/2/2023 19:49:26'!
addHeading: aRenameMe1 
	self shouldBeImplemented.! !
!HeadingWindowLogger methodsFor: 'category-name' stamp: 'DA 6/2/2023 19:49:40' prior: 50627039!
addHeading: aHeading
	headingValue := aHeading ! !

!testRun: #HeadingWindowLoggerTest #test02HeadingWindowLoggerRegisterRotation stamp: 'DA 6/2/2023 19:49:42'!
PASSED!

!testRun: #HeadingWindowLoggerTest #test01HeadingWindowLoggerDontLogIfEmptyCommand stamp: 'DA 6/2/2023 19:49:42'!
PASSED!

!testRun: #HeadingWindowLoggerTest #test02HeadingWindowLoggerRegisterRotation stamp: 'DA 6/2/2023 19:49:42'!
PASSED!
!HeadingWindowLoggerTest methodsFor: 'as yet unclassified' stamp: 'DA 6/2/2023 19:52:06'!
test03HeadingWindowLoggerIfProcessMovementShowNothing
	|marsRover headingWindowLogger|
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	headingWindowLogger := HeadingWindowLogger new. 
	
	marsRover addLogger: headingWindowLogger.
	marsRover process: 'f'.
	
	self assert: '' equals: headingWindowLogger headingValue. ! !

!testRun: #HeadingWindowLoggerTest #test03HeadingWindowLoggerIfProcessMovementShowNothing stamp: 'DA 6/2/2023 19:52:08'!
ERROR!
!HeadingWindowLogger methodsFor: 'category-name' stamp: 'DA 6/2/2023 19:52:14'!
addPosition: aPosition 
	self shouldBeImplemented.! !
!HeadingWindowLogger methodsFor: 'category-name' stamp: 'DA 6/2/2023 19:52:23' prior: 50627078!
addPosition: aPosition 
	headingValue := ''! !

!testRun: #HeadingWindowLoggerTest #test03HeadingWindowLoggerIfProcessMovementShowNothing stamp: 'DA 6/2/2023 19:52:26'!
PASSED!

!testRun: #HeadingWindowLoggerTest #test01HeadingWindowLoggerDontLogIfEmptyCommand stamp: 'DA 6/2/2023 19:52:26'!
PASSED!

!testRun: #HeadingWindowLoggerTest #test02HeadingWindowLoggerRegisterRotation stamp: 'DA 6/2/2023 19:52:26'!
PASSED!

!testRun: #HeadingWindowLoggerTest #test03HeadingWindowLoggerIfProcessMovementShowNothing stamp: 'DA 6/2/2023 19:52:26'!
PASSED!
!HeadingWindowLoggerTest methodsFor: 'as yet unclassified' stamp: 'DA 6/2/2023 19:53:56'!
test04HeadingWindowLoggerShowLastHeading
	|marsRover headingWindowLogger|
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	headingWindowLogger := HeadingWindowLogger new. 
	
	marsRover addLogger: headingWindowLogger.
	marsRover process: 'rr'.
	
	self assert: 'South' equals: headingWindowLogger headingValue. ! !

!testRun: #HeadingWindowLoggerTest #test04HeadingWindowLoggerShowLastHeading stamp: 'DA 6/2/2023 19:53:59'!
PASSED!

!testRun: #HeadingWindowLoggerTest #test01HeadingWindowLoggerDontLogIfEmptyCommand stamp: 'DA 6/2/2023 19:53:59'!
PASSED!

!testRun: #HeadingWindowLoggerTest #test02HeadingWindowLoggerRegisterRotation stamp: 'DA 6/2/2023 19:53:59'!
PASSED!

!testRun: #HeadingWindowLoggerTest #test03HeadingWindowLoggerIfProcessMovementShowNothing stamp: 'DA 6/2/2023 19:53:59'!
PASSED!

!testRun: #HeadingWindowLoggerTest #test04HeadingWindowLoggerShowLastHeading stamp: 'DA 6/2/2023 19:53:59'!
PASSED!

TestCase subclass: #PositionHeadingWindowTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #PositionHeadingWindowTest category: 'MarsRover-WithHeading' stamp: 'DA 6/2/2023 19:55:51'!
TestCase subclass: #PositionHeadingWindowTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

Object subclass: #PositionWindow
	instanceVariableNames: 'positionValue'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #PositionWindow category: 'MarsRover-WithHeading' stamp: 'DA 6/2/2023 19:56:17'!
Object subclass: #PositionWindow
	instanceVariableNames: 'positionValue'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #PositionWindow stamp: 'DA 6/2/2023 19:56:33'!
Object subclass: #PositionWindow
	instanceVariableNames: 'positionValue'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRenamed: #PositionWindowLogger as: #PositionWindow stamp: 'DA 6/2/2023 19:56:42'!
Smalltalk renameClassNamed: #PositionWindowLogger as: #PositionWindow!
!PositionWindowLoggerTest methodsFor: 'as yet unclassified' stamp: 'DA 6/2/2023 19:56:42' prior: 50626797!
test01PositionWindowLoggerDontLogIfEmptyCommand
	|marsRover positionWindowLogger|
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	positionWindowLogger := PositionWindow new. 
	
	marsRover addLogger: positionWindowLogger.
	marsRover process: ''.
	self assert: '' equals: positionWindowLogger positionValue. ! !
!PositionWindowLoggerTest methodsFor: 'as yet unclassified' stamp: 'DA 6/2/2023 19:56:42' prior: 50626779!
test02PositionWindowLoggerRegisterMovement
	|marsRover positionWindowLogger|
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	positionWindowLogger := PositionWindow new. 
	
	marsRover addLogger: positionWindowLogger.
	marsRover process: 'f'.
	
	self assert: '1@2' equals: positionWindowLogger positionValue. ! !
!PositionWindowLoggerTest methodsFor: 'as yet unclassified' stamp: 'DA 6/2/2023 19:56:42' prior: 50626852!
test04PositionWindowLoggerStoreLastPosition
	|marsRover positionWindowLogger|
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	positionWindowLogger := PositionWindow new. 
	
	marsRover addLogger: positionWindowLogger.
	marsRover process: 'ff'.
	
	self assert: '1@3' equals: positionWindowLogger positionValue. ! !
!PositionWindowLoggerTest methodsFor: 'as yet unclassified' stamp: 'DA 6/2/2023 19:56:43' prior: 50626818!
test03PositionWindowLoggerDoesntRegisterRotation
	|marsRover positionWindowLogger|
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	positionWindowLogger := PositionWindow new. 
	
	marsRover addLogger: positionWindowLogger.
	marsRover process: 'r'.
	
	self assert: '' equals: positionWindowLogger positionValue. ! !

!classRenamed: #PositionWindowLoggerTest as: #PositionWindowTest stamp: 'DA 6/2/2023 19:56:59'!
Smalltalk renameClassNamed: #PositionWindowLoggerTest as: #PositionWindowTest!

!classRenamed: #HeadingWindowLogger as: #HeadingWindow stamp: 'DA 6/2/2023 19:57:18'!
Smalltalk renameClassNamed: #HeadingWindowLogger as: #HeadingWindow!
!HeadingWindowLoggerTest methodsFor: 'as yet unclassified' stamp: 'DA 6/2/2023 19:57:18' prior: 50626944!
test01HeadingWindowLoggerDontLogIfEmptyCommand
	|marsRover headingWindowLogger|
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	headingWindowLogger := HeadingWindow new. 
	
	marsRover addLogger: headingWindowLogger.
	marsRover process: ''.
	
	self assert: '' equals: headingWindowLogger headingValue. ! !
!HeadingWindowLoggerTest methodsFor: 'as yet unclassified' stamp: 'DA 6/2/2023 19:57:18' prior: 50627022!
test02HeadingWindowLoggerRegisterRotation
	|marsRover headingWindowLogger|
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	headingWindowLogger := HeadingWindow new. 
	
	marsRover addLogger: headingWindowLogger.
	marsRover process: 'r'.
	
	self assert: 'East' equals: headingWindowLogger headingValue. ! !
!HeadingWindowLoggerTest methodsFor: 'as yet unclassified' stamp: 'DA 6/2/2023 19:57:18' prior: 50627060!
test03HeadingWindowLoggerIfProcessMovementShowNothing
	|marsRover headingWindowLogger|
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	headingWindowLogger := HeadingWindow new. 
	
	marsRover addLogger: headingWindowLogger.
	marsRover process: 'f'.
	
	self assert: '' equals: headingWindowLogger headingValue. ! !
!HeadingWindowLoggerTest methodsFor: 'as yet unclassified' stamp: 'DA 6/2/2023 19:57:18' prior: 50627103!
test04HeadingWindowLoggerShowLastHeading
	|marsRover headingWindowLogger|
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	headingWindowLogger := HeadingWindow new. 
	
	marsRover addLogger: headingWindowLogger.
	marsRover process: 'rr'.
	
	self assert: 'South' equals: headingWindowLogger headingValue. ! !

!classRenamed: #HeadingWindowLoggerTest as: #HeadingWindowTest stamp: 'DA 6/2/2023 19:57:27'!
Smalltalk renameClassNamed: #HeadingWindowLoggerTest as: #HeadingWindowTest!

!classDefinition: #PositionHeadingWindow category: 'MarsRover-WithHeading' stamp: 'DA 6/2/2023 20:00:12'!
Object subclass: #PositionHeadingWindow
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!PositionHeadingWindowTest methodsFor: 'no messages' stamp: 'DA 6/2/2023 20:00:09'!
test01PositionHeadingWindowOfMarsRoverThatDoesntMoveIsEmpty
	|marsRover positionHeadingWindow|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth. 
	
	positionHeadingWindow := PositionHeadingWindow new.
	
	marsRover addLogger: positionHeadingWindow.
	
	marsRover process: ''.
	
	self assert: positionHeadingWindow logs isEmpty. ! !
!PositionHeadingWindowTest methodsFor: 'as yet unclassified' stamp: 'DA 6/2/2023 20:00:44' prior: 50627310!
test01PositionHeadingWindowOfMarsRoverThatDoesntMoveIsEmpty
	|marsRover positionHeadingWindow|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth. 
	
	positionHeadingWindow := PositionHeadingWindow new.
	
	marsRover addLogger: positionHeadingWindow.
	
	marsRover process: ''.
	
	self assert: positionHeadingWindow positionHeadingValue isEmpty. ! !

!testRun: #PositionHeadingWindowTest #test01PositionHeadingWindowOfMarsRoverThatDoesntMoveIsEmpty stamp: 'DA 6/2/2023 20:00:50'!
ERROR!
!PositionHeadingWindow methodsFor: 'category-name' stamp: 'DA 6/2/2023 20:00:56'!
positionHeadingValue
	self shouldBeImplemented.! !

!classDefinition: #PositionHeadingWindow category: 'MarsRover-WithHeading' stamp: 'DA 6/2/2023 20:01:08'!
Object subclass: #PositionHeadingWindow
	instanceVariableNames: 'positionHeadingValue'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!PositionHeadingWindow methodsFor: 'category-name' stamp: 'DA 6/2/2023 20:01:06' prior: 50627344!
positionHeadingValue
	^ positionHeadingValue! !

!testRun: #PositionHeadingWindowTest #test01PositionHeadingWindowOfMarsRoverThatDoesntMoveIsEmpty stamp: 'DA 6/2/2023 20:01:10'!
ERROR!
!PositionHeadingWindow methodsFor: 'category-name' stamp: 'DA 6/2/2023 20:02:05' overrides: 16920235!
initialize
	positionHeadingValue := Array with: ''  with:''.! !

!testRun: #PositionHeadingWindowTest #test01PositionHeadingWindowOfMarsRoverThatDoesntMoveIsEmpty stamp: 'DA 6/2/2023 20:02:28'!
FAILURE!
!PositionHeadingWindowTest methodsFor: 'as yet unclassified' stamp: 'DA 6/2/2023 20:02:58' prior: 50627325!
test01PositionHeadingWindowOfMarsRoverThatDoesntMoveIsEmpty
	|marsRover positionHeadingWindow|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth. 
	
	positionHeadingWindow := PositionHeadingWindow new.
	
	marsRover addLogger: positionHeadingWindow.
	
	marsRover process: ''.
	
	self assert: (Array with: '' with: '') equals: positionHeadingWindow positionHeadingValue. ! !

!testRun: #PositionHeadingWindowTest #test01PositionHeadingWindowOfMarsRoverThatDoesntMoveIsEmpty stamp: 'DA 6/2/2023 20:02:59'!
PASSED!

!testRun: #PositionHeadingWindowTest #test01PositionHeadingWindowOfMarsRoverThatDoesntMoveIsEmpty stamp: 'DA 6/2/2023 20:02:59'!
PASSED!
!PositionHeadingWindowTest methodsFor: 'as yet unclassified' stamp: 'DA 6/2/2023 20:04:03'!
test01PositionHeadingWindowMovingFowardShowsPositionAndEmptyHeading
	|marsRover positionHeadingWindow|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth. 
	
	positionHeadingWindow := PositionHeadingWindow new.
	
	marsRover addLogger: positionHeadingWindow.
	
	marsRover process: 'f'.
	
	self assert: (Array with: '1@2' with: '') equals: positionHeadingWindow positionHeadingValue. ! !
!PositionHeadingWindowTest methodsFor: 'as yet unclassified' stamp: 'DA 6/2/2023 20:04:17'!
test02PositionHeadingWindowOfMarsRoverThatDoesntMoveIsEmpty
	|marsRover positionHeadingWindow|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth. 
	
	positionHeadingWindow := PositionHeadingWindow new.
	
	marsRover addLogger: positionHeadingWindow.
	
	marsRover process: ''.
	
	self assert: (Array with: '' with: '') equals: positionHeadingWindow positionHeadingValue. ! !

!methodRemoval: PositionHeadingWindowTest #test01PositionHeadingWindowOfMarsRoverThatDoesntMoveIsEmpty stamp: 'DA 6/2/2023 20:04:17'!
test01PositionHeadingWindowOfMarsRoverThatDoesntMoveIsEmpty
	|marsRover positionHeadingWindow|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth. 
	
	positionHeadingWindow := PositionHeadingWindow new.
	
	marsRover addLogger: positionHeadingWindow.
	
	marsRover process: ''.
	
	self assert: (Array with: '' with: '') equals: positionHeadingWindow positionHeadingValue. !

!testRun: #PositionHeadingWindowTest #test02PositionHeadingWindowOfMarsRoverThatDoesntMoveIsEmpty stamp: 'DA 6/2/2023 20:04:20'!
PASSED!

!testRun: #PositionHeadingWindowTest #test01PositionHeadingWindowMovingFowardShowsPositionAndEmptyHeading stamp: 'DA 6/2/2023 20:04:20'!
ERROR!

!testRun: #PositionHeadingWindowTest #test02PositionHeadingWindowOfMarsRoverThatDoesntMoveIsEmpty stamp: 'DA 6/2/2023 20:04:20'!
PASSED!

!testRun: #PositionHeadingWindowTest #test01PositionHeadingWindowMovingFowardShowsPositionAndEmptyHeading stamp: 'DA 6/2/2023 20:04:20'!
ERROR!
!PositionHeadingWindow methodsFor: 'category-name' stamp: 'DA 6/2/2023 20:04:25'!
addPosition: aPosition 
	self shouldBeImplemented.! !
!PositionHeadingWindow methodsFor: 'category-name' stamp: 'DA 6/2/2023 20:05:30' prior: 50627466!
addPosition: aPosition 
	positionHeadingValue at:1 put: aPosition. ! !

!testRun: #PositionHeadingWindowTest #test01PositionHeadingWindowMovingFowardShowsPositionAndEmptyHeading stamp: 'DA 6/2/2023 20:05:32'!
FAILURE!
!PositionHeadingWindow methodsFor: 'category-name' stamp: 'DA 6/2/2023 20:05:55' prior: 50627471!
addPosition: aPosition 
	positionHeadingValue at:1 put: aPosition printString. ! !

!testRun: #PositionHeadingWindowTest #test01PositionHeadingWindowMovingFowardShowsPositionAndEmptyHeading stamp: 'DA 6/2/2023 20:05:57'!
PASSED!

!testRun: #PositionHeadingWindowTest #test02PositionHeadingWindowOfMarsRoverThatDoesntMoveIsEmpty stamp: 'DA 6/2/2023 20:05:57'!
PASSED!
!PositionHeadingWindowTest methodsFor: 'as yet unclassified' stamp: 'DA 6/2/2023 20:06:21'!
test01PositionHeadingWindowOfMarsRoverThatDoesntMoveIsEmpty
	|marsRover positionHeadingWindow|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth. 
	
	positionHeadingWindow := PositionHeadingWindow new.
	
	marsRover addLogger: positionHeadingWindow.
	
	marsRover process: ''.
	
	self assert: (Array with: '' with: '') equals: positionHeadingWindow positionHeadingValue. ! !

!methodRemoval: PositionHeadingWindowTest #test02PositionHeadingWindowOfMarsRoverThatDoesntMoveIsEmpty stamp: 'DA 6/2/2023 20:06:21'!
test02PositionHeadingWindowOfMarsRoverThatDoesntMoveIsEmpty
	|marsRover positionHeadingWindow|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth. 
	
	positionHeadingWindow := PositionHeadingWindow new.
	
	marsRover addLogger: positionHeadingWindow.
	
	marsRover process: ''.
	
	self assert: (Array with: '' with: '') equals: positionHeadingWindow positionHeadingValue. !
!PositionHeadingWindowTest methodsFor: 'as yet unclassified' stamp: 'DA 6/2/2023 20:06:28'!
test02PositionHeadingWindowMovingFowardShowsPositionAndEmptyHeading
	|marsRover positionHeadingWindow|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth. 
	
	positionHeadingWindow := PositionHeadingWindow new.
	
	marsRover addLogger: positionHeadingWindow.
	
	marsRover process: 'f'.
	
	self assert: (Array with: '1@2' with: '') equals: positionHeadingWindow positionHeadingValue. ! !

!methodRemoval: PositionHeadingWindowTest #test01PositionHeadingWindowMovingFowardShowsPositionAndEmptyHeading stamp: 'DA 6/2/2023 20:06:28'!
test01PositionHeadingWindowMovingFowardShowsPositionAndEmptyHeading
	|marsRover positionHeadingWindow|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth. 
	
	positionHeadingWindow := PositionHeadingWindow new.
	
	marsRover addLogger: positionHeadingWindow.
	
	marsRover process: 'f'.
	
	self assert: (Array with: '1@2' with: '') equals: positionHeadingWindow positionHeadingValue. !
!PositionHeadingWindowTest methodsFor: 'as yet unclassified' stamp: 'DA 6/2/2023 20:08:04'!
test03PositionHeadingWindowMovingFowardAndRotatingShowsPositionAnHeading
	|marsRover positionHeadingWindow|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth. 
	
	positionHeadingWindow := PositionHeadingWindow new.
	
	marsRover addLogger: positionHeadingWindow.
	
	marsRover process: 'fr'.
	
	self assert: (Array with: '1@2' with: 'East') equals: positionHeadingWindow positionHeadingValue. ! !

!testRun: #PositionHeadingWindowTest #test03PositionHeadingWindowMovingFowardAndRotatingShowsPositionAnHeading stamp: 'DA 6/2/2023 20:08:10'!
ERROR!

!testRun: #PositionHeadingWindowTest #test03PositionHeadingWindowMovingFowardAndRotatingShowsPositionAnHeading stamp: 'DA 6/2/2023 20:08:10'!
ERROR!
!PositionHeadingWindow methodsFor: 'category-name' stamp: 'DA 6/2/2023 20:08:15'!
addHeading: aRenameMe1 
	self shouldBeImplemented.! !
!PositionHeadingWindow methodsFor: 'category-name' stamp: 'DA 6/2/2023 20:08:34' prior: 50627586!
addHeading: aHeading
	positionHeadingValue at:2 put: aHeading! !

!testRun: #PositionHeadingWindowTest #test03PositionHeadingWindowMovingFowardAndRotatingShowsPositionAnHeading stamp: 'DA 6/2/2023 20:08:36'!
PASSED!

!testRun: #PositionHeadingWindowTest #test03PositionHeadingWindowMovingFowardAndRotatingShowsPositionAnHeading stamp: 'DA 6/2/2023 20:08:40'!
PASSED!

!testRun: #PositionHeadingWindowTest #test01PositionHeadingWindowOfMarsRoverThatDoesntMoveIsEmpty stamp: 'DA 6/2/2023 20:08:40'!
PASSED!

!testRun: #PositionHeadingWindowTest #test02PositionHeadingWindowMovingFowardShowsPositionAndEmptyHeading stamp: 'DA 6/2/2023 20:08:40'!
PASSED!

!testRun: #PositionHeadingWindowTest #test03PositionHeadingWindowMovingFowardAndRotatingShowsPositionAnHeading stamp: 'DA 6/2/2023 20:08:40'!
PASSED!
!PositionHeadingWindowTest methodsFor: 'as yet unclassified' stamp: 'DA 6/2/2023 20:09:32'!
test03PositionHeadingWindowShowsLastPositionAndRotation
	|marsRover positionHeadingWindow|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth. 
	
	positionHeadingWindow := PositionHeadingWindow new.
	
	marsRover addLogger: positionHeadingWindow.
	
	marsRover process: 'frf'.
	
	self assert: (Array with: '2@2' with: 'East') equals: positionHeadingWindow positionHeadingValue. ! !
!PositionHeadingWindowTest methodsFor: 'as yet unclassified' stamp: 'DA 6/2/2023 20:09:39'!
test04PositionHeadingWindowShowsLastPositionAndRotation
	|marsRover positionHeadingWindow|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth. 
	
	positionHeadingWindow := PositionHeadingWindow new.
	
	marsRover addLogger: positionHeadingWindow.
	
	marsRover process: 'frf'.
	
	self assert: (Array with: '2@2' with: 'East') equals: positionHeadingWindow positionHeadingValue. ! !

!methodRemoval: PositionHeadingWindowTest #test03PositionHeadingWindowShowsLastPositionAndRotation stamp: 'DA 6/2/2023 20:09:39'!
test03PositionHeadingWindowShowsLastPositionAndRotation
	|marsRover positionHeadingWindow|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth. 
	
	positionHeadingWindow := PositionHeadingWindow new.
	
	marsRover addLogger: positionHeadingWindow.
	
	marsRover process: 'frf'.
	
	self assert: (Array with: '2@2' with: 'East') equals: positionHeadingWindow positionHeadingValue. !

!testRun: #HeadingLoggerTest #test01HeadingLoggerOfMarsRoverNotRotatingIsEmpty stamp: 'DA 6/2/2023 20:09:40'!
PASSED!

!testRun: #HeadingLoggerTest #test02HeadingLoggerRegisterHeadingEast stamp: 'DA 6/2/2023 20:09:41'!
PASSED!

!testRun: #HeadingLoggerTest #test03HeadingLoggerRegisterHeadingWest stamp: 'DA 6/2/2023 20:09:41'!
PASSED!

!testRun: #HeadingLoggerTest #test04HeadingLoggerRegisterHeadingNorth stamp: 'DA 6/2/2023 20:09:41'!
PASSED!

!testRun: #HeadingLoggerTest #test05HeadingLoggerRegisterHeadingSouth stamp: 'DA 6/2/2023 20:09:41'!
PASSED!

!testRun: #HeadingLoggerTest #test06HeadingLoggerRegisterMoreThanOneRotation stamp: 'DA 6/2/2023 20:09:41'!
PASSED!

!testRun: #HeadingWindowTest #test01HeadingWindowLoggerDontLogIfEmptyCommand stamp: 'DA 6/2/2023 20:09:41'!
PASSED!

!testRun: #HeadingWindowTest #test02HeadingWindowLoggerRegisterRotation stamp: 'DA 6/2/2023 20:09:41'!
PASSED!

!testRun: #HeadingWindowTest #test03HeadingWindowLoggerIfProcessMovementShowNothing stamp: 'DA 6/2/2023 20:09:41'!
PASSED!

!testRun: #HeadingWindowTest #test04HeadingWindowLoggerShowLastHeading stamp: 'DA 6/2/2023 20:09:41'!
PASSED!

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'DA 6/2/2023 20:09:41'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'DA 6/2/2023 20:09:41'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'DA 6/2/2023 20:09:41'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'DA 6/2/2023 20:09:41'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'DA 6/2/2023 20:09:41'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'DA 6/2/2023 20:09:41'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'DA 6/2/2023 20:09:41'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'DA 6/2/2023 20:09:41'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'DA 6/2/2023 20:09:41'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'DA 6/2/2023 20:09:41'!
PASSED!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'DA 6/2/2023 20:09:41'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'DA 6/2/2023 20:09:41'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'DA 6/2/2023 20:09:41'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'DA 6/2/2023 20:09:41'!
PASSED!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'DA 6/2/2023 20:09:41'!
PASSED!

!testRun: #PositionHeadingLoggerTest #test01PositionHeadingLoggerOfMarsRoverThatDidntMoveIsEmpty stamp: 'DA 6/2/2023 20:09:41'!
PASSED!

!testRun: #PositionHeadingLoggerTest #test02PositionHeadingLoggerOfMarsRoverTrackMovementAndRotation stamp: 'DA 6/2/2023 20:09:41'!
PASSED!

!testRun: #PositionHeadingWindowTest #test01PositionHeadingWindowOfMarsRoverThatDoesntMoveIsEmpty stamp: 'DA 6/2/2023 20:09:41'!
PASSED!

!testRun: #PositionHeadingWindowTest #test02PositionHeadingWindowMovingFowardShowsPositionAndEmptyHeading stamp: 'DA 6/2/2023 20:09:41'!
PASSED!

!testRun: #PositionHeadingWindowTest #test03PositionHeadingWindowMovingFowardAndRotatingShowsPositionAnHeading stamp: 'DA 6/2/2023 20:09:41'!
PASSED!

!testRun: #PositionHeadingWindowTest #test04PositionHeadingWindowShowsLastPositionAndRotation stamp: 'DA 6/2/2023 20:09:41'!
PASSED!

!testRun: #PositionLoggerTest #test01PositionLoggerOfMarsRoverThatDidntMoveIsEmpty stamp: 'DA 6/2/2023 20:09:41'!
PASSED!

!testRun: #PositionLoggerTest #test02PositionLoggerRegisterMoveNorth stamp: 'DA 6/2/2023 20:09:41'!
PASSED!

!testRun: #PositionLoggerTest #test03PositionLoggerRegisterMoveSouth stamp: 'DA 6/2/2023 20:09:42'!
PASSED!

!testRun: #PositionLoggerTest #test04PositionLoggerRegisterMoveEast stamp: 'DA 6/2/2023 20:09:42'!
PASSED!

!testRun: #PositionLoggerTest #test05PositionLoggerRegisterMoveWest stamp: 'DA 6/2/2023 20:09:42'!
PASSED!

!testRun: #PositionLoggerTest #test06PositionLoggerRegisterMoreThanOneMovement stamp: 'DA 6/2/2023 20:09:42'!
PASSED!

!testRun: #PositionLoggerTest #test07PositionLoggerOfMarsRoverRotatingDoesntTrackMovements stamp: 'DA 6/2/2023 20:09:42'!
PASSED!

!testRun: #PositionWindowTest #test01PositionWindowLoggerDontLogIfEmptyCommand stamp: 'DA 6/2/2023 20:09:42'!
PASSED!

!testRun: #PositionWindowTest #test02PositionWindowLoggerRegisterMovement stamp: 'DA 6/2/2023 20:09:42'!
PASSED!

!testRun: #PositionWindowTest #test03PositionWindowLoggerDoesntRegisterRotation stamp: 'DA 6/2/2023 20:09:42'!
PASSED!

!testRun: #PositionWindowTest #test04PositionWindowLoggerStoreLastPosition stamp: 'DA 6/2/2023 20:09:42'!
PASSED!

!testRun: #PositionHeadingWindowTest #test04PositionHeadingWindowShowsLastPositionAndRotation stamp: 'DA 6/2/2023 20:09:46'!
PASSED!
!PositionHeadingWindowTest methodsFor: 'as yet unclassified' stamp: 'DA 6/2/2023 20:10:07' prior: 50627561!
test03PositionHeadingWindowMovingFowardAndRotatingShowsPositionAnHeading
	|marsRover positionHeadingWindow|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth. 
	
	positionHeadingWindow := PositionHeadingWindow new.
	
	marsRover addLogger: positionHeadingWindow.
	
	marsRover process: 'fr'.
	
	self assert: (Array with: '1@2' with: 'Apuntando al este') equals: positionHeadingWindow positionHeadingValue. ! !
!PositionHeadingWindowTest methodsFor: 'as yet unclassified' stamp: 'DA 6/2/2023 20:10:15' prior: 50627635!
test04PositionHeadingWindowShowsLastPositionAndRotation
	|marsRover positionHeadingWindow|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth. 
	
	positionHeadingWindow := PositionHeadingWindow new.
	
	marsRover addLogger: positionHeadingWindow.
	
	marsRover process: 'frf'.
	
	self assert: (Array with: '2@2' with: 'Apuntando al este') equals: positionHeadingWindow positionHeadingValue. ! !
!PositionHeadingWindowTest methodsFor: 'as yet unclassified' stamp: 'DA 6/2/2023 20:10:19' prior: 50627844!
test04PositionHeadingWindowShowsLastPositionAndRotation
	|marsRover positionHeadingWindow|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth. 
	
	positionHeadingWindow := PositionHeadingWindow new.
	
	marsRover addLogger: positionHeadingWindow.
	
	marsRover process: 'frf'.
	
	self assert: (Array with: '2@2' with: 'Apuntando al Este') equals: positionHeadingWindow positionHeadingValue. ! !
!PositionHeadingWindowTest methodsFor: 'as yet unclassified' stamp: 'DA 6/2/2023 20:10:24' prior: 50627827!
test03PositionHeadingWindowMovingFowardAndRotatingShowsPositionAnHeading
	|marsRover positionHeadingWindow|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth. 
	
	positionHeadingWindow := PositionHeadingWindow new.
	
	marsRover addLogger: positionHeadingWindow.
	
	marsRover process: 'fr'.
	
	self assert: (Array with: '1@2' with: 'Apuntando al Este') equals: positionHeadingWindow positionHeadingValue. ! !

!testRun: #PositionHeadingWindowTest #test03PositionHeadingWindowMovingFowardAndRotatingShowsPositionAnHeading stamp: 'DA 6/2/2023 20:10:25'!
FAILURE!

----SNAPSHOT----(2 June 2023 20:11:03) CuisUniversity-5832.image priorSource: 9405567!
!MarsRover methodsFor: 'heading' stamp: 'DA 6/2/2023 20:12:17' prior: 50625410!
headEast
	
	head := MarsRoverHeadingEast for: self.
	loggers do: [:aLogger | 
		(aLogger isKindOf: PositionHeadingWindow) ifTrue: [aLogger addHeading: 'Apuntando al Este'].
		aLogger addHeading: 'East'].! !

!testRun: #PositionHeadingWindowTest #test01PositionHeadingWindowOfMarsRoverThatDoesntMoveIsEmpty stamp: 'DA 6/2/2023 20:14:42'!
PASSED!

!testRun: #PositionHeadingWindowTest #test02PositionHeadingWindowMovingFowardShowsPositionAndEmptyHeading stamp: 'DA 6/2/2023 20:14:42'!
PASSED!

!testRun: #PositionHeadingWindowTest #test03PositionHeadingWindowMovingFowardAndRotatingShowsPositionAnHeading stamp: 'DA 6/2/2023 20:14:42'!
FAILURE!

!testRun: #PositionHeadingWindowTest #test04PositionHeadingWindowShowsLastPositionAndRotation stamp: 'DA 6/2/2023 20:14:42'!
FAILURE!

!testRun: #PositionHeadingWindowTest #test03PositionHeadingWindowMovingFowardAndRotatingShowsPositionAnHeading stamp: 'DA 6/2/2023 20:14:46'!
FAILURE!

!testRun: #PositionHeadingWindowTest #test04PositionHeadingWindowShowsLastPositionAndRotation stamp: 'DA 6/2/2023 20:15:18'!
FAILURE!

!testRun: #PositionHeadingWindowTest #test04PositionHeadingWindowShowsLastPositionAndRotation stamp: 'DA 6/2/2023 20:15:18'!
FAILURE!
!MarsRover methodsFor: 'heading' stamp: 'DA 6/2/2023 20:20:03' prior: 50627902!
headEast
	
	head := MarsRoverHeadingEast for: self.
	loggers do: [:aLogger | 
		(aLogger isKindOf: PositionHeadingWindow) ifTrue: [^aLogger addHeading: 'Apuntando al Este'].
		aLogger addHeading: 'East'].! !
!MarsRover methodsFor: 'heading' stamp: 'DA 6/2/2023 20:20:14' prior: 50627942!
headEast
	
	head := MarsRoverHeadingEast for: self.
	loggers do: [:aLogger | 
		(aLogger isKindOf: PositionHeadingWindow) ifTrue: [aLogger addHeading: 'Apuntando al Este'].
		aLogger addHeading: 'East'].! !
!MarsRover methodsFor: 'heading' stamp: 'DA 6/2/2023 20:20:49' prior: 50627951!
headEast
	
	head := MarsRoverHeadingEast for: self.
	loggers do: [:aLogger | 
		(aLogger isKindOf: PositionHeadingWindow) ifTrue: [aLogger addHeading: 'Apuntando al Este']
		ifFalse: [aLogger addHeading: 'East']].! !

!testRun: #PositionHeadingWindowTest #test01PositionHeadingWindowOfMarsRoverThatDoesntMoveIsEmpty stamp: 'DA 6/2/2023 20:21:06'!
PASSED!

!testRun: #PositionHeadingWindowTest #test02PositionHeadingWindowMovingFowardShowsPositionAndEmptyHeading stamp: 'DA 6/2/2023 20:21:07'!
PASSED!

!testRun: #PositionHeadingWindowTest #test03PositionHeadingWindowMovingFowardAndRotatingShowsPositionAnHeading stamp: 'DA 6/2/2023 20:21:08'!
PASSED!

!testRun: #PositionHeadingWindowTest #test04PositionHeadingWindowShowsLastPositionAndRotation stamp: 'DA 6/2/2023 20:21:08'!
PASSED!

----SNAPSHOT----(2 June 2023 20:21:14) CuisUniversity-5832.image priorSource: 9479934!

----QUIT----(2 June 2023 20:25:00) CuisUniversity-5832.image priorSource: 9482769!

----STARTUP---- (3 June 2023 18:24:02) as D:\ISW1\windows64\CuisUniversity-5832.image!

!PositionHeadingWindowTest methodsFor: 'test' stamp: 'DA 6/3/2023 18:37:27'!
test04PositionHeadingWindowHeadingNorthShowsLastPositionHeadingEast
	|marsRover positionHeadingWindow|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth. 
	
	positionHeadingWindow := PositionHeadingWindow new.
	
	marsRover addLogger: positionHeadingWindow.
	
	marsRover process: 'frf'.
	
	self assert: (Array with: '2@2' with: 'Apuntando al Este') equals: positionHeadingWindow positionHeadingValue. ! !

!methodRemoval: PositionHeadingWindowTest #test04PositionHeadingWindowShowsLastPositionAndRotation stamp: 'DA 6/3/2023 18:37:27'!
test04PositionHeadingWindowShowsLastPositionAndRotation
	|marsRover positionHeadingWindow|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth. 
	
	positionHeadingWindow := PositionHeadingWindow new.
	
	marsRover addLogger: positionHeadingWindow.
	
	marsRover process: 'frf'.
	
	self assert: (Array with: '2@2' with: 'Apuntando al Este') equals: positionHeadingWindow positionHeadingValue. !
!PositionHeadingWindowTest methodsFor: 'test' stamp: 'DA 6/3/2023 18:38:56'!
test05PositionHeadingWindowHeadingNorthShowsLastPositionHeadingWest
	|marsRover positionHeadingWindow|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth. 
	
	positionHeadingWindow := PositionHeadingWindow new.
	
	marsRover addLogger: positionHeadingWindow.
	
	marsRover process: 'flf'.
	
	self assert: (Array with: '0@2' with: 'Apuntando al Oeste') equals: positionHeadingWindow positionHeadingValue. ! !

!testRun: #PositionHeadingWindowTest #test05PositionHeadingWindowHeadingNorthShowsLastPositionHeadingWest stamp: 'DA 6/3/2023 18:39:00'!
FAILURE!
!MarsRover methodsFor: 'heading' stamp: 'DA 6/3/2023 18:40:20' prior: 50625474!
headWest
	
	head := MarsRoverHeadingWest for: self. 
	loggers do: [:aLogger | 
		(aLogger isKindOf: PositionHeadingWindow) ifTrue: [aLogger addHeading: 'Apuntando al Oeste']
		ifFalse: [aLogger addHeading: 'West']].! !

!testRun: #PositionHeadingWindowTest #test05PositionHeadingWindowHeadingNorthShowsLastPositionHeadingWest stamp: 'DA 6/3/2023 18:40:40'!
PASSED!

!testRun: #PositionHeadingWindowTest #test01PositionHeadingWindowOfMarsRoverThatDoesntMoveIsEmpty stamp: 'DA 6/3/2023 18:40:40'!
PASSED!

!testRun: #PositionHeadingWindowTest #test02PositionHeadingWindowMovingFowardShowsPositionAndEmptyHeading stamp: 'DA 6/3/2023 18:40:40'!
PASSED!

!testRun: #PositionHeadingWindowTest #test03PositionHeadingWindowMovingFowardAndRotatingShowsPositionAnHeading stamp: 'DA 6/3/2023 18:40:40'!
PASSED!

!testRun: #PositionHeadingWindowTest #test04PositionHeadingWindowHeadingNorthShowsLastPositionHeadingEast stamp: 'DA 6/3/2023 18:40:40'!
PASSED!

!testRun: #PositionHeadingWindowTest #test05PositionHeadingWindowHeadingNorthShowsLastPositionHeadingWest stamp: 'DA 6/3/2023 18:40:40'!
PASSED!
!PositionHeadingWindowTest methodsFor: 'test' stamp: 'DA 6/3/2023 18:43:32'!
test06PositionHeadingWindowHeadingEastShowsLastPositionHeadingNorth
	|marsRover positionHeadingWindow|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingEast. 
	
	positionHeadingWindow := PositionHeadingWindow new.
	
	marsRover addLogger: positionHeadingWindow.
	
	marsRover process: 'lr'.
	
	self assert: (Array with: '1@2' with: 'Apuntando al Norte') equals: positionHeadingWindow positionHeadingValue. ! !

!testRun: #PositionHeadingWindowTest #test06PositionHeadingWindowHeadingEastShowsLastPositionHeadingNorth stamp: 'DA 6/3/2023 18:43:36'!
FAILURE!
!MarsRover methodsFor: 'heading' stamp: 'DA 6/3/2023 18:44:45' prior: 50625536!
headNorth
	
	head := MarsRoverHeadingNorth for: self.
	loggers do: [:aLogger | 
		(aLogger isKindOf: PositionHeadingWindow) ifTrue: [aLogger addHeading: 'Apuntando al Norte']
		ifFalse: [aLogger addHeading: 'North']].
	! !

!testRun: #PositionHeadingWindowTest #test06PositionHeadingWindowHeadingEastShowsLastPositionHeadingNorth stamp: 'DA 6/3/2023 18:45:08'!
FAILURE!
!PositionHeadingWindowTest methodsFor: 'test' stamp: 'DA 6/3/2023 18:46:07' prior: 50628087!
test06PositionHeadingWindowHeadingEastShowsLastPositionHeadingNorth
	|marsRover positionHeadingWindow|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingEast. 
	
	positionHeadingWindow := PositionHeadingWindow new.
	
	marsRover addLogger: positionHeadingWindow.
	
	marsRover process: 'lf'.
	
	self assert: (Array with: '1@2' with: 'Apuntando al Norte') equals: positionHeadingWindow positionHeadingValue. ! !

!testRun: #PositionHeadingWindowTest #test06PositionHeadingWindowHeadingEastShowsLastPositionHeadingNorth stamp: 'DA 6/3/2023 18:46:12'!
PASSED!
!PositionHeadingWindowTest methodsFor: 'test' stamp: 'DA 6/3/2023 18:47:45'!
test07PositionHeadingWindowHeadingEastShowsLastPositionHeadingSouth
	|marsRover positionHeadingWindow|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingEast. 
	
	positionHeadingWindow := PositionHeadingWindow new.
	
	marsRover addLogger: positionHeadingWindow.
	
	marsRover process: 'llf'.
	
	self assert: (Array with: '0@1' with: 'Apuntando al Sur') equals: positionHeadingWindow positionHeadingValue. ! !

!testRun: #PositionHeadingWindowTest #test07PositionHeadingWindowHeadingEastShowsLastPositionHeadingSouth stamp: 'DA 6/3/2023 18:47:48'!
FAILURE!
!MarsRover methodsFor: 'heading' stamp: 'DA 6/3/2023 18:48:31' prior: 50625565!
headSouth
	
	head := MarsRoverHeadingSouth for: self.
	loggers do: [:aLogger | 
		(aLogger isKindOf: PositionHeadingWindow) ifTrue: [aLogger addHeading: 'Apuntando al Sur']
		ifFalse: [aLogger addHeading: 'South']].! !

!testRun: #PositionHeadingWindowTest #test07PositionHeadingWindowHeadingEastShowsLastPositionHeadingSouth stamp: 'DA 6/3/2023 18:48:56'!
FAILURE!
!PositionHeadingWindowTest methodsFor: 'test' stamp: 'DA 6/3/2023 18:49:37' prior: 50628144!
test07PositionHeadingWindowHeadingEastShowsLastPositionHeadingSouth
	|marsRover positionHeadingWindow|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingEast. 
	
	positionHeadingWindow := PositionHeadingWindow new.
	
	marsRover addLogger: positionHeadingWindow.
	
	marsRover process: 'lllf'.
	
	self assert: (Array with: '0@1' with: 'Apuntando al Sur') equals: positionHeadingWindow positionHeadingValue. ! !

!testRun: #PositionHeadingWindowTest #test07PositionHeadingWindowHeadingEastShowsLastPositionHeadingSouth stamp: 'DA 6/3/2023 18:49:39'!
FAILURE!
!PositionHeadingWindowTest methodsFor: 'test' stamp: 'DA 6/3/2023 18:49:48' prior: 50628180!
test07PositionHeadingWindowHeadingEastShowsLastPositionHeadingSouth
	|marsRover positionHeadingWindow|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingEast. 
	
	positionHeadingWindow := PositionHeadingWindow new.
	
	marsRover addLogger: positionHeadingWindow.
	
	marsRover process: 'lllf'.
	
	self assert: (Array with: '1@0' with: 'Apuntando al Sur') equals: positionHeadingWindow positionHeadingValue. ! !

!testRun: #PositionHeadingWindowTest #test07PositionHeadingWindowHeadingEastShowsLastPositionHeadingSouth stamp: 'DA 6/3/2023 18:49:50'!
PASSED!

!testRun: #PositionHeadingWindowTest #test01PositionHeadingWindowOfMarsRoverThatDoesntMoveIsEmpty stamp: 'DA 6/3/2023 18:49:50'!
PASSED!

!testRun: #PositionHeadingWindowTest #test02PositionHeadingWindowMovingFowardShowsPositionAndEmptyHeading stamp: 'DA 6/3/2023 18:49:50'!
PASSED!

!testRun: #PositionHeadingWindowTest #test03PositionHeadingWindowMovingFowardAndRotatingShowsPositionAnHeading stamp: 'DA 6/3/2023 18:49:50'!
PASSED!

!testRun: #PositionHeadingWindowTest #test04PositionHeadingWindowHeadingNorthShowsLastPositionHeadingEast stamp: 'DA 6/3/2023 18:49:50'!
PASSED!

!testRun: #PositionHeadingWindowTest #test05PositionHeadingWindowHeadingNorthShowsLastPositionHeadingWest stamp: 'DA 6/3/2023 18:49:50'!
PASSED!

!testRun: #PositionHeadingWindowTest #test06PositionHeadingWindowHeadingEastShowsLastPositionHeadingNorth stamp: 'DA 6/3/2023 18:49:50'!
PASSED!

!testRun: #PositionHeadingWindowTest #test07PositionHeadingWindowHeadingEastShowsLastPositionHeadingSouth stamp: 'DA 6/3/2023 18:49:50'!
PASSED!
!MarsRover methodsFor: 'heading' stamp: 'DA 6/3/2023 19:02:22' prior: 50627960!
headEast
	
	head := MarsRoverHeadingEast for: self.
	loggers do: [:aLogger | 
		(aLogger isKindOf: PositionHeadingWindow) ifTrue: [aLogger addHeading: 'Apuntando al Este']
		ifFalse: [aLogger addHeading: 'East']].
	"
	loggers do: [:aLogger | 
		(aLogger isKindOf: PositionHeadingWindow) ifTrue: [aLogger addHeading: 'Apuntando al Este']
		ifFalse: [aLogger addHeading: 'East']]."! !
!MarsRover methodsFor: 'heading' stamp: 'DA 6/3/2023 19:04:27' prior: 50628253!
headEast
	
	head := MarsRoverHeadingEast for: self.
	loggers do: [:aLogger | aLogger notifyActualPosition: position heading: head ].
	"
	loggers do: [:aLogger | 
		(aLogger isKindOf: PositionHeadingWindow) ifTrue: [aLogger addHeading: 'Apuntando al Este']
		ifFalse: [aLogger addHeading: 'East']]."! !
!MarsRover methodsFor: 'heading' stamp: 'DA 6/3/2023 19:16:43' prior: 50628268!
headEast
	
	head := MarsRoverHeadingEast for: self.
	loggers do: [:aLogger | aLogger notify].
	"
	loggers do: [:aLogger | 
		(aLogger isKindOf: PositionHeadingWindow) ifTrue: [aLogger addHeading: 'Apuntando al Este']
		ifFalse: [aLogger addHeading: 'East']]."! !
!HeadingWindow methodsFor: 'nil' stamp: 'DA 6/3/2023 19:18:55' overrides: 16902144!
notify: marsRover
	|estado|
	estado := marsRover getState ! !

Object subclass: #PositionWindow
	instanceVariableNames: 'positionValue marsRover'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #PositionWindow category: 'MarsRover-WithHeading' stamp: 'DA 6/3/2023 19:27:26'!
Object subclass: #PositionWindow
	instanceVariableNames: 'positionValue marsRover'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRover methodsFor: 'moving' stamp: 'DA 6/3/2023 19:43:41' prior: 50624608!
moveBackward

	head moveBackward.
	self notify! !
!MarsRover methodsFor: 'moving' stamp: 'DA 6/3/2023 19:43:52' prior: 50624616!
moveForward
	
	head moveForward
	self notify! !
!MarsRover methodsFor: 'moving' stamp: 'DA 6/3/2023 19:43:54' prior: 50628314!
moveForward
	
	head moveForward.
	self notify! !
!MarsRover methodsFor: 'heading' stamp: 'DA 6/3/2023 19:44:10' prior: 50624578!
rotateLeft
	
	head rotateLeft.
	self notify! !
!MarsRover methodsFor: 'heading' stamp: 'DA 6/3/2023 19:44:18' prior: 50624582!
rotateRight
	
	head rotateRight.
	self notify! !
!MarsRover methodsFor: 'heading' stamp: 'DA 6/3/2023 19:44:36' prior: 50628280!
headEast
	
	head := MarsRoverHeadingEast for: self.
! !
!MarsRover methodsFor: 'heading' stamp: 'DA 6/3/2023 19:44:45' prior: 50628108!
headNorth
	
	head := MarsRoverHeadingNorth for: self.
	! !
!MarsRover methodsFor: 'heading' stamp: 'DA 6/3/2023 19:44:50' prior: 50628165!
headSouth
	
	head := MarsRoverHeadingSouth for: self.
! !
!MarsRover methodsFor: 'heading' stamp: 'DA 6/3/2023 19:44:54' prior: 50628050!
headWest
	
	head := MarsRoverHeadingWest for: self. ! !
!MarsRover methodsFor: 'moving' stamp: 'DA 6/3/2023 19:45:06' prior: 50625273!
moveEast
	
	position := position + (1@0).! !
!MarsRover methodsFor: 'moving' stamp: 'DA 6/3/2023 19:45:11' prior: 50625064!
moveNorth
	
	position := position + (0@1).! !
!MarsRover methodsFor: 'moving' stamp: 'DA 6/3/2023 19:45:15' prior: 50625103!
moveSouth
	
	position := position + (0@-1).! !
!MarsRover methodsFor: 'moving' stamp: 'DA 6/3/2023 19:45:19' prior: 50625325!
moveWest
	
	position := position + (-1@0).! !
!MarsRover methodsFor: 'tracking' stamp: 'DA 6/3/2023 19:46:23'!
notify
	loggers do: [:aLogger | aLogger update].! !
!MarsRover methodsFor: 'tracking' stamp: 'DA 6/3/2023 19:47:07' prior: 50628368!
notify
	loggers do: [:aLogger | aLogger notifyChange].! !
!PositionWindowTest methodsFor: 'as yet unclassified' stamp: 'DA 6/3/2023 19:48:37' prior: 50627174!
test01PositionWindowLoggerDontLogIfEmptyCommand
	|marsRover positionWindowLogger|
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	positionWindowLogger := PositionWindow track: marsRover. 
	
	"marsRover addLogger: positionWindowLogger."
	marsRover process: ''.
	self assert: '' equals: positionWindowLogger positionValue. ! !

!testRun: #PositionWindowTest #test01PositionWindowLoggerDontLogIfEmptyCommand stamp: 'DA 6/3/2023 19:48:38'!
ERROR!
!PositionWindow class methodsFor: 'instance creation' stamp: 'DA 6/3/2023 19:48:49'!
track: aMarsRover 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeTrack: aMarsRover ! !
!PositionWindow class methodsFor: 'instance creation' stamp: 'DA 6/3/2023 19:48:59' prior: 50628396!
track: aMarsRover
	^self new initializeTrack: aMarsRover ! !

!testRun: #PositionWindowTest #test01PositionWindowLoggerDontLogIfEmptyCommand stamp: 'DA 6/3/2023 19:49:27'!
ERROR!
!PositionWindow methodsFor: 'category-name' stamp: 'DA 6/3/2023 19:49:31'!
initializeTrack: aMarsRover 
	self shouldBeImplemented.
	marsRover := aMarsRover.! !
!PositionWindow methodsFor: 'category-name' stamp: 'DA 6/3/2023 19:49:43' prior: 50628413!
initializeTrack: aMarsRover 
	marsRover := aMarsRover.! !
!PositionWindow methodsFor: 'category-name' stamp: 'DA 6/3/2023 19:50:02' prior: 50628419!
initializeTrack: aMarsRover 
	positionValue := ''.
	marsRover := aMarsRover.! !

!testRun: #PositionWindowTest #test01PositionWindowLoggerDontLogIfEmptyCommand stamp: 'DA 6/3/2023 19:50:27'!
PASSED!

!testRun: #PositionWindowTest #test01PositionWindowLoggerDontLogIfEmptyCommand stamp: 'DA 6/3/2023 19:50:27'!
PASSED!

!testRun: #PositionWindowTest #test02PositionWindowLoggerRegisterMovement stamp: 'DA 6/3/2023 19:50:27'!
ERROR!

!testRun: #PositionWindowTest #test03PositionWindowLoggerDoesntRegisterRotation stamp: 'DA 6/3/2023 19:50:27'!
ERROR!

!testRun: #PositionWindowTest #test04PositionWindowLoggerStoreLastPosition stamp: 'DA 6/3/2023 19:50:27'!
ERROR!
!PositionWindowTest methodsFor: 'as yet unclassified' stamp: 'DA 6/3/2023 19:50:42' prior: 50627188!
test02PositionWindowLoggerRegisterMovement
	|marsRover positionWindowLogger|
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	positionWindowLogger := PositionWindow track: marsRover. 
	
	marsRover process: 'f'.
	
	self assert: '1@2' equals: positionWindowLogger positionValue. ! !
!PositionWindowTest methodsFor: 'as yet unclassified' stamp: 'DA 6/3/2023 19:50:55' prior: 50627216!
test03PositionWindowLoggerDoesntRegisterRotation
	|marsRover positionWindowLogger|
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	positionWindowLogger := PositionWindow track: marsRover.

	marsRover process: 'r'.
	
	self assert: '' equals: positionWindowLogger positionValue. ! !
!PositionWindow methodsFor: 'category-name' stamp: 'DA 6/3/2023 19:51:10' prior: 50628424!
initializeTrack: aMarsRover 
	positionValue := ''.
	marsRover := aMarsRover.
	aMarsRover addLogger: self.! !

!methodRemoval: PositionWindow #initialize stamp: 'DA 6/3/2023 19:51:20'!
initialize
	positionValue := ''.!

!classDefinition: #PositionLogger category: 'MarsRover-WithHeading' stamp: 'DA 6/3/2023 19:51:58'!
Object subclass: #PositionLogger
	instanceVariableNames: 'logs marsRover'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!PositionLogger methodsFor: 'category-name' stamp: 'DA 6/3/2023 19:51:57'!
initializeTrack: aMarsRover
	logs := OrderedCollection new.
	marsRover := aMarsRover.
	aMarsRover addLogger: self.! !

!methodRemoval: PositionLogger #initialize stamp: 'DA 6/3/2023 19:52:04'!
initialize
	logs := OrderedCollection new!
!PositionWindowTest methodsFor: 'as yet unclassified' stamp: 'DA 6/3/2023 19:52:18' prior: 50628378!
test01PositionWindowLoggerDontLogIfEmptyCommand
	|marsRover positionWindowLogger|
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	positionWindowLogger := PositionWindow track: marsRover. 
	
	marsRover process: ''.
	self assert: '' equals: positionWindowLogger positionValue. ! !
!PositionWindowTest methodsFor: 'as yet unclassified' stamp: 'DA 6/3/2023 19:52:34' prior: 50627202!
test04PositionWindowLoggerStoreLastPosition
	|marsRover positionWindowLogger|
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	positionWindowLogger := PositionWindow track: marsRover.

	marsRover process: 'ff'.
	
	self assert: '1@3' equals: positionWindowLogger positionValue. ! !
!PositionLoggerTest methodsFor: 'tests' stamp: 'DA 6/3/2023 19:52:49' prior: 50624953!
test01PositionLoggerOfMarsRoverThatDidntMoveIsEmpty
	|marsRover positionLogger|
	
	marsRover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth. 
	
	positionLogger := PositionLogger track: marsRover.
	
	self assert: positionLogger logs isEmpty. ! !
!PositionLoggerTest methodsFor: 'tests' stamp: 'DA 6/3/2023 19:52:59' prior: 50626003!
test02PositionLoggerRegisterMoveNorth
	|marsRover positionLogger|
	
	marsRover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth. 
	
	positionLogger := PositionLogger track: marsRover.
	
	marsRover process: 'f'.
	
	self assert: (OrderedCollection with: 0@1) equals: positionLogger logs. ! !
!PositionLoggerTest methodsFor: 'tests' stamp: 'DA 6/3/2023 19:53:05' prior: 50626016!
test03PositionLoggerRegisterMoveSouth
	|marsRover positionLogger|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth. 
	
	positionLogger := PositionLogger track: marsRover.
	
	marsRover process: 'b'.
	
	self assert: (OrderedCollection with: 1@0) equals: positionLogger logs. ! !
!PositionLoggerTest methodsFor: 'tests' stamp: 'DA 6/3/2023 19:53:14' prior: 50626029!
test04PositionLoggerRegisterMoveEast
	|marsRover positionLogger|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingEast. 
	
	positionLogger := PositionLogger track: marsRover.
	
	marsRover process: 'f'.
	
	self assert: (OrderedCollection with: 2@1) equals: positionLogger logs. ! !
!PositionLoggerTest methodsFor: 'tests' stamp: 'DA 6/3/2023 19:53:24' prior: 50626042!
test05PositionLoggerRegisterMoveWest
	|marsRover positionLogger|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingEast. 
	
	positionLogger := PositionLogger track: marsRover.
	
	marsRover process: 'b'.
	
	self assert: (OrderedCollection with: 0@1) equals: positionLogger logs. ! !
!PositionLoggerTest methodsFor: 'tests' stamp: 'DA 6/3/2023 19:53:33' prior: 50626529!
test06PositionLoggerRegisterMoreThanOneMovement
	|marsRover positionLogger|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth. 
	
	positionLogger := PositionLogger track: marsRover.
	
	marsRover process: 'ff'.
	
	self assert: (OrderedCollection with: 1@2 with: 1@3) equals: positionLogger logs. ! !
!PositionLoggerTest methodsFor: 'tests' stamp: 'DA 6/3/2023 19:53:44' prior: 50626557!
test07PositionLoggerOfMarsRoverRotatingDoesntTrackMovements
	|marsRover positionLogger|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth. 
	
	positionLogger := PositionLogger track: marsRover.
	
	marsRover process: 'r'.
	
	self assert: positionLogger logs isEmpty. ! !

!classDefinition: #PositionHeadingWindow category: 'MarsRover-WithHeading' stamp: 'DA 6/3/2023 19:54:42'!
Object subclass: #PositionHeadingWindow
	instanceVariableNames: 'positionHeadingValue marsRover'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!PositionHeadingWindow methodsFor: 'category-name' stamp: 'DA 6/3/2023 19:54:40'!
initializeTrack: aMarsRover
	positionHeadingValue := Array with: ''  with:''.
	marsRover := aMarsRover.
	aMarsRover addLogger: self.! !

!methodRemoval: PositionHeadingWindow #initialize stamp: 'DA 6/3/2023 19:54:48'!
initialize
	positionHeadingValue := Array with: ''  with:''.!
!PositionHeadingWindowTest methodsFor: 'test' stamp: 'DA 6/3/2023 19:55:02' prior: 50627496!
test01PositionHeadingWindowOfMarsRoverThatDoesntMoveIsEmpty
	|marsRover positionHeadingWindow|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth. 
	
	positionHeadingWindow := PositionHeadingWindow track: marsRover.
	
	marsRover process: ''.
	
	self assert: (Array with: '' with: '') equals: positionHeadingWindow positionHeadingValue. ! !
!PositionHeadingWindowTest methodsFor: 'test' stamp: 'DA 6/3/2023 19:55:11' prior: 50627528!
test02PositionHeadingWindowMovingFowardShowsPositionAndEmptyHeading
	|marsRover positionHeadingWindow|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth. 
	
	positionHeadingWindow := PositionHeadingWindow track: marsRover.
	
	marsRover process: 'f'.
	
	self assert: (Array with: '1@2' with: '') equals: positionHeadingWindow positionHeadingValue. ! !
!PositionHeadingWindowTest methodsFor: 'test' stamp: 'DA 6/3/2023 19:55:20' prior: 50627878!
test03PositionHeadingWindowMovingFowardAndRotatingShowsPositionAnHeading
	|marsRover positionHeadingWindow|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth. 
	
	positionHeadingWindow := PositionHeadingWindow track: marsRover.
	
	marsRover process: 'fr'.
	
	self assert: (Array with: '1@2' with: 'Apuntando al Este') equals: positionHeadingWindow positionHeadingValue. ! !
!PositionHeadingWindowTest methodsFor: 'test' stamp: 'DA 6/3/2023 19:55:27' prior: 50627996!
test04PositionHeadingWindowHeadingNorthShowsLastPositionHeadingEast
	|marsRover positionHeadingWindow|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth. 
	
	positionHeadingWindow := PositionHeadingWindow track: marsRover.
	
	marsRover process: 'frf'.
	
	self assert: (Array with: '2@2' with: 'Apuntando al Este') equals: positionHeadingWindow positionHeadingValue. ! !
!PositionHeadingWindowTest methodsFor: 'test' stamp: 'DA 6/3/2023 19:55:34' prior: 50628029!
test05PositionHeadingWindowHeadingNorthShowsLastPositionHeadingWest
	|marsRover positionHeadingWindow|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth. 
	
	positionHeadingWindow := PositionHeadingWindow track: marsRover.
	
	marsRover process: 'flf'.
	
	self assert: (Array with: '0@2' with: 'Apuntando al Oeste') equals: positionHeadingWindow positionHeadingValue. ! !
!PositionHeadingWindowTest methodsFor: 'test' stamp: 'DA 6/3/2023 19:55:41' prior: 50628123!
test06PositionHeadingWindowHeadingEastShowsLastPositionHeadingNorth
	|marsRover positionHeadingWindow|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingEast. 
	
	positionHeadingWindow := PositionHeadingWindow track: marsRover.
	
	marsRover process: 'lf'.
	
	self assert: (Array with: '1@2' with: 'Apuntando al Norte') equals: positionHeadingWindow positionHeadingValue. ! !
!PositionHeadingWindowTest methodsFor: 'test' stamp: 'DA 6/3/2023 19:55:48' prior: 50628201!
test07PositionHeadingWindowHeadingEastShowsLastPositionHeadingSouth
	|marsRover positionHeadingWindow|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingEast. 
	
	positionHeadingWindow := PositionHeadingWindow track: marsRover.
	
	marsRover process: 'lllf'.
	
	self assert: (Array with: '1@0' with: 'Apuntando al Sur') equals: positionHeadingWindow positionHeadingValue. ! !

!testRun: #PositionHeadingWindowTest #test01PositionHeadingWindowOfMarsRoverThatDoesntMoveIsEmpty stamp: 'DA 6/3/2023 19:55:54'!
ERROR!

!testRun: #PositionHeadingWindowTest #test02PositionHeadingWindowMovingFowardShowsPositionAndEmptyHeading stamp: 'DA 6/3/2023 19:55:54'!
ERROR!

!testRun: #PositionHeadingWindowTest #test03PositionHeadingWindowMovingFowardAndRotatingShowsPositionAnHeading stamp: 'DA 6/3/2023 19:55:54'!
ERROR!

!testRun: #PositionHeadingWindowTest #test04PositionHeadingWindowHeadingNorthShowsLastPositionHeadingEast stamp: 'DA 6/3/2023 19:55:54'!
ERROR!

!testRun: #PositionHeadingWindowTest #test05PositionHeadingWindowHeadingNorthShowsLastPositionHeadingWest stamp: 'DA 6/3/2023 19:55:54'!
ERROR!

!testRun: #PositionHeadingWindowTest #test06PositionHeadingWindowHeadingEastShowsLastPositionHeadingNorth stamp: 'DA 6/3/2023 19:55:54'!
ERROR!

!testRun: #PositionHeadingWindowTest #test07PositionHeadingWindowHeadingEastShowsLastPositionHeadingSouth stamp: 'DA 6/3/2023 19:55:54'!
ERROR!

!testRun: #PositionHeadingWindowTest #test01PositionHeadingWindowOfMarsRoverThatDoesntMoveIsEmpty stamp: 'DA 6/3/2023 19:55:56'!
ERROR!
!PositionHeadingWindow class methodsFor: 'instance creation' stamp: 'DA 6/3/2023 19:56:01'!
track: aMarsRover 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeTrack: aMarsRover ! !
!PositionHeadingWindow class methodsFor: 'instance creation' stamp: 'DA 6/3/2023 19:56:06' prior: 50628775!
track: aMarsRover 
	^self new initializeTrack: aMarsRover ! !

!testRun: #PositionHeadingWindowTest #test01PositionHeadingWindowOfMarsRoverThatDoesntMoveIsEmpty stamp: 'DA 6/3/2023 19:56:06'!
PASSED!

!testRun: #PositionLoggerTest #test01PositionLoggerOfMarsRoverThatDidntMoveIsEmpty stamp: 'DA 6/3/2023 19:56:16'!
ERROR!

!testRun: #PositionLoggerTest #test02PositionLoggerRegisterMoveNorth stamp: 'DA 6/3/2023 19:56:16'!
ERROR!

!testRun: #PositionLoggerTest #test03PositionLoggerRegisterMoveSouth stamp: 'DA 6/3/2023 19:56:16'!
ERROR!

!testRun: #PositionLoggerTest #test04PositionLoggerRegisterMoveEast stamp: 'DA 6/3/2023 19:56:16'!
ERROR!

!testRun: #PositionLoggerTest #test05PositionLoggerRegisterMoveWest stamp: 'DA 6/3/2023 19:56:16'!
ERROR!

!testRun: #PositionLoggerTest #test06PositionLoggerRegisterMoreThanOneMovement stamp: 'DA 6/3/2023 19:56:16'!
ERROR!

!testRun: #PositionLoggerTest #test07PositionLoggerOfMarsRoverRotatingDoesntTrackMovements stamp: 'DA 6/3/2023 19:56:16'!
ERROR!

!testRun: #PositionLoggerTest #test01PositionLoggerOfMarsRoverThatDidntMoveIsEmpty stamp: 'DA 6/3/2023 19:56:18'!
ERROR!
!PositionLogger class methodsFor: 'instance creation' stamp: 'DA 6/3/2023 19:56:22'!
track: aMarsRover 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeTrack: aMarsRover ! !
!PositionLogger class methodsFor: 'instance creation' stamp: 'DA 6/3/2023 19:56:26' prior: 50628822!
track: aMarsRover 
	^self new initializeTrack: aMarsRover ! !

!testRun: #PositionLoggerTest #test01PositionLoggerOfMarsRoverThatDidntMoveIsEmpty stamp: 'DA 6/3/2023 19:56:27'!
PASSED!

!classDefinition: #PositionHeadingLogger category: 'MarsRover-WithHeading' stamp: 'DA 6/3/2023 19:56:52'!
Object subclass: #PositionHeadingLogger
	instanceVariableNames: 'logs marsRover'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!PositionHeadingLogger methodsFor: 'as yet unclassified' stamp: 'DA 6/3/2023 19:56:50'!
initializeTrack: aMarsRover
	logs := OrderedCollection new.
	marsRover := aMarsRover.
	aMarsRover addLogger: self.! !
!PositionHeadingLoggerTest methodsFor: 'as yet unclassified' stamp: 'DA 6/3/2023 19:57:03' prior: 50626597!
test01PositionHeadingLoggerOfMarsRoverThatDidntMoveIsEmpty
	|marsRover positionHeadingLogger|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth. 
	
	positionHeadingLogger := PositionHeadingLogger track: marsRover.
	
	marsRover process: ''.
	
	self assert: positionHeadingLogger logs isEmpty. ! !
!PositionHeadingLoggerTest methodsFor: 'as yet unclassified' stamp: 'DA 6/3/2023 19:57:10' prior: 50626626!
test02PositionHeadingLoggerOfMarsRoverTrackMovementAndRotation
	|marsRover positionHeadingLogger|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth. 
	
	positionHeadingLogger := PositionHeadingLogger track: marsRover.
	
	marsRover process: 'fr'.
	
	self assert: (OrderedCollection with: 1@2 with: 'East') equals: positionHeadingLogger logs . ! !

!testRun: #PositionHeadingLoggerTest #test01PositionHeadingLoggerOfMarsRoverThatDidntMoveIsEmpty stamp: 'DA 6/3/2023 19:57:17'!
ERROR!

!testRun: #PositionHeadingLoggerTest #test02PositionHeadingLoggerOfMarsRoverTrackMovementAndRotation stamp: 'DA 6/3/2023 19:57:17'!
ERROR!

!testRun: #PositionHeadingLoggerTest #test01PositionHeadingLoggerOfMarsRoverThatDidntMoveIsEmpty stamp: 'DA 6/3/2023 19:57:19'!
ERROR!
!PositionHeadingLogger class methodsFor: 'instance creation' stamp: 'DA 6/3/2023 19:57:23'!
track: aMarsRover 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeTrack: aMarsRover ! !
!PositionHeadingLogger class methodsFor: 'instance creation' stamp: 'DA 6/3/2023 19:57:26' prior: 50628898!
track: aMarsRover 
	^self new initializeTrack: aMarsRover ! !

!testRun: #PositionHeadingLoggerTest #test01PositionHeadingLoggerOfMarsRoverThatDidntMoveIsEmpty stamp: 'DA 6/3/2023 19:57:27'!
PASSED!

!methodRemoval: PositionHeadingLogger #initialize stamp: 'DA 6/3/2023 19:57:40'!
initialize
	logs := OrderedCollection new!

!classDefinition: #HeadingLogger category: 'MarsRover-WithHeading' stamp: 'DA 6/3/2023 19:57:58'!
Object subclass: #HeadingLogger
	instanceVariableNames: 'logs marsRover'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!HeadingLogger methodsFor: 'initialization' stamp: 'DA 6/3/2023 19:57:57'!
initializeTrack: aMarsRover
	logs := OrderedCollection new.
	marsRover := aMarsRover.
	aMarsRover addLogger: self.! !

!methodRemoval: HeadingLogger #initialize stamp: 'DA 6/3/2023 19:58:03'!
initialize
	logs := OrderedCollection new.!
!HeadingLoggerTest methodsFor: 'as yet unclassified' stamp: 'DA 6/3/2023 19:58:17' prior: 50626358!
test01HeadingLoggerOfMarsRoverNotRotatingIsEmpty
	|marsRover headingLogger|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth. 
	
	headingLogger := HeadingLogger track: marsRover.
	
	marsRover process: 'f'.
	
	self assert: headingLogger logs isEmpty. ! !
!HeadingLoggerTest methodsFor: 'as yet unclassified' stamp: 'DA 6/3/2023 19:58:26' prior: 50626396!
test02HeadingLoggerRegisterHeadingEast
	|marsRover headingLogger|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth. 
	
	headingLogger := HeadingLogger track: marsRover.
	
	marsRover process: 'r'.
	
	self assert: (OrderedCollection with: 'East') equals: headingLogger logs. ! !
!HeadingLoggerTest methodsFor: 'as yet unclassified' stamp: 'DA 6/3/2023 19:58:33' prior: 50626409!
test03HeadingLoggerRegisterHeadingWest
	|marsRover headingLogger|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth. 
	
	headingLogger := HeadingLogger track: marsRover.
	
	marsRover process: 'l'.
	
	self assert: (OrderedCollection with: 'West') equals: headingLogger logs.! !
!HeadingLoggerTest methodsFor: 'as yet unclassified' stamp: 'DA 6/3/2023 19:58:41' prior: 50626422!
test04HeadingLoggerRegisterHeadingNorth
	|marsRover headingLogger|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingEast. 
	
	headingLogger := HeadingLogger track: marsRover.
	
	marsRover process: 'l'.
	
	self assert: (OrderedCollection with: 'North') equals: headingLogger logs. ! !
!HeadingLoggerTest methodsFor: 'as yet unclassified' stamp: 'DA 6/3/2023 19:58:51' prior: 50626435!
test05HeadingLoggerRegisterHeadingSouth
	|marsRover headingLogger|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingEast. 
	
	headingLogger := HeadingLogger track: marsRover.
	
	marsRover process: 'r'.
	
	self assert: (OrderedCollection with: 'South') equals: headingLogger logs. ! !
!HeadingLoggerTest methodsFor: 'as yet unclassified' stamp: 'DA 6/3/2023 19:59:08' prior: 50626448!
test06HeadingLoggerRegisterMoreThanOneRotation
	|marsRover headingLogger|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth. 
	
	headingLogger := HeadingLogger track: marsRover.
	
	marsRover process: 'rl'.
	
	self assert: (OrderedCollection with: 'East' with: 'North') equals: headingLogger logs. ! !

!testRun: #HeadingLoggerTest #test01HeadingLoggerOfMarsRoverNotRotatingIsEmpty stamp: 'DA 6/3/2023 19:59:19'!
ERROR!

!testRun: #HeadingLoggerTest #test02HeadingLoggerRegisterHeadingEast stamp: 'DA 6/3/2023 19:59:19'!
ERROR!

!testRun: #HeadingLoggerTest #test03HeadingLoggerRegisterHeadingWest stamp: 'DA 6/3/2023 19:59:19'!
ERROR!

!testRun: #HeadingLoggerTest #test04HeadingLoggerRegisterHeadingNorth stamp: 'DA 6/3/2023 19:59:19'!
ERROR!

!testRun: #HeadingLoggerTest #test05HeadingLoggerRegisterHeadingSouth stamp: 'DA 6/3/2023 19:59:19'!
ERROR!

!testRun: #HeadingLoggerTest #test06HeadingLoggerRegisterMoreThanOneRotation stamp: 'DA 6/3/2023 19:59:19'!
ERROR!

!testRun: #HeadingLoggerTest #test01HeadingLoggerOfMarsRoverNotRotatingIsEmpty stamp: 'DA 6/3/2023 19:59:33'!
ERROR!
!HeadingLogger class methodsFor: 'instance creation' stamp: 'DA 6/3/2023 19:59:37'!
track: aMarsRover 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeTrack: aMarsRover ! !
!HeadingLogger class methodsFor: 'instance creation' stamp: 'DA 6/3/2023 19:59:41' prior: 50629041!
track: aMarsRover 
	^self new initializeTrack: aMarsRover ! !

!testRun: #HeadingLoggerTest #test01HeadingLoggerOfMarsRoverNotRotatingIsEmpty stamp: 'DA 6/3/2023 19:59:42'!
ERROR!

!classDefinition: #HeadingWindow category: 'MarsRover-WithHeading' stamp: 'DA 6/3/2023 20:00:56'!
Object subclass: #HeadingWindow
	instanceVariableNames: 'headingValue marsRover'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!HeadingWindow methodsFor: 'category-name' stamp: 'DA 6/3/2023 20:00:51'!
initializeTrack: aMarsRover
	headingValue := ''.
	marsRover := aMarsRover.
	aMarsRover addLogger: self.! !

!methodRemoval: HeadingWindow #initialize stamp: 'DA 6/3/2023 20:01:04'!
initialize 
	headingValue := ''!
!HeadingWindowTest methodsFor: 'as yet unclassified' stamp: 'DA 6/3/2023 20:01:16' prior: 50627241!
test01HeadingWindowLoggerDontLogIfEmptyCommand
	|marsRover headingWindowLogger|
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	headingWindowLogger := HeadingWindow track: marsRover.
	
	marsRover process: ''.
	
	self assert: '' equals: headingWindowLogger headingValue. ! !
!HeadingWindowTest methodsFor: 'as yet unclassified' stamp: 'DA 6/3/2023 20:01:24' prior: 50627255!
test02HeadingWindowLoggerRegisterRotation
	|marsRover headingWindowLogger|
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	headingWindowLogger := HeadingWindow track: marsRover.
	
	marsRover process: 'r'.
	
	self assert: 'East' equals: headingWindowLogger headingValue. ! !
!HeadingWindowTest methodsFor: 'as yet unclassified' stamp: 'DA 6/3/2023 20:01:30' prior: 50627269!
test03HeadingWindowLoggerIfProcessMovementShowNothing
	|marsRover headingWindowLogger|
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	headingWindowLogger := HeadingWindow track: marsRover.
	
	marsRover process: 'f'.
	
	self assert: '' equals: headingWindowLogger headingValue. ! !
!HeadingWindowTest methodsFor: 'as yet unclassified' stamp: 'DA 6/3/2023 20:01:38' prior: 50627283!
test04HeadingWindowLoggerShowLastHeading
	|marsRover headingWindowLogger|
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	headingWindowLogger := HeadingWindow track: marsRover.
	
	marsRover process: 'rr'.
	
	self assert: 'South' equals: headingWindowLogger headingValue. ! !

!testRun: #HeadingWindowTest #test01HeadingWindowLoggerDontLogIfEmptyCommand stamp: 'DA 6/3/2023 20:01:44'!
ERROR!

!testRun: #HeadingWindowTest #test02HeadingWindowLoggerRegisterRotation stamp: 'DA 6/3/2023 20:01:44'!
ERROR!

!testRun: #HeadingWindowTest #test03HeadingWindowLoggerIfProcessMovementShowNothing stamp: 'DA 6/3/2023 20:01:44'!
ERROR!

!testRun: #HeadingWindowTest #test04HeadingWindowLoggerShowLastHeading stamp: 'DA 6/3/2023 20:01:44'!
ERROR!

!testRun: #HeadingWindowTest #test01HeadingWindowLoggerDontLogIfEmptyCommand stamp: 'DA 6/3/2023 20:01:46'!
ERROR!
!HeadingWindow class methodsFor: 'instance creation' stamp: 'DA 6/3/2023 20:01:49'!
track: aMarsRover 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeTrack: aMarsRover ! !
!HeadingWindow class methodsFor: 'instance creation' stamp: 'DA 6/3/2023 20:01:53' prior: 50629146!
track: aMarsRover 
	^self new initializeTrack: aMarsRover ! !

!testRun: #HeadingWindowTest #test01HeadingWindowLoggerDontLogIfEmptyCommand stamp: 'DA 6/3/2023 20:01:54'!
PASSED!
!MarsRover methodsFor: 'nil' stamp: 'DA 6/3/2023 20:05:11'!
position
	^position! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'DA 6/3/2023 20:05:19'!
head
	^head! !
!HeadingLogger methodsFor: 'category-name' stamp: 'DA 6/3/2023 20:09:30'!
notifyChange
	|headingLog|
	(marsRover head isKindOf: MarsRoverHeadingEast) ifTrue: [headingLog := 'East'].
	(marsRover head isKindOf: MarsRoverHeadingSouth) ifTrue: [headingLog := 'South'].
	(marsRover head isKindOf: MarsRoverHeadingNorth) ifTrue: [headingLog := 'North'].
	(marsRover head isKindOf: MarsRoverHeadingWest) ifTrue: [headingLog := 'West'].
	logs add: headingLog.! !

!methodRemoval: HeadingLogger #addHeading: stamp: 'DA 6/3/2023 20:09:34'!
addHeading: aHeading
	logs add: aHeading!

!methodRemoval: HeadingLogger #addPosition: stamp: 'DA 6/3/2023 20:09:38'!
addPosition: aPosition 
	!

!testRun: #HeadingLoggerTest #test01HeadingLoggerOfMarsRoverNotRotatingIsEmpty stamp: 'DA 6/3/2023 20:09:46'!
FAILURE!

!testRun: #HeadingLoggerTest #test02HeadingLoggerRegisterHeadingEast stamp: 'DA 6/3/2023 20:09:46'!
PASSED!

!testRun: #HeadingLoggerTest #test03HeadingLoggerRegisterHeadingWest stamp: 'DA 6/3/2023 20:09:46'!
PASSED!

!testRun: #HeadingLoggerTest #test04HeadingLoggerRegisterHeadingNorth stamp: 'DA 6/3/2023 20:09:46'!
PASSED!

!testRun: #HeadingLoggerTest #test05HeadingLoggerRegisterHeadingSouth stamp: 'DA 6/3/2023 20:09:46'!
PASSED!

!testRun: #HeadingLoggerTest #test06HeadingLoggerRegisterMoreThanOneRotation stamp: 'DA 6/3/2023 20:09:46'!
PASSED!

!testRun: #HeadingLoggerTest #test01HeadingLoggerOfMarsRoverNotRotatingIsEmpty stamp: 'DA 6/3/2023 20:09:46'!
FAILURE!
!HeadingLogger methodsFor: 'category-name' stamp: 'DA 6/3/2023 20:10:43' prior: 50629170!
notifyChange
	|headingLog|
	headingLog := ''.
	(marsRover head isKindOf: MarsRoverHeadingEast) ifTrue: [headingLog := 'East'].
	(marsRover head isKindOf: MarsRoverHeadingSouth) ifTrue: [headingLog := 'South'].
	(marsRover head isKindOf: MarsRoverHeadingNorth) ifTrue: [headingLog := 'North'].
	(marsRover head isKindOf: MarsRoverHeadingWest) ifTrue: [headingLog := 'West'].
	
	logs add: headingLog.! !

!testRun: #HeadingLoggerTest #test01HeadingLoggerOfMarsRoverNotRotatingIsEmpty stamp: 'DA 6/3/2023 20:10:49'!
FAILURE!

!testRun: #HeadingLoggerTest #test02HeadingLoggerRegisterHeadingEast stamp: 'DA 6/3/2023 20:10:49'!
PASSED!

!testRun: #HeadingLoggerTest #test03HeadingLoggerRegisterHeadingWest stamp: 'DA 6/3/2023 20:10:49'!
PASSED!

!testRun: #HeadingLoggerTest #test04HeadingLoggerRegisterHeadingNorth stamp: 'DA 6/3/2023 20:10:49'!
PASSED!

!testRun: #HeadingLoggerTest #test05HeadingLoggerRegisterHeadingSouth stamp: 'DA 6/3/2023 20:10:49'!
PASSED!

!testRun: #HeadingLoggerTest #test06HeadingLoggerRegisterMoreThanOneRotation stamp: 'DA 6/3/2023 20:10:49'!
PASSED!

!testRun: #HeadingLoggerTest #test01HeadingLoggerOfMarsRoverNotRotatingIsEmpty stamp: 'DA 6/3/2023 20:10:49'!
FAILURE!
!HeadingLogger methodsFor: 'category-name' stamp: 'DA 6/3/2023 20:12:01' prior: 50629217!
notifyChange

	(marsRover head isKindOf: MarsRoverHeadingEast) ifTrue: [logs add: 'East'].
	(marsRover head isKindOf: MarsRoverHeadingSouth) ifTrue: [logs add: 'South'].
	(marsRover head isKindOf: MarsRoverHeadingNorth) ifTrue: [logs add: 'North'].
	(marsRover head isKindOf: MarsRoverHeadingWest) ifTrue: [logs add: 'West'].
! !

!testRun: #HeadingLoggerTest #test01HeadingLoggerOfMarsRoverNotRotatingIsEmpty stamp: 'DA 6/3/2023 20:12:17'!
FAILURE!

!testRun: #HeadingLoggerTest #test02HeadingLoggerRegisterHeadingEast stamp: 'DA 6/3/2023 20:12:17'!
PASSED!

!testRun: #HeadingLoggerTest #test03HeadingLoggerRegisterHeadingWest stamp: 'DA 6/3/2023 20:12:17'!
PASSED!

!testRun: #HeadingLoggerTest #test04HeadingLoggerRegisterHeadingNorth stamp: 'DA 6/3/2023 20:12:17'!
PASSED!

!testRun: #HeadingLoggerTest #test05HeadingLoggerRegisterHeadingSouth stamp: 'DA 6/3/2023 20:12:17'!
PASSED!

!testRun: #HeadingLoggerTest #test06HeadingLoggerRegisterMoreThanOneRotation stamp: 'DA 6/3/2023 20:12:17'!
PASSED!

!testRun: #HeadingLoggerTest #test01HeadingLoggerOfMarsRoverNotRotatingIsEmpty stamp: 'DA 6/3/2023 20:12:17'!
FAILURE!
!HeadingLogger methodsFor: 'update' stamp: 'DA 6/3/2023 20:15:41' prior: 50629258!
notifyChange
	(marsRover head isKindOf: MarsRoverHeadingEast) ifTrue: [logs add: 'East'].
	(marsRover head isKindOf: MarsRoverHeadingSouth) ifTrue: [logs add: 'South'].
	(marsRover head isKindOf: MarsRoverHeadingNorth) ifTrue: [logs add: 'North'].
	(marsRover head isKindOf: MarsRoverHeadingWest) ifTrue: [logs add: 'West'].
! !

!testRun: #HeadingLoggerTest #test01HeadingLoggerOfMarsRoverNotRotatingIsEmpty stamp: 'DA 6/3/2023 20:22:38'!
FAILURE!

!testRun: #HeadingLoggerTest #test02HeadingLoggerRegisterHeadingEast stamp: 'DA 6/3/2023 20:22:38'!
PASSED!

!testRun: #HeadingLoggerTest #test03HeadingLoggerRegisterHeadingWest stamp: 'DA 6/3/2023 20:22:39'!
PASSED!

!testRun: #HeadingLoggerTest #test04HeadingLoggerRegisterHeadingNorth stamp: 'DA 6/3/2023 20:22:39'!
PASSED!

!testRun: #HeadingLoggerTest #test05HeadingLoggerRegisterHeadingSouth stamp: 'DA 6/3/2023 20:22:39'!
PASSED!

!testRun: #HeadingLoggerTest #test06HeadingLoggerRegisterMoreThanOneRotation stamp: 'DA 6/3/2023 20:22:39'!
PASSED!

!testRun: #HeadingLoggerTest #test01HeadingLoggerOfMarsRoverNotRotatingIsEmpty stamp: 'DA 6/3/2023 20:22:39'!
FAILURE!

!testRun: #HeadingLoggerTest #test01HeadingLoggerOfMarsRoverNotRotatingIsEmpty stamp: 'DA 6/3/2023 20:22:50'!
FAILURE!

!testRun: #HeadingLoggerTest #test02HeadingLoggerRegisterHeadingEast stamp: 'DA 6/3/2023 20:22:50'!
PASSED!

!testRun: #HeadingLoggerTest #test03HeadingLoggerRegisterHeadingWest stamp: 'DA 6/3/2023 20:22:50'!
PASSED!

!testRun: #HeadingLoggerTest #test04HeadingLoggerRegisterHeadingNorth stamp: 'DA 6/3/2023 20:22:50'!
PASSED!

!testRun: #HeadingLoggerTest #test05HeadingLoggerRegisterHeadingSouth stamp: 'DA 6/3/2023 20:22:50'!
PASSED!

!testRun: #HeadingLoggerTest #test06HeadingLoggerRegisterMoreThanOneRotation stamp: 'DA 6/3/2023 20:22:50'!
PASSED!

!testRun: #HeadingLoggerTest #test01HeadingLoggerOfMarsRoverNotRotatingIsEmpty stamp: 'DA 6/3/2023 20:22:50'!
FAILURE!

!testRun: #HeadingLoggerTest #test01HeadingLoggerOfMarsRoverNotRotatingIsEmpty stamp: 'DA 6/3/2023 20:22:57'!
PASSED!

!testRun: #HeadingLoggerTest #test01HeadingLoggerOfMarsRoverNotRotatingIsEmpty stamp: 'DA 6/3/2023 20:23:02'!
FAILURE!

!testRun: #HeadingLoggerTest #test01HeadingLoggerOfMarsRoverNotRotatingIsEmpty stamp: 'DA 6/3/2023 20:23:02'!
FAILURE!

!testRun: #HeadingLoggerTest #test02HeadingLoggerRegisterHeadingEast stamp: 'DA 6/3/2023 20:23:06'!
PASSED!

!testRun: #HeadingLoggerTest #test03HeadingLoggerRegisterHeadingWest stamp: 'DA 6/3/2023 20:23:08'!
PASSED!

!testRun: #HeadingLoggerTest #test04HeadingLoggerRegisterHeadingNorth stamp: 'DA 6/3/2023 20:23:09'!
PASSED!

!testRun: #HeadingLoggerTest #test05HeadingLoggerRegisterHeadingSouth stamp: 'DA 6/3/2023 20:23:11'!
PASSED!

!testRun: #HeadingLoggerTest #test06HeadingLoggerRegisterMoreThanOneRotation stamp: 'DA 6/3/2023 20:23:12'!
PASSED!
!HeadingLogger methodsFor: 'update' stamp: 'DA 6/3/2023 20:26:06'!
notifyHeadingChange
	(marsRover head isKindOf: MarsRoverHeadingEast) ifTrue: [logs add: 'East'].
	(marsRover head isKindOf: MarsRoverHeadingSouth) ifTrue: [logs add: 'South'].
	(marsRover head isKindOf: MarsRoverHeadingNorth) ifTrue: [logs add: 'North'].
	(marsRover head isKindOf: MarsRoverHeadingWest) ifTrue: [logs add: 'West'].
! !
!MarsRover methodsFor: 'tracking' stamp: 'DA 6/3/2023 20:26:32'!
notifyHeading
	loggers do: [:aLogger | aLogger notifyHeadingChange].! !
!MarsRover methodsFor: 'tracking' stamp: 'DA 6/3/2023 20:26:43'!
notifyPosition
	loggers do: [:aLogger | aLogger notifyPositionChange].! !

!methodRemoval: MarsRover #notify stamp: 'DA 6/3/2023 20:26:55'!
notify
	loggers do: [:aLogger | aLogger notifyChange].!
!MarsRover methodsFor: 'heading' stamp: 'DA 6/3/2023 20:27:04' prior: 50628323!
rotateLeft
	
	head rotateLeft.
	self notifyHeading ! !
!MarsRover methodsFor: 'heading' stamp: 'DA 6/3/2023 20:27:09' prior: 50628327!
rotateRight
	
	head rotateRight.
	self notifyHeading ! !
!MarsRover methodsFor: 'moving' stamp: 'DA 6/3/2023 20:27:15' prior: 50628309!
moveBackward

	head moveBackward.
	self notifyPosition ! !
!MarsRover methodsFor: 'moving' stamp: 'DA 6/3/2023 20:27:20' prior: 50628318!
moveForward
	
	head moveForward.
	self notifyPosition ! !

!methodRemoval: HeadingLogger #notifyChange stamp: 'DA 6/3/2023 20:27:27'!
notifyChange
	(marsRover head isKindOf: MarsRoverHeadingEast) ifTrue: [logs add: 'East'].
	(marsRover head isKindOf: MarsRoverHeadingSouth) ifTrue: [logs add: 'South'].
	(marsRover head isKindOf: MarsRoverHeadingNorth) ifTrue: [logs add: 'North'].
	(marsRover head isKindOf: MarsRoverHeadingWest) ifTrue: [logs add: 'West'].
!

!testRun: #HeadingLoggerTest #test01HeadingLoggerOfMarsRoverNotRotatingIsEmpty stamp: 'DA 6/3/2023 20:27:34'!
ERROR!

!testRun: #HeadingLoggerTest #test02HeadingLoggerRegisterHeadingEast stamp: 'DA 6/3/2023 20:27:34'!
PASSED!

!testRun: #HeadingLoggerTest #test03HeadingLoggerRegisterHeadingWest stamp: 'DA 6/3/2023 20:27:34'!
PASSED!

!testRun: #HeadingLoggerTest #test04HeadingLoggerRegisterHeadingNorth stamp: 'DA 6/3/2023 20:27:34'!
PASSED!

!testRun: #HeadingLoggerTest #test05HeadingLoggerRegisterHeadingSouth stamp: 'DA 6/3/2023 20:27:34'!
PASSED!

!testRun: #HeadingLoggerTest #test06HeadingLoggerRegisterMoreThanOneRotation stamp: 'DA 6/3/2023 20:27:34'!
PASSED!

!testRun: #HeadingLoggerTest #test01HeadingLoggerOfMarsRoverNotRotatingIsEmpty stamp: 'DA 6/3/2023 20:27:34'!
ERROR!
!HeadingLogger methodsFor: 'update' stamp: 'DA 6/3/2023 20:27:56'!
notifyPositionChange
	
! !

!testRun: #HeadingLoggerTest #test01HeadingLoggerOfMarsRoverNotRotatingIsEmpty stamp: 'DA 6/3/2023 20:28:00'!
PASSED!

!testRun: #HeadingLoggerTest #test02HeadingLoggerRegisterHeadingEast stamp: 'DA 6/3/2023 20:28:01'!
PASSED!

!testRun: #HeadingLoggerTest #test03HeadingLoggerRegisterHeadingWest stamp: 'DA 6/3/2023 20:28:01'!
PASSED!

!testRun: #HeadingLoggerTest #test04HeadingLoggerRegisterHeadingNorth stamp: 'DA 6/3/2023 20:28:01'!
PASSED!

!testRun: #HeadingLoggerTest #test05HeadingLoggerRegisterHeadingSouth stamp: 'DA 6/3/2023 20:28:01'!
PASSED!

!testRun: #HeadingLoggerTest #test06HeadingLoggerRegisterMoreThanOneRotation stamp: 'DA 6/3/2023 20:28:01'!
PASSED!

!methodRemoval: HeadingWindow #notify: stamp: 'DA 6/3/2023 20:28:15'!
notify: marsRover
	|estado|
	estado := marsRover getState !
!HeadingWindow methodsFor: 'category-name' stamp: 'DA 6/3/2023 20:29:44'!
notifyHeadingChange
	(marsRover head isKindOf: MarsRoverHeadingEast) ifTrue: [headingValue := 'Apuntando al Este'].
	(marsRover head isKindOf: MarsRoverHeadingSouth) ifTrue: [headingValue := 'Apuntando al Sur'].
	(marsRover head isKindOf: MarsRoverHeadingNorth) ifTrue: [headingValue := 'Apuntando al Norte'].
	(marsRover head isKindOf: MarsRoverHeadingWest) ifTrue: [headingValue := 'Apuntando al Oeste'].! !

!methodRemoval: HeadingWindow #addHeading: stamp: 'DA 6/3/2023 20:29:48'!
addHeading: aHeading
	headingValue := aHeading !

!methodRemoval: HeadingWindow #addPosition: stamp: 'DA 6/3/2023 20:29:53'!
addPosition: aPosition 
	headingValue := ''!
!HeadingWindow methodsFor: 'category-name' stamp: 'DA 6/3/2023 20:30:08'!
notifyPositionChange
	! !

!testRun: #HeadingWindowTest #test01HeadingWindowLoggerDontLogIfEmptyCommand stamp: 'DA 6/3/2023 20:30:19'!
PASSED!

!testRun: #HeadingWindowTest #test02HeadingWindowLoggerRegisterRotation stamp: 'DA 6/3/2023 20:30:19'!
FAILURE!

!testRun: #HeadingWindowTest #test03HeadingWindowLoggerIfProcessMovementShowNothing stamp: 'DA 6/3/2023 20:30:19'!
PASSED!

!testRun: #HeadingWindowTest #test04HeadingWindowLoggerShowLastHeading stamp: 'DA 6/3/2023 20:30:19'!
FAILURE!

!testRun: #HeadingWindowTest #test02HeadingWindowLoggerRegisterRotation stamp: 'DA 6/3/2023 20:30:21'!
FAILURE!
!HeadingWindowTest methodsFor: 'test' stamp: 'DA 6/3/2023 20:30:58' prior: 50629090!
test02HeadingWindowLoggerRegisterRotation
	|marsRover headingWindowLogger|
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	headingWindowLogger := HeadingWindow track: marsRover.
	
	marsRover process: 'r'.
	
	self assert: 'Apuntando al Este' equals: headingWindowLogger headingValue. ! !

!testRun: #HeadingWindowTest #test02HeadingWindowLoggerRegisterRotation stamp: 'DA 6/3/2023 20:30:59'!
PASSED!

!testRun: #HeadingWindowTest #test01HeadingWindowLoggerDontLogIfEmptyCommand stamp: 'DA 6/3/2023 20:30:59'!
PASSED!

!testRun: #HeadingWindowTest #test02HeadingWindowLoggerRegisterRotation stamp: 'DA 6/3/2023 20:30:59'!
PASSED!

!testRun: #HeadingWindowTest #test03HeadingWindowLoggerIfProcessMovementShowNothing stamp: 'DA 6/3/2023 20:30:59'!
PASSED!

!testRun: #HeadingWindowTest #test04HeadingWindowLoggerShowLastHeading stamp: 'DA 6/3/2023 20:30:59'!
FAILURE!

!testRun: #HeadingWindowTest #test04HeadingWindowLoggerShowLastHeading stamp: 'DA 6/3/2023 20:30:59'!
FAILURE!
!HeadingWindowTest methodsFor: 'test' stamp: 'DA 6/3/2023 20:31:16' prior: 50629116!
test04HeadingWindowLoggerShowLastHeading
	|marsRover headingWindowLogger|
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	headingWindowLogger := HeadingWindow track: marsRover.
	
	marsRover process: 'rr'.
	
	self assert: 'Apuntando al Sur' equals: headingWindowLogger headingValue. ! !

!testRun: #HeadingWindowTest #test04HeadingWindowLoggerShowLastHeading stamp: 'DA 6/3/2023 20:31:18'!
PASSED!

!testRun: #HeadingWindowTest #test01HeadingWindowLoggerDontLogIfEmptyCommand stamp: 'DA 6/3/2023 20:31:18'!
PASSED!

!testRun: #HeadingWindowTest #test02HeadingWindowLoggerRegisterRotation stamp: 'DA 6/3/2023 20:31:18'!
PASSED!

!testRun: #HeadingWindowTest #test03HeadingWindowLoggerIfProcessMovementShowNothing stamp: 'DA 6/3/2023 20:31:18'!
PASSED!

!testRun: #HeadingWindowTest #test04HeadingWindowLoggerShowLastHeading stamp: 'DA 6/3/2023 20:31:18'!
PASSED!
!PositionHeadingLogger methodsFor: 'category-name' stamp: 'DA 6/3/2023 20:33:54'!
notifyHeadingChange
	(marsRover head isKindOf: MarsRoverHeadingEast) ifTrue: [logs addLast: 'East'].
	(marsRover head isKindOf: MarsRoverHeadingSouth) ifTrue: [logs addLast: 'South'].
	(marsRover head isKindOf: MarsRoverHeadingNorth) ifTrue: [logs addLast: 'North'].
	(marsRover head isKindOf: MarsRoverHeadingWest) ifTrue: [logs addLast: 'West'].! !

!methodRemoval: PositionHeadingLogger #addHeading: stamp: 'DA 6/3/2023 20:34:02'!
addHeading: aHeading
	logs addLast: aHeading !
!PositionHeadingLogger methodsFor: 'category-name' stamp: 'DA 6/3/2023 20:34:36'!
notifyPositionChange
	logs addLast: marsRover position! !

!methodRemoval: PositionHeadingLogger #addPosition: stamp: 'DA 6/3/2023 20:34:40'!
addPosition: aPosition 
	logs addLast: aPosition !

!testRun: #PositionHeadingLoggerTest #test01PositionHeadingLoggerOfMarsRoverThatDidntMoveIsEmpty stamp: 'DA 6/3/2023 20:34:50'!
PASSED!

!testRun: #PositionHeadingLoggerTest #test02PositionHeadingLoggerOfMarsRoverTrackMovementAndRotation stamp: 'DA 6/3/2023 20:34:50'!
PASSED!
!PositionHeadingWindow methodsFor: 'category-name' stamp: 'DA 6/3/2023 20:36:45'!
notifyHeadingChange
	(marsRover head isKindOf: MarsRoverHeadingEast) ifTrue: [positionHeadingValue at:2 put: 'Apuntando al Este'].
	(marsRover head isKindOf: MarsRoverHeadingSouth) ifTrue: [positionHeadingValue at:2 put: 'Apuntando al Sur'].
	(marsRover head isKindOf: MarsRoverHeadingNorth) ifTrue: [positionHeadingValue at:2 put: 'Apuntando al Norte'].
	(marsRover head isKindOf: MarsRoverHeadingWest) ifTrue: [positionHeadingValue at:2 put: 'Apuntando al Oeste'].! !

!methodRemoval: PositionHeadingWindow #addHeading: stamp: 'DA 6/3/2023 20:37:02'!
addHeading: aHeading
	positionHeadingValue at:2 put: aHeading!
!PositionHeadingWindow methodsFor: 'category-name' stamp: 'DA 6/3/2023 20:37:23'!
notifyPositionChange
	positionHeadingValue at:1 put: marsRover position printString. ! !

!methodRemoval: PositionHeadingWindow #addPosition: stamp: 'DA 6/3/2023 20:37:28'!
addPosition: aPosition 
	positionHeadingValue at:1 put: aPosition printString. !
!PositionHeadingLogger methodsFor: 'category-name' stamp: 'DA 6/3/2023 20:37:38' prior: 50629628!
notifyPositionChange
	logs addLast: marsRover position printString! !

!testRun: #PositionHeadingLoggerTest #test01PositionHeadingLoggerOfMarsRoverThatDidntMoveIsEmpty stamp: 'DA 6/3/2023 20:37:43'!
PASSED!

!testRun: #PositionHeadingLoggerTest #test02PositionHeadingLoggerOfMarsRoverTrackMovementAndRotation stamp: 'DA 6/3/2023 20:37:43'!
FAILURE!

!testRun: #PositionHeadingLoggerTest #test02PositionHeadingLoggerOfMarsRoverTrackMovementAndRotation stamp: 'DA 6/3/2023 20:37:43'!
FAILURE!

!testRun: #PositionHeadingLoggerTest #test01PositionHeadingLoggerOfMarsRoverThatDidntMoveIsEmpty stamp: 'DA 6/3/2023 20:38:37'!
PASSED!

!testRun: #PositionHeadingLoggerTest #test02PositionHeadingLoggerOfMarsRoverTrackMovementAndRotation stamp: 'DA 6/3/2023 20:38:37'!
FAILURE!

!testRun: #PositionHeadingLoggerTest #test02PositionHeadingLoggerOfMarsRoverTrackMovementAndRotation stamp: 'DA 6/3/2023 20:38:37'!
FAILURE!

!testRun: #PositionHeadingLoggerTest #test02PositionHeadingLoggerOfMarsRoverTrackMovementAndRotation stamp: 'DA 6/3/2023 20:39:15'!
FAILURE!

!testRun: #PositionHeadingLoggerTest #test02PositionHeadingLoggerOfMarsRoverTrackMovementAndRotation stamp: 'DA 6/3/2023 20:39:15'!
FAILURE!
!PositionHeadingLoggerTest methodsFor: 'test' stamp: 'DA 6/3/2023 20:39:27' prior: 50628870!
test02PositionHeadingLoggerOfMarsRoverTrackMovementAndRotation
	|marsRover positionHeadingLogger|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth. 
	
	positionHeadingLogger := PositionHeadingLogger track: marsRover.
	
	marsRover process: 'fr'.
	
	self assert: (OrderedCollection with: '1@2' with: 'East') equals: positionHeadingLogger logs . ! !

!testRun: #PositionHeadingLoggerTest #test02PositionHeadingLoggerOfMarsRoverTrackMovementAndRotation stamp: 'DA 6/3/2023 20:39:28'!
PASSED!

!testRun: #PositionHeadingLoggerTest #test01PositionHeadingLoggerOfMarsRoverThatDidntMoveIsEmpty stamp: 'DA 6/3/2023 20:39:28'!
PASSED!

!testRun: #PositionHeadingLoggerTest #test02PositionHeadingLoggerOfMarsRoverTrackMovementAndRotation stamp: 'DA 6/3/2023 20:39:28'!
PASSED!

!testRun: #PositionHeadingWindowTest #test01PositionHeadingWindowOfMarsRoverThatDoesntMoveIsEmpty stamp: 'DA 6/3/2023 20:39:42'!
PASSED!

!testRun: #PositionHeadingWindowTest #test02PositionHeadingWindowMovingFowardShowsPositionAndEmptyHeading stamp: 'DA 6/3/2023 20:39:42'!
PASSED!

!testRun: #PositionHeadingWindowTest #test03PositionHeadingWindowMovingFowardAndRotatingShowsPositionAnHeading stamp: 'DA 6/3/2023 20:39:42'!
PASSED!

!testRun: #PositionHeadingWindowTest #test04PositionHeadingWindowHeadingNorthShowsLastPositionHeadingEast stamp: 'DA 6/3/2023 20:39:42'!
PASSED!

!testRun: #PositionHeadingWindowTest #test05PositionHeadingWindowHeadingNorthShowsLastPositionHeadingWest stamp: 'DA 6/3/2023 20:39:42'!
PASSED!

!testRun: #PositionHeadingWindowTest #test06PositionHeadingWindowHeadingEastShowsLastPositionHeadingNorth stamp: 'DA 6/3/2023 20:39:42'!
PASSED!

!testRun: #PositionHeadingWindowTest #test07PositionHeadingWindowHeadingEastShowsLastPositionHeadingSouth stamp: 'DA 6/3/2023 20:39:42'!
PASSED!
!PositionLogger methodsFor: 'category-name' stamp: 'DA 6/3/2023 20:40:04'!
notifyHeadingChange

! !
!PositionLogger methodsFor: 'category-name' stamp: 'DA 6/3/2023 20:40:53'!
notifyPositionChange
	logs addLast: marsRover position printString! !

!methodRemoval: PositionLogger #addHeading: stamp: 'DA 6/3/2023 20:40:57'!
addHeading: aHeading

!

!methodRemoval: PositionLogger #addPosition: stamp: 'DA 6/3/2023 20:41:02'!
addPosition: aPosition 
	logs addLast: aPosition.!

!testRun: #PositionLoggerTest #test01PositionLoggerOfMarsRoverThatDidntMoveIsEmpty stamp: 'DA 6/3/2023 20:41:05'!
PASSED!

!testRun: #PositionLoggerTest #test02PositionLoggerRegisterMoveNorth stamp: 'DA 6/3/2023 20:41:05'!
FAILURE!

!testRun: #PositionLoggerTest #test03PositionLoggerRegisterMoveSouth stamp: 'DA 6/3/2023 20:41:05'!
FAILURE!

!testRun: #PositionLoggerTest #test04PositionLoggerRegisterMoveEast stamp: 'DA 6/3/2023 20:41:05'!
FAILURE!

!testRun: #PositionLoggerTest #test05PositionLoggerRegisterMoveWest stamp: 'DA 6/3/2023 20:41:05'!
FAILURE!

!testRun: #PositionLoggerTest #test06PositionLoggerRegisterMoreThanOneMovement stamp: 'DA 6/3/2023 20:41:05'!
FAILURE!

!testRun: #PositionLoggerTest #test07PositionLoggerOfMarsRoverRotatingDoesntTrackMovements stamp: 'DA 6/3/2023 20:41:05'!
PASSED!

!testRun: #PositionLoggerTest #test02PositionLoggerRegisterMoveNorth stamp: 'DA 6/3/2023 20:41:07'!
FAILURE!
!PositionLoggerTest methodsFor: 'tests' stamp: 'DA 6/3/2023 20:41:18' prior: 50628540!
test02PositionLoggerRegisterMoveNorth
	|marsRover positionLogger|
	
	marsRover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth. 
	
	positionLogger := PositionLogger track: marsRover.
	
	marsRover process: 'f'.
	
	self assert: (OrderedCollection with: '0@1') equals: positionLogger logs. ! !
!PositionLoggerTest methodsFor: 'tests' stamp: 'DA 6/3/2023 20:41:26' prior: 50628552!
test03PositionLoggerRegisterMoveSouth
	|marsRover positionLogger|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth. 
	
	positionLogger := PositionLogger track: marsRover.
	
	marsRover process: 'b'.
	
	self assert: (OrderedCollection with: '1@0') equals: positionLogger logs. ! !
!PositionLoggerTest methodsFor: 'tests' stamp: 'DA 6/3/2023 20:41:47' prior: 50629836!
test03PositionLoggerRegisterMoveSouth
	|marsRover positionLogger|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth. 
	
	positionLogger := PositionLogger track: marsRover.
	
	marsRover process: 'b'.
	
	self assert: (OrderedCollection with: 1@0) equals: positionLogger logs. ! !
!PositionLoggerTest methodsFor: 'tests' stamp: 'DA 6/3/2023 20:41:52' prior: 50629824!
test02PositionLoggerRegisterMoveNorth
	|marsRover positionLogger|
	
	marsRover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth. 
	
	positionLogger := PositionLogger track: marsRover.
	
	marsRover process: 'f'.
	
	self assert: (OrderedCollection with: 0@1) equals: positionLogger logs. ! !
!PositionLogger methodsFor: 'category-name' stamp: 'DA 6/3/2023 20:42:00' prior: 50629783!
notifyPositionChange
	logs addLast: marsRover position ! !

!testRun: #PositionLoggerTest #test01PositionLoggerOfMarsRoverThatDidntMoveIsEmpty stamp: 'DA 6/3/2023 20:42:06'!
PASSED!

!testRun: #PositionLoggerTest #test02PositionLoggerRegisterMoveNorth stamp: 'DA 6/3/2023 20:42:06'!
PASSED!

!testRun: #PositionLoggerTest #test03PositionLoggerRegisterMoveSouth stamp: 'DA 6/3/2023 20:42:06'!
PASSED!

!testRun: #PositionLoggerTest #test04PositionLoggerRegisterMoveEast stamp: 'DA 6/3/2023 20:42:06'!
PASSED!

!testRun: #PositionLoggerTest #test05PositionLoggerRegisterMoveWest stamp: 'DA 6/3/2023 20:42:06'!
PASSED!

!testRun: #PositionLoggerTest #test06PositionLoggerRegisterMoreThanOneMovement stamp: 'DA 6/3/2023 20:42:06'!
PASSED!

!testRun: #PositionLoggerTest #test07PositionLoggerOfMarsRoverRotatingDoesntTrackMovements stamp: 'DA 6/3/2023 20:42:06'!
PASSED!
!PositionHeadingLogger methodsFor: 'category-name' stamp: 'DA 6/3/2023 20:42:19' prior: 50629679!
notifyPositionChange
	logs addLast: marsRover position! !
!PositionHeadingLoggerTest methodsFor: 'test' stamp: 'DA 6/3/2023 20:42:28' prior: 50629720!
test02PositionHeadingLoggerOfMarsRoverTrackMovementAndRotation
	|marsRover positionHeadingLogger|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth. 
	
	positionHeadingLogger := PositionHeadingLogger track: marsRover.
	
	marsRover process: 'fr'.
	
	self assert: (OrderedCollection with: 1@2 with: 'East') equals: positionHeadingLogger logs . ! !

!testRun: #PositionHeadingLoggerTest #test02PositionHeadingLoggerOfMarsRoverTrackMovementAndRotation stamp: 'DA 6/3/2023 20:42:29'!
PASSED!

!testRun: #PositionHeadingLoggerTest #test01PositionHeadingLoggerOfMarsRoverThatDidntMoveIsEmpty stamp: 'DA 6/3/2023 20:42:29'!
PASSED!

!testRun: #PositionHeadingLoggerTest #test02PositionHeadingLoggerOfMarsRoverTrackMovementAndRotation stamp: 'DA 6/3/2023 20:42:29'!
PASSED!
!PositionWindow methodsFor: 'category-name' stamp: 'DA 6/3/2023 20:42:58'!
notifyPositionChange
	positionValue := marsRover position printString! !
!PositionWindow methodsFor: 'category-name' stamp: 'DA 6/3/2023 20:43:09'!
notifyHeadingChange
	! !

!methodRemoval: PositionWindow #addHeading: stamp: 'DA 6/3/2023 20:43:14'!
addHeading: aHeading
	!

!methodRemoval: PositionWindow #addPosition: stamp: 'DA 6/3/2023 20:43:18'!
addPosition: aPosition 
	positionValue := aPosition printString !

!testRun: #PositionWindowTest #test01PositionWindowLoggerDontLogIfEmptyCommand stamp: 'DA 6/3/2023 20:43:27'!
PASSED!

!testRun: #PositionWindowTest #test02PositionWindowLoggerRegisterMovement stamp: 'DA 6/3/2023 20:43:27'!
PASSED!

!testRun: #PositionWindowTest #test03PositionWindowLoggerDoesntRegisterRotation stamp: 'DA 6/3/2023 20:43:27'!
PASSED!

!testRun: #PositionWindowTest #test04PositionWindowLoggerStoreLastPosition stamp: 'DA 6/3/2023 20:43:27'!
PASSED!

Object subclass: #MarsRoverLogger
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverLogger category: 'MarsRover-WithHeading' stamp: 'DA 6/3/2023 20:44:43'!
Object subclass: #MarsRoverLogger
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

MarsRoverLogger subclass: #HeadingLogger
	instanceVariableNames: 'logs marsRover'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #HeadingLogger category: 'MarsRover-WithHeading' stamp: 'DA 6/3/2023 20:44:52'!
MarsRoverLogger subclass: #HeadingLogger
	instanceVariableNames: 'logs marsRover'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

MarsRoverLogger subclass: #HeadingWindow
	instanceVariableNames: 'headingValue marsRover'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #HeadingWindow category: 'MarsRover-WithHeading' stamp: 'DA 6/3/2023 20:45:01'!
MarsRoverLogger subclass: #HeadingWindow
	instanceVariableNames: 'headingValue marsRover'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

MarsRoverLogger subclass: #PositionHeadingLogger
	instanceVariableNames: 'logs marsRover'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #PositionHeadingLogger category: 'MarsRover-WithHeading' stamp: 'DA 6/3/2023 20:45:13'!
MarsRoverLogger subclass: #PositionHeadingLogger
	instanceVariableNames: 'logs marsRover'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

MarsRoverLogger subclass: #PositionHeadingWindow
	instanceVariableNames: 'positionHeadingValue marsRover'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #PositionHeadingWindow category: 'MarsRover-WithHeading' stamp: 'DA 6/3/2023 20:45:23'!
MarsRoverLogger subclass: #PositionHeadingWindow
	instanceVariableNames: 'positionHeadingValue marsRover'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

MarsRoverLogger subclass: #PositionLogger
	instanceVariableNames: 'logs marsRover'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #PositionLogger category: 'MarsRover-WithHeading' stamp: 'DA 6/3/2023 20:45:35'!
MarsRoverLogger subclass: #PositionLogger
	instanceVariableNames: 'logs marsRover'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

MarsRoverLogger subclass: #PositionWindow
	instanceVariableNames: 'positionValue marsRover'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #PositionWindow category: 'MarsRover-WithHeading' stamp: 'DA 6/3/2023 20:45:45'!
MarsRoverLogger subclass: #PositionWindow
	instanceVariableNames: 'positionValue marsRover'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

----QUIT----(3 June 2023 20:54:05) CuisUniversity-5832.image priorSource: 9482857!

----STARTUP---- (4 June 2023 13:05:07) as D:\ISW1\windows64\CuisUniversity-5832.image!


!classRenamed: #MarsRoverLogger as: #MarsRoverObserver stamp: 'DA 6/4/2023 13:05:25'!
Smalltalk renameClassNamed: #MarsRoverLogger as: #MarsRoverObserver!

Object subclass: #MarsRoverObserver
	instanceVariableNames: 'headingTracker positionTracker'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverObserver category: 'MarsRover-WithHeading' stamp: 'DA 6/4/2023 13:05:42'!
Object subclass: #MarsRoverObserver
	instanceVariableNames: 'headingTracker positionTracker'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRenamed: #HeadingLogger as: #MarsRoverStatusViewer stamp: 'DA 6/4/2023 13:07:36'!
Smalltalk renameClassNamed: #HeadingLogger as: #MarsRoverStatusViewer!
!HeadingLoggerTest methodsFor: 'as yet unclassified' stamp: 'DA 6/4/2023 13:07:36' prior: 50628990!
test05HeadingLoggerRegisterHeadingSouth
	|marsRover headingLogger|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingEast. 
	
	headingLogger := MarsRoverStatusViewer track: marsRover.
	
	marsRover process: 'r'.
	
	self assert: (OrderedCollection with: 'South') equals: headingLogger logs. ! !
!HeadingLoggerTest methodsFor: 'as yet unclassified' stamp: 'DA 6/4/2023 13:07:36' prior: 50628939!
test01HeadingLoggerOfMarsRoverNotRotatingIsEmpty
	|marsRover headingLogger|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth. 
	
	headingLogger := MarsRoverStatusViewer track: marsRover.
	
	marsRover process: 'f'.
	
	self assert: headingLogger logs isEmpty. ! !
!HeadingLoggerTest methodsFor: 'as yet unclassified' stamp: 'DA 6/4/2023 13:07:36' prior: 50628977!
test04HeadingLoggerRegisterHeadingNorth
	|marsRover headingLogger|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingEast. 
	
	headingLogger := MarsRoverStatusViewer track: marsRover.
	
	marsRover process: 'l'.
	
	self assert: (OrderedCollection with: 'North') equals: headingLogger logs. ! !
!HeadingLoggerTest methodsFor: 'as yet unclassified' stamp: 'DA 6/4/2023 13:07:36' prior: 50629003!
test06HeadingLoggerRegisterMoreThanOneRotation
	|marsRover headingLogger|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth. 
	
	headingLogger := MarsRoverStatusViewer track: marsRover.
	
	marsRover process: 'rl'.
	
	self assert: (OrderedCollection with: 'East' with: 'North') equals: headingLogger logs. ! !
!HeadingLoggerTest methodsFor: 'as yet unclassified' stamp: 'DA 6/4/2023 13:07:36' prior: 50628964!
test03HeadingLoggerRegisterHeadingWest
	|marsRover headingLogger|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth. 
	
	headingLogger := MarsRoverStatusViewer track: marsRover.
	
	marsRover process: 'l'.
	
	self assert: (OrderedCollection with: 'West') equals: headingLogger logs.! !
!HeadingLoggerTest methodsFor: 'as yet unclassified' stamp: 'DA 6/4/2023 13:07:36' prior: 50628951!
test02HeadingLoggerRegisterHeadingEast
	|marsRover headingLogger|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth. 
	
	headingLogger := MarsRoverStatusViewer track: marsRover.
	
	marsRover process: 'r'.
	
	self assert: (OrderedCollection with: 'East') equals: headingLogger logs. ! !

!classRenamed: #PositionHeadingLogger as: #MarsRoverChangeLogger stamp: 'DA 6/4/2023 13:10:18'!
Smalltalk renameClassNamed: #PositionHeadingLogger as: #MarsRoverChangeLogger!
!PositionHeadingLoggerTest methodsFor: 'as yet unclassified' stamp: 'DA 6/4/2023 13:10:18' prior: 50628856!
test01PositionHeadingLoggerOfMarsRoverThatDidntMoveIsEmpty
	|marsRover positionHeadingLogger|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth. 
	
	positionHeadingLogger := MarsRoverChangeLogger track: marsRover.
	
	marsRover process: ''.
	
	self assert: positionHeadingLogger logs isEmpty. ! !
!PositionHeadingLoggerTest methodsFor: 'as yet unclassified' stamp: 'DA 6/4/2023 13:10:18' prior: 50629908!
test02PositionHeadingLoggerOfMarsRoverTrackMovementAndRotation
	|marsRover positionHeadingLogger|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth. 
	
	positionHeadingLogger := MarsRoverChangeLogger track: marsRover.
	
	marsRover process: 'fr'.
	
	self assert: (OrderedCollection with: 1@2 with: 'East') equals: positionHeadingLogger logs . ! !

----STARTUP---- (6 June 2023 18:59:50) as D:\ISW1\windows64\CuisUniversity-5832.image!


----End fileIn of C:\Users\daiana\Downloads\2022-2c-main\2022-2c-main\07-Portfolio2\Solucion\Portfolio2-Solucion.st----!

!classRemoval: #Transfer stamp: 'DA 6/6/2023 19:54:52'!
Object subclass: #Transfer
	instanceVariableNames: 'withdrawLeg depositLeg value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Solucion'!

!classRemoval: #AccountTransferNet stamp: 'DA 6/6/2023 19:54:52'!
TransactionVisitor subclass: #AccountTransferNet
	instanceVariableNames: 'account transferNet'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Solucion'!

!classRemoval: #AccountSummary stamp: 'DA 6/6/2023 19:54:52'!
TransactionVisitor subclass: #AccountSummary
	instanceVariableNames: 'account lines'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Solucion'!

!classRemoval: #TransactionVisitor stamp: 'DA 6/6/2023 19:54:52'!
Object subclass: #TransactionVisitor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Solucion'!

!classRemoval: #PortfolioTreePrinter stamp: 'DA 6/6/2023 19:54:53'!
AccountVisitor subclass: #PortfolioTreePrinter
	instanceVariableNames: 'portfolio lines spaces'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Solucion'!

!classRemoval: #PortfolioSummary stamp: 'DA 6/6/2023 19:54:53'!
AccountVisitor subclass: #PortfolioSummary
	instanceVariableNames: 'portfolio lines spaces'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Solucion'!

!classRemoval: #AccountVisitor stamp: 'DA 6/6/2023 19:54:53'!
Object subclass: #AccountVisitor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Solucion'!

!classRemoval: #Withdraw stamp: 'DA 6/6/2023 19:54:53'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Solucion'!

!classRemoval: #TransferWithdraw stamp: 'DA 6/6/2023 19:54:53'!
TransferLeg subclass: #TransferWithdraw
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Solucion'!

!classRemoval: #TransferDeposit stamp: 'DA 6/6/2023 19:54:53'!
TransferLeg subclass: #TransferDeposit
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Solucion'!

!classRemoval: #TransferLeg stamp: 'DA 6/6/2023 19:54:54'!
AccountTransaction subclass: #TransferLeg
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Solucion'!

!classRemoval: #Deposit stamp: 'DA 6/6/2023 19:54:54'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Solucion'!

!classRemoval: #AccountTransaction stamp: 'DA 6/6/2023 19:54:54'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Solucion'!

!classRemoval: #ReceptiveAccount stamp: 'DA 6/6/2023 19:54:54'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Solucion'!

!classRemoval: #Portfolio stamp: 'DA 6/6/2023 19:54:54'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Solucion'!

!classRemoval: #Account stamp: 'DA 6/6/2023 19:54:55'!
Object subclass: #Account
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Solucion'!

Object subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CartTest category: 'TusLibros' stamp: 'DA 6/6/2023 19:57:00'!
Object subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cart category: 'TusLibros' stamp: 'DA 6/6/2023 19:59:07'!
Object subclass: #Cart
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CartTest methodsFor: 'no messages' stamp: 'DA 6/6/2023 19:59:01'!
test01NewCartStartsEmpty

	self assert: Cart new isEmpty! !
!Cart methodsFor: 'no messages' stamp: 'DA 6/6/2023 19:59:20'!
isEmpty
	^true ! !

TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CartTest category: 'TusLibros' stamp: 'DA 6/6/2023 19:59:42'!
TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!testRun: #CartTest #test01NewCartStartsEmpty stamp: 'DA 6/6/2023 19:59:47'!
PASSED!
!CartTest methodsFor: 'tests' stamp: 'DA 6/6/2023 20:02:40'!
test02AddBookToCartIsNotEmpty
	|cart|
	cart := Cart new.
	cart add: self bookPublished.
	
	self deny: cart isEmpty.! !

!testRun: #CartTest #test02AddBookToCartIsNotEmpty stamp: 'DA 6/6/2023 20:02:43'!
ERROR!
!CartTest methodsFor: 'tests' stamp: 'DA 6/6/2023 20:02:51'!
bookPublished
	self shouldBeImplemented.! !
!CartTest methodsFor: 'tests' stamp: 'DA 6/6/2023 20:03:06' prior: 50631245!
bookPublished
	^'A book that is published'! !

!testRun: #CartTest #test02AddBookToCartIsNotEmpty stamp: 'DA 6/6/2023 20:03:07'!
ERROR!
!Cart methodsFor: 'as yet unclassified' stamp: 'DA 6/6/2023 20:03:20'!
add: aRenameMe1 
	self shouldBeImplemented.! !
!Cart methodsFor: 'as yet unclassified' stamp: 'DA 6/6/2023 20:03:40' prior: 50631256!
add: aBook
	! !

!testRun: #CartTest #test02AddBookToCartIsNotEmpty stamp: 'DA 6/6/2023 20:03:41'!
FAILURE!
!CartTest methodsFor: 'tests' stamp: 'DA 6/6/2023 20:04:21'!
test02AddingBookThatBelongSiteMakesCartNotEmpty
	|cart|
	cart := Cart new.
	cart add: self bookPublished.
	
	self deny: cart isEmpty.! !

!methodRemoval: CartTest #test02AddBookToCartIsNotEmpty stamp: 'DA 6/6/2023 20:04:27'!
test02AddBookToCartIsNotEmpty
	|cart|
	cart := Cart new.
	cart add: self bookPublished.
	
	self deny: cart isEmpty.!

!testRun: #CartTest #test02AddingBookThatBelongSiteMakesCartNotEmpty stamp: 'DA 6/6/2023 20:04:49'!
FAILURE!

Object subclass: #Cart
	instanceVariableNames: 'items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cart category: 'TusLibros' stamp: 'DA 6/6/2023 20:06:39'!
Object subclass: #Cart
	instanceVariableNames: 'items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CartTest methodsFor: 'tests' stamp: 'DA 6/6/2023 20:10:32'!
test02CannotAddBookThatNotBelongSite
	|cart|
	cart := Cart new.
	
	self 
		should: [cart add: self bookNotPublished.]
	 	raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: cart invalidBookError.
			]! !

!methodRemoval: CartTest #test02AddingBookThatBelongSiteMakesCartNotEmpty stamp: 'DA 6/6/2023 20:11:13'!
test02AddingBookThatBelongSiteMakesCartNotEmpty
	|cart|
	cart := Cart new.
	cart add: self bookPublished.
	
	self deny: cart isEmpty.!
!CartTest methodsFor: 'tests' stamp: 'DA 6/6/2023 20:11:35' prior: 50631294!
test02CannotAddBookThatNotBelongSite
	|cart|
	cart := Cart new.
	
	self 
		should: [cart add: self bookNotPublished.]
	 	raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: cart invalidBookError.
			]! !

!testRun: #CartTest #test02CannotAddBookThatNotBelongSite stamp: 'DA 6/6/2023 20:11:38'!
ERROR!
!Cart methodsFor: 'error handling' stamp: 'DA 6/6/2023 20:11:46'!
invalidBookError
	self shouldBeImplemented.! !
!Cart methodsFor: 'error handling' stamp: 'DA 6/6/2023 20:12:14' prior: 50631325!
invalidBookError
	^ 'Book not belongs to site'! !

!testRun: #CartTest #test02CannotAddBookThatNotBelongSite stamp: 'DA 6/6/2023 20:12:15'!
FAILURE!
!CartTest methodsFor: 'tests' stamp: 'DA 6/6/2023 20:12:31'!
bookNotPublished
	^'A book that is not published'! !
!CartTest methodsFor: 'tests' stamp: 'DA 6/6/2023 20:12:43' prior: 50631312!
test02CannotAddBookThatNotBelongSite
	|cart|
	cart := Cart new.
	
	self 
		should: [cart add: self bookNotPublished.]
	 	raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: cart invalidBookErrorMessage.
			]! !
!Cart methodsFor: 'error handling' stamp: 'DA 6/6/2023 20:12:52'!
invalidBookErrorMessage
	^ 'Book not belongs to site'! !

!methodRemoval: Cart #invalidBookError stamp: 'DA 6/6/2023 20:12:52'!
invalidBookError
	^ 'Book not belongs to site'!

!classDefinition: #Cart category: 'TusLibros' stamp: 'DA 6/6/2023 20:14:18'!
Object subclass: #Cart
	instanceVariableNames: 'items catalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cart methodsFor: 'as yet unclassified' stamp: 'DA 6/6/2023 20:14:16' prior: 50631261!
add: aBook
	(catalog includes: aBook) ifFalse: [self error: self invalidBookErrorMessage].! !

!testRun: #CartTest #test02CannotAddBookThatNotBelongSite stamp: 'DA 6/6/2023 20:14:25'!
FAILURE!
!CartTest methodsFor: 'tests' stamp: 'DA 6/6/2023 20:15:32' prior: 50631342!
test02CannotAddBookThatNotBelongSite
	|cart emptyCatalog|
	emptyCatalog := Array new. 
	cart := Cart with: emptyCatalog.
	
	self 
		should: [cart add: self bookNotPublished.]
	 	raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: cart invalidBookErrorMessage.
			]! !

!testRun: #CartTest #test02CannotAddBookThatNotBelongSite stamp: 'DA 6/6/2023 20:15:33'!
ERROR!
!Cart class methodsFor: 'instance creation' stamp: 'DA 6/6/2023 20:15:38'!
with: anArray 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWith: anArray ! !
!Cart class methodsFor: 'instance creation' stamp: 'DA 6/6/2023 20:15:52' prior: 50631391!
with: aCatalog
	^self new initializeWith: aCatalog! !

!testRun: #CartTest #test02CannotAddBookThatNotBelongSite stamp: 'DA 6/6/2023 20:15:53'!
ERROR!
!Cart methodsFor: 'initialize' stamp: 'DA 6/6/2023 20:16:07'!
initializeWith: aCatalog 
	self shouldBeImplemented.
	catalog := aCatalog.! !
!Cart methodsFor: 'initialize' stamp: 'DA 6/6/2023 20:16:11' prior: 50631406!
initializeWith: aCatalog 
	catalog := aCatalog.! !

!testRun: #CartTest #test02CannotAddBookThatNotBelongSite stamp: 'DA 6/6/2023 20:16:12'!
PASSED!

!testRun: #CartTest #test01NewCartStartsEmpty stamp: 'DA 6/6/2023 20:16:12'!
PASSED!

!testRun: #CartTest #test02CannotAddBookThatNotBelongSite stamp: 'DA 6/6/2023 20:16:12'!
PASSED!
!CartTest methodsFor: 'tests' stamp: 'DA 6/6/2023 20:17:58'!
test03AddingBookThatBelongSiteMakesCartNotEmpty
	|cart catalog|
	catalog := Array with: self bookPublished. 
	cart := Cart with: catalog.
	
	cart add: self bookPublished.
	self deny: cart isEmpty.! !

!testRun: #CartTest #test03AddingBookThatBelongSiteMakesCartNotEmpty stamp: 'DA 6/6/2023 20:17:59'!
FAILURE!
!Cart methodsFor: 'as yet unclassified' stamp: 'DA 6/6/2023 20:18:10' prior: 50631220!
isEmpty
	^catalog isEmpty! !
!Cart methodsFor: 'as yet unclassified' stamp: 'DA 6/6/2023 20:18:28' prior: 50631437!
isEmpty
	^items isEmpty! !
!Cart methodsFor: 'as yet unclassified' stamp: 'DA 6/6/2023 20:18:56' prior: 50631367!
add: aBook
	(catalog includes: aBook) ifFalse: [self error: self invalidBookErrorMessage].
	items add: aBook.! !

!testRun: #CartTest #test03AddingBookThatBelongSiteMakesCartNotEmpty stamp: 'DA 6/6/2023 20:19:00'!
ERROR!
!Cart methodsFor: 'initialize' stamp: 'DA 6/6/2023 20:19:29' prior: 50631411!
initializeWith: aCatalog 
	catalog := aCatalog.
	items := OrderedCollection new. ! !

!testRun: #CartTest #test03AddingBookThatBelongSiteMakesCartNotEmpty stamp: 'DA 6/6/2023 20:19:37'!
PASSED!

!testRun: #CartTest #test01NewCartStartsEmpty stamp: 'DA 6/6/2023 20:19:37'!
ERROR!

!testRun: #CartTest #test02CannotAddBookThatNotBelongSite stamp: 'DA 6/6/2023 20:19:37'!
PASSED!

!testRun: #CartTest #test03AddingBookThatBelongSiteMakesCartNotEmpty stamp: 'DA 6/6/2023 20:19:37'!
PASSED!

!testRun: #CartTest #test01NewCartStartsEmpty stamp: 'DA 6/6/2023 20:19:37'!
ERROR!

!testRun: #CartTest #test03AddingBookThatBelongSiteMakesCartNotEmpty stamp: 'DA 6/6/2023 20:20:36'!
PASSED!

!testRun: #CartTest #test01NewCartStartsEmpty stamp: 'DA 6/6/2023 20:20:36'!
ERROR!

!testRun: #CartTest #test02CannotAddBookThatNotBelongSite stamp: 'DA 6/6/2023 20:20:36'!
PASSED!

!testRun: #CartTest #test03AddingBookThatBelongSiteMakesCartNotEmpty stamp: 'DA 6/6/2023 20:20:36'!
PASSED!

!testRun: #CartTest #test01NewCartStartsEmpty stamp: 'DA 6/6/2023 20:20:36'!
ERROR!

!testRun: #CartTest #test03AddingBookThatBelongSiteMakesCartNotEmpty stamp: 'DA 6/6/2023 20:22:07'!
PASSED!

!testRun: #CartTest #test02CannotAddBookThatNotBelongSite stamp: 'DA 6/6/2023 20:22:12'!
PASSED!
!CartTest methodsFor: 'tests' stamp: 'DA 6/6/2023 20:22:58' prior: 50631216!
test01NewCartStartsEmpty
	|emptyCatalog|
	emptyCatalog := Array new.
	
	self assert: (Cart with: emptyCatalog) isEmpty! !

!testRun: #CartTest #test01NewCartStartsEmpty stamp: 'DA 6/6/2023 20:23:00'!
PASSED!

!testRun: #CartTest #test01NewCartStartsEmpty stamp: 'DA 6/6/2023 20:23:00'!
PASSED!

!testRun: #CartTest #test02CannotAddBookThatNotBelongSite stamp: 'DA 6/6/2023 20:23:00'!
PASSED!

!testRun: #CartTest #test03AddingBookThatBelongSiteMakesCartNotEmpty stamp: 'DA 6/6/2023 20:23:00'!
PASSED!
!CartTest methodsFor: 'tests' stamp: 'DA 6/6/2023 20:29:13'!
test04CartCanAddAmountOfSameBook
	|cart catalog|
	catalog := Array with: self bookPublished. 
	cart := Cart with: catalog.
	
	cart addQuantity: 2 ofBook: self bookPublished.
	
	self deny: cart isEmpty.! !

!testRun: #CartTest #test04CartCanAddAmountOfSameBook stamp: 'DA 6/6/2023 20:29:19'!
ERROR!
!Cart methodsFor: 'as yet unclassified' stamp: 'DA 6/6/2023 20:29:25'!
addQuantity: aRenameMe1 ofBook: aRenameMe2 
	self shouldBeImplemented.! !
!Cart methodsFor: 'as yet unclassified' stamp: 'DA 6/6/2023 20:30:04' prior: 50631527!
addQuantity: anAmount ofBook: aBook 
	anAmount timesRepeat: [self add: aBook].! !

!testRun: #CartTest #test04CartCanAddAmountOfSameBook stamp: 'DA 6/6/2023 20:30:05'!
PASSED!

!testRun: #CartTest #test01NewCartStartsEmpty stamp: 'DA 6/6/2023 20:30:05'!
PASSED!

!testRun: #CartTest #test02CannotAddBookThatNotBelongSite stamp: 'DA 6/6/2023 20:30:05'!
PASSED!

!testRun: #CartTest #test03AddingBookThatBelongSiteMakesCartNotEmpty stamp: 'DA 6/6/2023 20:30:05'!
PASSED!

!testRun: #CartTest #test04CartCanAddAmountOfSameBook stamp: 'DA 6/6/2023 20:30:05'!
PASSED!
!Cart methodsFor: 'as yet unclassified' stamp: 'DA 6/6/2023 20:30:23' prior: 50631445!
add: aBook
	items add: aBook.! !
!Cart methodsFor: 'as yet unclassified' stamp: 'DA 6/6/2023 20:30:27' prior: 50631533!
addQuantity: anAmount ofBook: aBook 
	(catalog includes: aBook) ifFalse: [self error: self invalidBookErrorMessage].
	anAmount timesRepeat: [self add: aBook].! !
!CartTest methodsFor: 'tests' stamp: 'DA 6/6/2023 20:30:59' prior: 50631376!
test02CannotAddBookThatNotBelongSite
	|cart emptyCatalog|
	emptyCatalog := Array new. 
	cart := Cart with: emptyCatalog.
	
	self 
		should: [cart addQuantity: 1 ofBook: self bookNotPublished.]
	 	raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: cart invalidBookErrorMessage.
			]! !
!CartTest methodsFor: 'tests' stamp: 'DA 6/6/2023 20:31:08' prior: 50631424!
test03AddingBookThatBelongSiteMakesCartNotEmpty
	|cart catalog|
	catalog := Array with: self bookPublished. 
	cart := Cart with: catalog.
	
	cart addQuantity: 1 ofBook: self bookPublished.
	self deny: cart isEmpty.! !
!CartTest methodsFor: 'tests' stamp: 'DA 6/6/2023 20:31:14' prior: 50631515!
test04CartCanAddAmountOfSameBook
	|cart catalog|
	catalog := Array with: self bookPublished. 
	cart := Cart with: catalog.
	
	cart addQuantity: 2 ofBook: self bookPublished.
	self deny: cart isEmpty.! !
!CartTest methodsFor: 'tests' stamp: 'DA 6/6/2023 20:31:28'!
test04CartCanAddPositiveAmountOfSameBook
	|cart catalog|
	catalog := Array with: self bookPublished. 
	cart := Cart with: catalog.
	
	cart addQuantity: 0 ofBook: self bookPublished.
	self deny: cart isEmpty.! !
!CartTest methodsFor: 'tests' stamp: 'DA 6/6/2023 20:31:36' prior: 50631598!
test04CartCanAddPositiveAmountOfSameBook
	|cart catalog|
	catalog := Array with: self bookPublished. 
	cart := Cart with: catalog.
	
	cart addQuantity: -1 ofBook: self bookPublished.
	self deny: cart isEmpty.! !
!CartTest methodsFor: 'tests' stamp: 'DA 6/6/2023 20:31:43' prior: 50631607!
test04CartCanAddPositiveAmountOfSameBook
	|cart catalog|
	catalog := Array with: self bookPublished. 
	cart := Cart with: catalog.
	
	cart addQuantity: -1 ofBook: self bookPublished.
	self assert: cart isEmpty.! !
!CartTest methodsFor: 'tests' stamp: 'DA 6/6/2023 20:33:11' prior: 50631617!
test04CartCanAddPositiveAmountOfSameBook
	|cart catalog|
	catalog := Array with: self bookPublished. 
	cart := Cart with: catalog.
	
	self 
		should: [cart addQuantity: -1 ofBook: self bookPublished.]
		raise: Error
		withExceptionDo: [:anError|
			self assert: anError messageText equals: cart onlyCanAddPositiveQuantityErrorMessage.]! !

!testRun: #CartTest #test04CartCanAddPositiveAmountOfSameBook stamp: 'DA 6/6/2023 20:33:15'!
FAILURE!
!Cart methodsFor: 'nil' stamp: 'DA 6/6/2023 20:33:41'!
onlyCanAddPositiveQuantityErrorMessage
	^'Cant add zero or negative amount of books'! !
!Cart methodsFor: 'as yet unclassified' stamp: 'DA 6/6/2023 20:34:19' prior: 50631558!
addQuantity: anAmount ofBook: aBook 
	(catalog includes: aBook) ifFalse: [self error: self invalidBookErrorMessage].
	(anAmount < 1) ifTrue: [self error: self onlyCanAddPositiveQuantityErrorMessage].
	anAmount timesRepeat: [self add: aBook].! !

!testRun: #CartTest #test04CartCanAddPositiveAmountOfSameBook stamp: 'DA 6/6/2023 20:34:25'!
PASSED!

!testRun: #CartTest #test01NewCartStartsEmpty stamp: 'DA 6/6/2023 20:34:25'!
PASSED!

!testRun: #CartTest #test02CannotAddBookThatNotBelongSite stamp: 'DA 6/6/2023 20:34:25'!
PASSED!

!testRun: #CartTest #test03AddingBookThatBelongSiteMakesCartNotEmpty stamp: 'DA 6/6/2023 20:34:25'!
PASSED!

!testRun: #CartTest #test04CartCanAddAmountOfSameBook stamp: 'DA 6/6/2023 20:34:25'!
PASSED!

!testRun: #CartTest #test04CartCanAddPositiveAmountOfSameBook stamp: 'DA 6/6/2023 20:34:25'!
PASSED!
!CartTest methodsFor: 'tests' stamp: 'DA 6/6/2023 20:34:29' prior: 50631627!
test04CartCanAddPositiveAmountOfSameBook
	|cart catalog|
	catalog := Array with: self bookPublished. 
	cart := Cart with: catalog.
	self 
		should: [cart addQuantity: -1 ofBook: self bookPublished.]
		raise: Error
		withExceptionDo: [:anError|
			self assert: anError messageText equals: cart onlyCanAddPositiveQuantityErrorMessage.]! !
!CartTest methodsFor: 'tests' stamp: 'DA 6/6/2023 20:34:45'!
test05CartCanAddPositiveAmountOfSameBook
	|cart catalog|
	catalog := Array with: self bookPublished. 
	cart := Cart with: catalog.
	self 
		should: [cart addQuantity: -1 ofBook: self bookPublished.]
		raise: Error
		withExceptionDo: [:anError|
			self assert: anError messageText equals: cart onlyCanAddPositiveQuantityErrorMessage.]! !

!methodRemoval: CartTest #test04CartCanAddPositiveAmountOfSameBook stamp: 'DA 6/6/2023 20:34:45'!
test04CartCanAddPositiveAmountOfSameBook
	|cart catalog|
	catalog := Array with: self bookPublished. 
	cart := Cart with: catalog.
	self 
		should: [cart addQuantity: -1 ofBook: self bookPublished.]
		raise: Error
		withExceptionDo: [:anError|
			self assert: anError messageText equals: cart onlyCanAddPositiveQuantityErrorMessage.]!
!CartTest methodsFor: 'tests' stamp: 'DA 6/6/2023 20:38:06'!
test05CartCanRememberNumberOfBooksAdded
	|cart catalog|
	catalog := Array with: self bookPublished. 
	cart := Cart with: catalog.
	
	cart addQuantity: 2 ofBook: self bookPublished.
	self assert: 2 equals: (cart amountAddedOf: self bookNotPublished). ! !

!testRun: #CartTest #test05CartCanRememberNumberOfBooksAdded stamp: 'DA 6/6/2023 20:38:10'!
ERROR!
!Cart methodsFor: 'as yet unclassified' stamp: 'DA 6/6/2023 20:38:15'!
amountAddedOf: aRenameMe1 
	self shouldBeImplemented.! !

----End fileIn of D:\ISW1\windows64\Packages\TerseGuide.pck.st----!

!testRun: #CartTest #test05CartCanRememberNumberOfBooksAdded stamp: 'DA 6/6/2023 20:39:10'!
ERROR!
!CartTest methodsFor: 'tests' stamp: 'DA 6/6/2023 20:39:25'!
test06CartCanRememberNumberOfBooksAdded
	|cart catalog|
	catalog := Array with: self bookPublished. 
	cart := Cart with: catalog.
	
	cart addQuantity: 2 ofBook: self bookPublished.
	self assert: 2 equals: (cart amountAddedOf: self bookNotPublished). ! !

!methodRemoval: CartTest #test05CartCanRememberNumberOfBooksAdded stamp: 'DA 6/6/2023 20:39:25'!
test05CartCanRememberNumberOfBooksAdded
	|cart catalog|
	catalog := Array with: self bookPublished. 
	cart := Cart with: catalog.
	
	cart addQuantity: 2 ofBook: self bookPublished.
	self assert: 2 equals: (cart amountAddedOf: self bookNotPublished). !

!testRun: #CartTest #test06CartCanRememberNumberOfBooksAdded stamp: 'DA 6/6/2023 20:39:29'!
ERROR!
!Cart methodsFor: 'as yet unclassified' stamp: 'DA 6/6/2023 20:39:51' prior: 50631731!
amountAddedOf: aBook
	^ items occurrencesOf: aBook! !

!testRun: #CartTest #test06CartCanRememberNumberOfBooksAdded stamp: 'DA 6/6/2023 20:39:55'!
FAILURE!
!CartTest methodsFor: 'tests' stamp: 'DA 6/6/2023 20:40:16' prior: 50634657!
test06CartCanRememberNumberOfBooksAdded
	|cart catalog|
	catalog := Array with: self bookPublished. 
	cart := Cart with: catalog.
	
	cart addQuantity: 2 ofBook: self bookPublished.
	self assert: 2 equals: (cart amountAddedOf: self bookPublished). ! !

!testRun: #CartTest #test06CartCanRememberNumberOfBooksAdded stamp: 'DA 6/6/2023 20:40:19'!
PASSED!

!testRun: #CartTest #test01NewCartStartsEmpty stamp: 'DA 6/6/2023 20:40:19'!
PASSED!

!testRun: #CartTest #test02CannotAddBookThatNotBelongSite stamp: 'DA 6/6/2023 20:40:19'!
PASSED!

!testRun: #CartTest #test03AddingBookThatBelongSiteMakesCartNotEmpty stamp: 'DA 6/6/2023 20:40:19'!
PASSED!

!testRun: #CartTest #test04CartCanAddAmountOfSameBook stamp: 'DA 6/6/2023 20:40:19'!
PASSED!

!testRun: #CartTest #test05CartCanAddPositiveAmountOfSameBook stamp: 'DA 6/6/2023 20:40:19'!
PASSED!

!testRun: #CartTest #test06CartCanRememberNumberOfBooksAdded stamp: 'DA 6/6/2023 20:40:19'!
PASSED!
!CartTest methodsFor: 'tests' stamp: 'DA 6/6/2023 20:41:13'!
test06CartCanCheckIfHasAddedABook
	|cart catalog|
	catalog := Array with: self bookPublished. 
	cart := Cart with: catalog.
	
	cart addQuantity: 2 ofBook: self bookPublished.
	self assert: (cart contains: self bookPublished ). ! !
!CartTest methodsFor: 'tests' stamp: 'DA 6/6/2023 20:41:24'!
test07CartCanCheckIfHasAddedABook
	|cart catalog|
	catalog := Array with: self bookPublished. 
	cart := Cart with: catalog.
	
	cart addQuantity: 2 ofBook: self bookPublished.
	self assert: (cart contains: self bookPublished ). ! !

!methodRemoval: CartTest #test06CartCanCheckIfHasAddedABook stamp: 'DA 6/6/2023 20:41:24'!
test06CartCanCheckIfHasAddedABook
	|cart catalog|
	catalog := Array with: self bookPublished. 
	cart := Cart with: catalog.
	
	cart addQuantity: 2 ofBook: self bookPublished.
	self assert: (cart contains: self bookPublished ). !

!testRun: #CartTest #test07CartCanCheckIfHasAddedABook stamp: 'DA 6/6/2023 20:41:30'!
ERROR!
!Cart methodsFor: 'as yet unclassified' stamp: 'DA 6/6/2023 20:41:38'!
contains: aRenameMe1 
	self shouldBeImplemented.! !
!Cart methodsFor: 'as yet unclassified' stamp: 'DA 6/6/2023 20:41:50' prior: 50634755!
contains: aBook
	^ items contains: aBook! !

!testRun: #CartTest #test07CartCanCheckIfHasAddedABook stamp: 'DA 6/6/2023 20:41:51'!
ERROR!
!Cart methodsFor: 'as yet unclassified' stamp: 'DA 6/6/2023 20:42:02' prior: 50634760!
contains: aBook
	^ items includes: aBook! !

!testRun: #CartTest #test07CartCanCheckIfHasAddedABook stamp: 'DA 6/6/2023 20:42:07'!
PASSED!

!testRun: #CartTest #test01NewCartStartsEmpty stamp: 'DA 6/6/2023 20:42:07'!
PASSED!

!testRun: #CartTest #test02CannotAddBookThatNotBelongSite stamp: 'DA 6/6/2023 20:42:07'!
PASSED!

!testRun: #CartTest #test03AddingBookThatBelongSiteMakesCartNotEmpty stamp: 'DA 6/6/2023 20:42:07'!
PASSED!

!testRun: #CartTest #test04CartCanAddAmountOfSameBook stamp: 'DA 6/6/2023 20:42:07'!
PASSED!

!testRun: #CartTest #test05CartCanAddPositiveAmountOfSameBook stamp: 'DA 6/6/2023 20:42:08'!
PASSED!

!testRun: #CartTest #test06CartCanRememberNumberOfBooksAdded stamp: 'DA 6/6/2023 20:42:08'!
PASSED!

!testRun: #CartTest #test07CartCanCheckIfHasAddedABook stamp: 'DA 6/6/2023 20:42:08'!
PASSED!

----SNAPSHOT----(6 June 2023 20:43:41) CuisUniversity-5832.image priorSource: 9549155!

----QUIT----(6 June 2023 20:44:12) CuisUniversity-5832.image priorSource: 9700663!

----STARTUP---- (8 June 2023 17:06:51) as D:\ISW1\windows64\CuisUniversity-5832.image!


----STARTUP---- (8 June 2023 18:00:19) as D:\ISW1\windows64\CuisUniversity-5832.image!


----SNAPSHOT----(8 June 2023 18:00:28) CuisUniversity-5832.image priorSource: 9700751!
!Cart methodsFor: 'initialize' stamp: 'DA 6/8/2023 18:00:45' prior: 50631455!
initializeWith: aCatalog 
	catalog := aCatalog.
	items := Bag new. ! !
!Cart methodsFor: 'as yet unclassified' stamp: 'DA 6/8/2023 18:01:10' prior: 50631649!
addQuantity: anAmount ofBook: aBook 
	(catalog includes: aBook) ifFalse: [self error: self invalidBookErrorMessage].
	(anAmount < 1) ifTrue: [self error: self onlyCanAddPositiveQuantityErrorMessage].
	items add: aBook withOccurrences: anAmount.! !

!methodRemoval: Cart #add: stamp: 'DA 6/8/2023 18:01:17'!
add: aBook
	items add: aBook.!

!testRun: #CartTest #test01NewCartStartsEmpty stamp: 'DA 6/8/2023 18:01:45'!
PASSED!

!testRun: #CartTest #test02CannotAddBookThatNotBelongSite stamp: 'DA 6/8/2023 18:01:45'!
PASSED!

!testRun: #CartTest #test03AddingBookThatBelongSiteMakesCartNotEmpty stamp: 'DA 6/8/2023 18:01:45'!
PASSED!

!testRun: #CartTest #test04CartCanAddAmountOfSameBook stamp: 'DA 6/8/2023 18:01:45'!
PASSED!

!testRun: #CartTest #test05CartCanAddPositiveAmountOfSameBook stamp: 'DA 6/8/2023 18:01:45'!
PASSED!

!testRun: #CartTest #test06CartCanRememberNumberOfBooksAdded stamp: 'DA 6/8/2023 18:01:45'!
PASSED!

!testRun: #CartTest #test07CartCanCheckIfHasAddedABook stamp: 'DA 6/8/2023 18:01:45'!
PASSED!

----SNAPSHOT----(8 June 2023 18:15:38) CuisUniversity-5832.image priorSource: 9700924!
!CartTest methodsFor: 'tests' stamp: 'DA 6/8/2023 18:21:40' prior: 50631566!
test02CannotAddBookThatNotBelongSite
	|cart emptyCatalog|
	emptyCatalog := Array new. 
	cart := Cart with: emptyCatalog.
	
	self 
		should: [cart addQuantity: 1 ofBook: self bookNotPublished.]
	 	raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: cart invalidBookErrorMessage.
			self assert: cart isEmpty. 
			]! !

!testRun: #CartTest #test02CannotAddBookThatNotBelongSite stamp: 'DA 6/8/2023 18:21:41'!
PASSED!

!testRun: #CartTest #test01NewCartStartsEmpty stamp: 'DA 6/8/2023 18:21:41'!
PASSED!

!testRun: #CartTest #test02CannotAddBookThatNotBelongSite stamp: 'DA 6/8/2023 18:21:41'!
PASSED!

!testRun: #CartTest #test03AddingBookThatBelongSiteMakesCartNotEmpty stamp: 'DA 6/8/2023 18:21:41'!
PASSED!

!testRun: #CartTest #test04CartCanAddAmountOfSameBook stamp: 'DA 6/8/2023 18:21:41'!
PASSED!

!testRun: #CartTest #test05CartCanAddPositiveAmountOfSameBook stamp: 'DA 6/8/2023 18:21:41'!
PASSED!

!testRun: #CartTest #test06CartCanRememberNumberOfBooksAdded stamp: 'DA 6/8/2023 18:21:41'!
PASSED!

!testRun: #CartTest #test07CartCanCheckIfHasAddedABook stamp: 'DA 6/8/2023 18:21:41'!
PASSED!
!CartTest methodsFor: 'tests' stamp: 'DA 6/8/2023 18:23:41'!
test08CartCanAddIntegerAmountOfBooks
	|cart catalog|
	catalog := Array with: self bookPublished. 
	cart := Cart with: catalog.
	self 
		should: [cart addQuantity: '1' ofBook: self bookPublished.]
		raise: Error
		withExceptionDo: [:anError|
			self assert: anError messageText equals: cart onlyCanAddIntegerQuantityErrorMessage.]! !

!testRun: #CartTest #test08CartCanAddIntegerAmountOfBooks stamp: 'DA 6/8/2023 18:23:46'!
ERROR!
!Cart methodsFor: 'error handling' stamp: 'DA 6/8/2023 18:23:51'!
onlyCanAddIntegerQuantityErrorMessage
	self shouldBeImplemented.! !
!Cart methodsFor: 'error handling' stamp: 'DA 6/8/2023 18:24:11' prior: 50634905!
onlyCanAddIntegerQuantityErrorMessage
	^'Amount only can be a integer'! !

!testRun: #CartTest #test08CartCanAddIntegerAmountOfBooks stamp: 'DA 6/8/2023 18:24:14'!
FAILURE!
!Cart methodsFor: 'as yet unclassified' stamp: 'DA 6/8/2023 18:25:29' prior: 50634813!
addQuantity: anAmount ofBook: aBook 
	(catalog includes: aBook) ifFalse: [self error: self invalidBookErrorMessage].
	(anAmount isKindOf: Integer) ifFalse: [self error: self onlyCanAddIntegerQuantityErrorMessage].
	(anAmount < 1) ifTrue: [self error: self onlyCanAddPositiveQuantityErrorMessage].
	items add: aBook withOccurrences: anAmount.! !

!testRun: #CartTest #test01NewCartStartsEmpty stamp: 'DA 6/8/2023 18:25:31'!
PASSED!

!testRun: #CartTest #test02CannotAddBookThatNotBelongSite stamp: 'DA 6/8/2023 18:25:31'!
PASSED!

!testRun: #CartTest #test03AddingBookThatBelongSiteMakesCartNotEmpty stamp: 'DA 6/8/2023 18:25:31'!
PASSED!

!testRun: #CartTest #test04CartCanAddAmountOfSameBook stamp: 'DA 6/8/2023 18:25:31'!
PASSED!

!testRun: #CartTest #test05CartCanAddPositiveAmountOfSameBook stamp: 'DA 6/8/2023 18:25:31'!
PASSED!

!testRun: #CartTest #test06CartCanRememberNumberOfBooksAdded stamp: 'DA 6/8/2023 18:25:31'!
PASSED!

!testRun: #CartTest #test07CartCanCheckIfHasAddedABook stamp: 'DA 6/8/2023 18:25:31'!
PASSED!

!testRun: #CartTest #test08CartCanAddIntegerAmountOfBooks stamp: 'DA 6/8/2023 18:25:31'!
PASSED!

----SNAPSHOT----(8 June 2023 18:26:45) CuisUniversity-5832.image priorSource: 9702302!
!CartTest methodsFor: 'tests' stamp: 'DA 6/8/2023 18:27:10' prior: 50634889!
test08CartCanAddIntegerAmountOfBooks
	|cart catalog|
	catalog := Array with: self bookPublished. 
	cart := Cart with: catalog.
	self 
		should: [cart addQuantity: 1.1 ofBook: self bookPublished.]
		raise: Error
		withExceptionDo: [:anError|
			self assert: anError messageText equals: cart onlyCanAddIntegerQuantityErrorMessage.]! !

!testRun: #CartTest #test08CartCanAddIntegerAmountOfBooks stamp: 'DA 6/8/2023 18:27:11'!
PASSED!

!testRun: #CartTest #test01NewCartStartsEmpty stamp: 'DA 6/8/2023 18:27:11'!
PASSED!

!testRun: #CartTest #test02CannotAddBookThatNotBelongSite stamp: 'DA 6/8/2023 18:27:11'!
PASSED!

!testRun: #CartTest #test03AddingBookThatBelongSiteMakesCartNotEmpty stamp: 'DA 6/8/2023 18:27:11'!
PASSED!

!testRun: #CartTest #test04CartCanAddAmountOfSameBook stamp: 'DA 6/8/2023 18:27:11'!
PASSED!

!testRun: #CartTest #test05CartCanAddPositiveAmountOfSameBook stamp: 'DA 6/8/2023 18:27:11'!
PASSED!

!testRun: #CartTest #test06CartCanRememberNumberOfBooksAdded stamp: 'DA 6/8/2023 18:27:11'!
PASSED!

!testRun: #CartTest #test07CartCanCheckIfHasAddedABook stamp: 'DA 6/8/2023 18:27:11'!
PASSED!

!testRun: #CartTest #test08CartCanAddIntegerAmountOfBooks stamp: 'DA 6/8/2023 18:27:11'!
PASSED!
!Cart methodsFor: 'adding' stamp: 'DA 6/8/2023 18:35:02' prior: 50634919!
addQuantity: anAmount ofBook: aBook 
	self assertValidQuantity: anAmount.
	self assertValidBook: aBook. 
	(catalog includes: aBook) ifFalse: [self error: self invalidBookErrorMessage].
	(anAmount isKindOf: Integer) ifFalse: [self error: self onlyCanAddIntegerQuantityErrorMessage].
	(anAmount < 1) ifTrue: [self error: self onlyCanAddPositiveQuantityErrorMessage].
	items add: aBook withOccurrences: anAmount.! !
!Cart methodsFor: 'assertions' stamp: 'DA 6/8/2023 18:35:35'!
assertValidQuantity: anAmount
	! !
!Cart methodsFor: 'assertions' stamp: 'DA 6/8/2023 18:35:40'!
assertValidBook: anAmount
	! !
!Cart methodsFor: 'assertions' stamp: 'DA 6/8/2023 18:35:47' prior: 50635020!
assertValidBook: aBook
	! !
!Cart methodsFor: 'adding' stamp: 'DA 6/8/2023 18:36:14' prior: 50635001!
addQuantity: anAmount ofBook: aBook 
	self assertValidQuantity: anAmount.
	self assertValidBook: aBook. 

	(anAmount isKindOf: Integer) ifFalse: [self error: self onlyCanAddIntegerQuantityErrorMessage].
	(anAmount < 1) ifTrue: [self error: self onlyCanAddPositiveQuantityErrorMessage].
	items add: aBook withOccurrences: anAmount.! !
!Cart methodsFor: 'assertions' stamp: 'DA 6/8/2023 18:36:24' prior: 50635024!
assertValidBook: aBook
	(catalog includes: aBook) ifFalse: [self error: self invalidBookErrorMessage].
	! !
!Cart methodsFor: 'adding' stamp: 'DA 6/8/2023 18:36:39' prior: 50635028!
addQuantity: anAmount ofBook: aBook 
	self assertValidQuantity: anAmount.
	self assertValidBook: aBook. 
	items add: aBook withOccurrences: anAmount.! !
!Cart methodsFor: 'assertions' stamp: 'DA 6/8/2023 18:36:46' prior: 50635016!
assertValidQuantity: anAmount
	(anAmount isKindOf: Integer) ifFalse: [self error: self onlyCanAddIntegerQuantityErrorMessage].
	(anAmount < 1) ifTrue: [self error: self onlyCanAddPositiveQuantityErrorMessage].
	! !

!testRun: #CartTest #test01NewCartStartsEmpty stamp: 'DA 6/8/2023 18:36:51'!
PASSED!

!testRun: #CartTest #test02CannotAddBookThatNotBelongSite stamp: 'DA 6/8/2023 18:36:51'!
PASSED!

!testRun: #CartTest #test03AddingBookThatBelongSiteMakesCartNotEmpty stamp: 'DA 6/8/2023 18:36:51'!
PASSED!

!testRun: #CartTest #test04CartCanAddAmountOfSameBook stamp: 'DA 6/8/2023 18:36:51'!
PASSED!

!testRun: #CartTest #test05CartCanAddPositiveAmountOfSameBook stamp: 'DA 6/8/2023 18:36:52'!
PASSED!

!testRun: #CartTest #test06CartCanRememberNumberOfBooksAdded stamp: 'DA 6/8/2023 18:36:52'!
PASSED!

!testRun: #CartTest #test07CartCanCheckIfHasAddedABook stamp: 'DA 6/8/2023 18:36:52'!
PASSED!

!testRun: #CartTest #test08CartCanAddIntegerAmountOfBooks stamp: 'DA 6/8/2023 18:36:52'!
PASSED!

----SNAPSHOT----(8 June 2023 18:36:56) CuisUniversity-5832.image priorSource: 9705799!

----SNAPSHOT----(8 June 2023 19:08:52) CuisUniversity-5832.image priorSource: 9710021!

TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'DA 6/8/2023 19:11:46'!
TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'no messages' stamp: 'DA 6/8/2023 19:15:18'!
test01CannotCheckoutAnEmptyCart
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'DA 6/8/2023 19:28:18'!
test02SuccesfullCheckoutCartWithOneProduct
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'DA 6/8/2023 19:28:30'!
test03SuccesfullCheckoutCartWithProducts
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'DA 6/8/2023 19:30:07'!
test04CheckoutFailWhenCardIsExpired
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'DA 6/8/2023 19:35:32'!
test04CheckoutFailWhenCreditCardIsExpired
	! !

!methodRemoval: CashierTest #test04CheckoutFailWhenCardIsExpired stamp: 'DA 6/8/2023 19:35:33'!
test04CheckoutFailWhenCardIsExpired
	!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'DA 6/8/2023 19:39:36' prior: 50635105!
test01CannotCheckoutAnEmptyCart
	|cart cashier priceList|
	priceList := Dictionary.
	cart := Cart with: priceList
	! !

!classDefinition: #Cashier category: 'TusLibros' stamp: 'DA 6/8/2023 19:42:57'!
Object subclass: #Cashier
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'DA 6/8/2023 19:42:51' prior: 50635130!
test01CannotCheckoutAnEmptyCart
	|cart cashier priceList|
	
	priceList := Dictionary new.
	priceList add: self bookPublished -> 2.
	priceList add: self otherBookPublished -> 5.
	cart := Cart with: priceList.
	cashier := Cashier new.
	
	self assert: (cashier checkout: cart withCard: self aValidCreditCard).  
	! !

!testRun: #CashierTest #test01CannotCheckoutAnEmptyCart stamp: 'DA 6/8/2023 19:43:16'!
ERROR!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'DA 6/8/2023 19:43:23'!
bookPublished
	self shouldBeImplemented.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'DA 6/8/2023 19:43:32' prior: 50635160!
bookPublished
	^ 'a valid book'! !

!testRun: #CashierTest #test01CannotCheckoutAnEmptyCart stamp: 'DA 6/8/2023 19:43:34'!
ERROR!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'DA 6/8/2023 19:43:38'!
otherBookPublished
	self shouldBeImplemented.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'DA 6/8/2023 19:43:50' prior: 50635172!
otherBookPublished
	^ 'an Other valid book'! !

!testRun: #CashierTest #test01CannotCheckoutAnEmptyCart stamp: 'DA 6/8/2023 19:43:53'!
ERROR!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'DA 6/8/2023 19:43:58'!
aValidCreditCard
	self shouldBeImplemented.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'DA 6/8/2023 19:44:08' prior: 50635184!
aValidCreditCard
	^ 'a valid credit card'! !

!testRun: #CashierTest #test01CannotCheckoutAnEmptyCart stamp: 'DA 6/8/2023 19:44:11'!
ERROR!
!Cashier methodsFor: 'category-name' stamp: 'DA 6/8/2023 19:44:21'!
checkout: cart withCard: aRenameMe1 
	self shouldBeImplemented.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'DA 6/8/2023 19:48:48' prior: 50635144!
test01CannotCheckoutAnEmptyCart
	|cashier|
	
	cashier := Cashier new.
	
	self 
		should: [cashier checkout: Cart new withCard: self aValidCreditCard]  
		raise: Error
		withExceptionDo: [:anError|
			self assert: anError messageText equals: cashier emptyCartErrorMessage.
			]
	! !

!testRun: #CashierTest #test01CannotCheckoutAnEmptyCart stamp: 'DA 6/8/2023 19:48:52'!
ERROR!
!Cashier methodsFor: 'error handling' stamp: 'DA 6/8/2023 19:49:02'!
emptyCartErrorMessage
	self shouldBeImplemented.! !
!Cashier methodsFor: 'error handling' stamp: 'DA 6/8/2023 19:49:18' prior: 50635216!
emptyCartErrorMessage
	^ 'Cannot checkout an empty cart'! !

!testRun: #CashierTest #test01CannotCheckoutAnEmptyCart stamp: 'DA 6/8/2023 19:49:19'!
FAILURE!
!Cashier methodsFor: 'category-name' stamp: 'DA 6/8/2023 19:50:13' prior: 50635196!
checkout: aCart withCard: aCreditCard
	(aCart isEmpty) ifTrue: [self error: self emptyCartErrorMessage].! !

!testRun: #CashierTest #test01CannotCheckoutAnEmptyCart stamp: 'DA 6/8/2023 19:50:20'!
FAILURE!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'DA 6/8/2023 19:50:39' prior: 50635202!
test01CannotCheckoutAnEmptyCart
	|cashier|
	
	cashier := Cashier new.
	
	self 
		should: [cashier checkout: (Cart new) withCard: self aValidCreditCard]  
		raise: Error
		withExceptionDo: [:anError|
			self assert: anError messageText equals: cashier emptyCartErrorMessage.
			]
	! !

!testRun: #CashierTest #test01CannotCheckoutAnEmptyCart stamp: 'DA 6/8/2023 19:51:03'!
FAILURE!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'DA 6/8/2023 19:52:11' prior: 50635239!
test01CannotCheckoutAnEmptyCart
	|cart cashier|
	
	cart := Cart with: Array new. 
	cashier := Cashier new.
	
	self 
		should: [cashier checkout: cart withCard: self aValidCreditCard]  
		raise: Error
		withExceptionDo: [:anError|
			self assert: anError messageText equals: cashier emptyCartErrorMessage.
			]
	! !

!testRun: #CashierTest #test01CannotCheckoutAnEmptyCart stamp: 'DA 6/8/2023 19:52:12'!
PASSED!

!testRun: #CashierTest #test01CannotCheckoutAnEmptyCart stamp: 'DA 6/8/2023 19:52:12'!
PASSED!

!testRun: #CashierTest #test02SuccesfullCheckoutCartWithOneProduct stamp: 'DA 6/8/2023 19:52:12'!
PASSED!

!testRun: #CashierTest #test03SuccesfullCheckoutCartWithProducts stamp: 'DA 6/8/2023 19:52:12'!
PASSED!

!testRun: #CashierTest #test04CheckoutFailWhenCreditCardIsExpired stamp: 'DA 6/8/2023 19:52:13'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'DA 6/8/2023 19:56:28' prior: 50635109!
test02SuccesfullCheckoutCartWithOneProduct
	|cart cashier priceList|
	priceList := Dictionary new.
	priceList add: self bookPublished -> 10.
	
	cart := Cart with: priceList.
	cart addQuantity: 1 ofBook: self bookPublished.
	
	cashier := Cashier new.
	
	self assert: (cashier checkout: cart withCard: self aValidCreditCard) = 10.  
	! !

!testRun: #CashierTest #test02SuccesfullCheckoutCartWithOneProduct stamp: 'DA 6/8/2023 19:56:33'!
ERROR!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'DA 6/8/2023 19:57:18' prior: 50635283!
test02SuccesfullCheckoutCartWithOneProduct
	|cart cashier priceList book|
	
	book := self bookPublished.
	
	priceList := Dictionary new.
	priceList add: book -> 10.
	
	cart := Cart with: priceList.
	cart addQuantity: 1 ofBook: self bookPublished.
	
	cashier := Cashier new.
	
	self assert: (cashier checkout: cart withCard: self aValidCreditCard) = 10.  
	! !

!testRun: #CashierTest #test02SuccesfullCheckoutCartWithOneProduct stamp: 'DA 6/8/2023 19:57:20'!
ERROR!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'DA 6/8/2023 19:58:06' prior: 50635300!
test02SuccesfullCheckoutCartWithOneProduct
	|cart cashier priceList book|
	
	book := self bookPublished.
	
	priceList := Dictionary new.
	priceList add: book -> 10.
	
	cart := Cart with: priceList.
	cart addQuantity: 1 ofBook: book.
	
	cashier := Cashier new.
	
	self assert: (cashier checkout: cart withCard: self aValidCreditCard) = 10.  
	! !

!testRun: #CashierTest #test02SuccesfullCheckoutCartWithOneProduct stamp: 'DA 6/8/2023 19:58:08'!
ERROR!

!testRun: #CashierTest #test02SuccesfullCheckoutCartWithOneProduct stamp: 'DA 6/8/2023 19:58:13'!
ERROR!

!testRun: #CashierTest #test02SuccesfullCheckoutCartWithOneProduct stamp: 'DA 6/8/2023 19:58:25'!
ERROR!
!Cart methodsFor: 'assertions' stamp: 'DA 6/8/2023 19:59:20' prior: 50635041!
assertValidBook: aBook
	(catalog includesKey: aBook) ifFalse: [self error: self invalidBookErrorMessage].
	! !

!testRun: #CashierTest #test02SuccesfullCheckoutCartWithOneProduct stamp: 'DA 6/8/2023 19:59:26'!
FAILURE!

!testRun: #CashierTest #test02SuccesfullCheckoutCartWithOneProduct stamp: 'DA 6/8/2023 19:59:26'!
FAILURE!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'DA 6/8/2023 19:59:58' prior: 50635318!
test02SuccesfullCheckoutCartWithOneProduct
	|cart cashier priceList|
	
	priceList := Dictionary new.
	priceList add: self bookPublished -> 10.
	
	cart := Cart with: priceList.
	cart addQuantity: 1 ofBook: self bookPublished.
	
	cashier := Cashier new.
	
	self assert: (cashier checkout: cart withCard: self aValidCreditCard) = 10.  
	! !

!testRun: #CashierTest #test02SuccesfullCheckoutCartWithOneProduct stamp: 'DA 6/8/2023 20:00:02'!
FAILURE!
!Cashier methodsFor: 'category-name' stamp: 'DA 6/8/2023 20:06:05' prior: 50635229!
checkout: aCart withCard: aCreditCard
	|priceList|
	(aCart isEmpty) ifTrue: [self error: self emptyCartErrorMessage].
	priceList := aCart priceList.
	^aCart shoppingList first * priceList at: aCart shoppingList first 
	! !

!testRun: #CashierTest #test02SuccesfullCheckoutCartWithOneProduct stamp: 'DA 6/8/2023 20:06:11'!
ERROR!

!testRun: #CashierTest #test02SuccesfullCheckoutCartWithOneProduct stamp: 'DA 6/8/2023 20:06:11'!
ERROR!
!Cart methodsFor: 'accessing' stamp: 'DA 6/8/2023 20:06:20'!
priceList
	self shouldBeImplemented.! !
!Cart methodsFor: 'accessing' stamp: 'DA 6/8/2023 20:06:27' prior: 50635389!
priceList
	^ catalog ! !

!testRun: #CashierTest #test02SuccesfullCheckoutCartWithOneProduct stamp: 'DA 6/8/2023 20:06:29'!
ERROR!
!Cart methodsFor: 'accessing' stamp: 'DA 6/8/2023 20:06:38'!
shoppingList
	self shouldBeImplemented.! !
!Cart methodsFor: 'accessing' stamp: 'DA 6/8/2023 20:06:42' prior: 50635399!
shoppingList
	^items! !

!testRun: #CashierTest #test02SuccesfullCheckoutCartWithOneProduct stamp: 'DA 6/8/2023 20:06:44'!
ERROR!
!Cashier methodsFor: 'category-name' stamp: 'DA 6/8/2023 20:08:17' prior: 50635373!
checkout: aCart withCard: aCreditCard
	|priceList|
	(aCart isEmpty) ifTrue: [self error: self emptyCartErrorMessage].
	priceList := aCart priceList.
	^(aCart shoppingList at: 1) * priceList at: (aCart shoppingList at:1) 
	! !

!testRun: #CashierTest #test02SuccesfullCheckoutCartWithOneProduct stamp: 'DA 6/8/2023 20:08:21'!
ERROR!
!Cart methodsFor: 'accessing' stamp: 'DA 6/8/2023 20:08:52' prior: 50635403!
shoppingList
	^items asOrderedCollection ! !
!Cashier methodsFor: 'category-name' stamp: 'DA 6/8/2023 20:09:09' prior: 50635410!
checkout: aCart withCard: aCreditCard
	|priceList|
	(aCart isEmpty) ifTrue: [self error: self emptyCartErrorMessage].
	priceList := aCart priceList.
	^(aCart shoppingList first) * priceList at: (aCart shoppingList first) 
	! !

!testRun: #CashierTest #test02SuccesfullCheckoutCartWithOneProduct stamp: 'DA 6/8/2023 20:09:14'!
ERROR!
!Cashier methodsFor: 'category-name' stamp: 'DA 6/8/2023 20:11:33' prior: 50635428!
checkout: aCart withCard: aCreditCard
	|priceList shoppingList|
	(aCart isEmpty) ifTrue: [self error: self emptyCartErrorMessage].
	priceList := aCart priceList.
	shoppingList := aCart shoppingList.
	^(shoppingList ocurrencesOf: shoppingList first ) * (priceList at: (shoppingList first)) 
	! !

!testRun: #CashierTest #test02SuccesfullCheckoutCartWithOneProduct stamp: 'DA 6/8/2023 20:11:39'!
ERROR!
!Cashier methodsFor: 'category-name' stamp: 'DA 6/8/2023 20:12:05' prior: 50635442!
checkout: aCart withCard: aCreditCard
	|priceList shoppingList|
	(aCart isEmpty) ifTrue: [self error: self emptyCartErrorMessage].
	priceList := aCart priceList.
	shoppingList := aCart shoppingList.
	^(shoppingList occurrencesOf: shoppingList first ) * (priceList at: (shoppingList first)) 
	! !

!testRun: #CashierTest #test02SuccesfullCheckoutCartWithOneProduct stamp: 'DA 6/8/2023 20:12:12'!
PASSED!

!testRun: #CashierTest #test01CannotCheckoutAnEmptyCart stamp: 'DA 6/8/2023 20:12:12'!
PASSED!

!testRun: #CashierTest #test02SuccesfullCheckoutCartWithOneProduct stamp: 'DA 6/8/2023 20:12:12'!
PASSED!

!testRun: #CashierTest #test03SuccesfullCheckoutCartWithProducts stamp: 'DA 6/8/2023 20:12:12'!
PASSED!

!testRun: #CashierTest #test04CheckoutFailWhenCreditCardIsExpired stamp: 'DA 6/8/2023 20:12:12'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'DA 6/8/2023 20:13:17' prior: 50635113!
test03SuccesfullCheckoutCartWithProducts
	|cart cashier priceList|
	
	priceList := Dictionary new.
	priceList add: self bookPublished -> 10.
	priceList add: self otherBookPublished -> 20.
	
	cart := Cart with: priceList.
	cart addQuantity: 2 ofBook: self bookPublished.
	cart addQuantity: 1 ofBook: self otherBookPublished.
	
	cashier := Cashier new.
	
	self assert: (cashier checkout: cart withCard: self aValidCreditCard) = 40.  ! !

!testRun: #CashierTest #test03SuccesfullCheckoutCartWithProducts stamp: 'DA 6/8/2023 20:13:22'!
FAILURE!
!Cashier methodsFor: 'category-name' stamp: 'DA 6/8/2023 20:15:38' prior: 50635458!
checkout: aCart withCard: aCreditCard
	|priceList shoppingList|
	(aCart isEmpty) ifTrue: [self error: self emptyCartErrorMessage].
	priceList := aCart priceList.
	shoppingList := aCart shoppingList.
	shoppingList inject: 0 into: [:total :anItem | anItem ].  
	^(shoppingList occurrencesOf: shoppingList first ) * (priceList at: (shoppingList first)) 
	! !
!Cashier methodsFor: 'category-name' stamp: 'DA 6/8/2023 20:16:48' prior: 50635507!
checkout: aCart withCard: aCreditCard
	|priceList shoppingList|
	(aCart isEmpty) ifTrue: [self error: self emptyCartErrorMessage].
	priceList := aCart priceList.
	shoppingList := aCart shoppingList.
	^ shoppingList inject: 0 into: [:total :anItem | priceList at: anItem].  
	! !

!testRun: #CashierTest #test03SuccesfullCheckoutCartWithProducts stamp: 'DA 6/8/2023 20:16:52'!
FAILURE!
!Cashier methodsFor: 'category-name' stamp: 'DA 6/8/2023 20:18:18' prior: 50635521!
checkout: aCart withCard: aCreditCard
	|priceList shoppingList|
	(aCart isEmpty) ifTrue: [self error: self emptyCartErrorMessage].
	priceList := aCart priceList.
	shoppingList := aCart shoppingList.
	^ shoppingList inject: 0 into: [:total :anItem | total + priceList at: anItem].  
	! !

!testRun: #CashierTest #test03SuccesfullCheckoutCartWithProducts stamp: 'DA 6/8/2023 20:18:23'!
PASSED!

!testRun: #CashierTest #test01CannotCheckoutAnEmptyCart stamp: 'DA 6/8/2023 20:18:23'!
PASSED!

!testRun: #CashierTest #test02SuccesfullCheckoutCartWithOneProduct stamp: 'DA 6/8/2023 20:18:23'!
PASSED!

!testRun: #CashierTest #test03SuccesfullCheckoutCartWithProducts stamp: 'DA 6/8/2023 20:18:23'!
PASSED!

!testRun: #CashierTest #test04CheckoutFailWhenCreditCardIsExpired stamp: 'DA 6/8/2023 20:18:23'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'DA 6/8/2023 20:19:59' prior: 50635121!
test04CheckoutFailWhenCreditCardIsExpired
	|cart cashier priceList|
	
	priceList := Dictionary new.
	priceList add: self bookPublished -> 10.
	
	cart := Cart with: priceList.
	cart addQuantity: 2 ofBook: self bookPublished.
	
	cashier := Cashier new.
	
	self 
		should: [cashier checkout: cart withCard: self anInvalidCard]
		raise: Error
		withExceptionDo: [:anError|
			self assert: anError messageText equals: cashier invalidCreditCardErrorMessage.]
	! !

!testRun: #CashierTest #test04CheckoutFailWhenCreditCardIsExpired stamp: 'DA 6/8/2023 20:20:01'!
ERROR!
!Cashier methodsFor: 'error handling' stamp: 'DA 6/8/2023 20:20:06'!
invalidCreditCardErrorMessage
	self shouldBeImplemented.! !
!Cashier methodsFor: 'error handling' stamp: 'DA 6/8/2023 20:20:15' prior: 50635585!
invalidCreditCardErrorMessage
	^ 'Invalid credit card'! !

!testRun: #CashierTest #test04CheckoutFailWhenCreditCardIsExpired stamp: 'DA 6/8/2023 20:20:16'!
FAILURE!
!Cashier methodsFor: 'category-name' stamp: 'DA 6/8/2023 20:20:52' prior: 50635536!
checkout: aCart withCard: aCreditCard
	|priceList shoppingList|
	(aCart isEmpty) ifTrue: [self error: self emptyCartErrorMessage].
	priceList := aCart priceList.
	shoppingList := aCart shoppingList.
	^ shoppingList inject: 0 into: [:total :anItem | total + priceList at: anItem].  
	! !

!testRun: #CashierTest #test04CheckoutFailWhenCreditCardIsExpired stamp: 'DA 6/8/2023 20:21:42'!
FAILURE!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'DA 6/8/2023 20:22:11'!
anInvalidCreditCard
	^ 'an invalid credit card'! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'DA 6/8/2023 20:22:20' prior: 50635565!
test04CheckoutFailWhenCreditCardIsExpired
	|cart cashier priceList|
	
	priceList := Dictionary new.
	priceList add: self bookPublished -> 10.
	
	cart := Cart with: priceList.
	cart addQuantity: 2 ofBook: self bookPublished.
	
	cashier := Cashier new.
	
	self 
		should: [cashier checkout: cart withCard: self anInvalidCreditCard]
		raise: Error
		withExceptionDo: [:anError|
			self assert: anError messageText equals: cashier invalidCreditCardErrorMessage.]
	! !

!testRun: #CashierTest #test04CheckoutFailWhenCreditCardIsExpired stamp: 'DA 6/8/2023 20:22:21'!
FAILURE!
!Cashier methodsFor: 'category-name' stamp: 'DA 6/8/2023 20:23:19' prior: 50635598!
checkout: aCart withCard: aCreditCard
	|priceList shoppingList|
	(aCart isEmpty) ifTrue: [self error: self emptyCartErrorMessage].
	(aCreditCard = 'an invalid credit card') ifTrue: [self error: self invalidCreditCardErrorMessage].
	priceList := aCart priceList.
	shoppingList := aCart shoppingList.
	^ shoppingList inject: 0 into: [:total :anItem | total + priceList at: anItem].  
	! !

!testRun: #CashierTest #test04CheckoutFailWhenCreditCardIsExpired stamp: 'DA 6/8/2023 20:23:28'!
PASSED!

!testRun: #CashierTest #test01CannotCheckoutAnEmptyCart stamp: 'DA 6/8/2023 20:23:28'!
PASSED!

!testRun: #CashierTest #test02SuccesfullCheckoutCartWithOneProduct stamp: 'DA 6/8/2023 20:23:28'!
PASSED!

!testRun: #CashierTest #test03SuccesfullCheckoutCartWithProducts stamp: 'DA 6/8/2023 20:23:28'!
PASSED!

!testRun: #CashierTest #test04CheckoutFailWhenCreditCardIsExpired stamp: 'DA 6/8/2023 20:23:28'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'DA 6/8/2023 20:24:25' prior: 50635618!
test04CheckoutFailWhenCreditCardIsExpired
	|cart cashier priceList|
	
	priceList := Dictionary new.
	priceList add: self bookPublished -> 10.
	
	cart := Cart with: priceList.
	cart addQuantity: 2 ofBook: self bookPublished.
	
	cashier := Cashier new.
	
	self 
		should: [cashier checkout: cart withCard: self anInvalidCreditCard]
		raise: Error
		withExceptionDo: [:anError|
			self assert: anError messageText equals: cashier invalidCreditCardErrorMessage.]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'DA 6/8/2023 20:43:39' prior: 50635671!
test04CheckoutFailWhenCreditCardIsExpired
	"se le deberia proveer el aniomes al cajero para poder saber si la tarjeta expiró."
	|cart cashier priceList|
	
	priceList := Dictionary new.
	priceList add: self bookPublished -> 10.
	
	cart := Cart with: priceList.
	cart addQuantity: 2 ofBook: self bookPublished.
	
	cashier := Cashier new.
	
	self 
		should: [cashier checkout: cart withCard: self anInvalidCreditCard]
		raise: Error
		withExceptionDo: [:anError|
			self assert: anError messageText equals: cashier invalidCreditCardErrorMessage.]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'DA 6/8/2023 20:44:01' prior: 50635254!
test01CannotCheckoutAnEmptyCart
	|cart cashier|
	
	cart := Cart with: Array new. 
	cashier := Cashier new.
	
	self 
		should: [cashier checkout: cart withCard: self aValidCreditCard]  
		raise: Error
		withExceptionDo: [:anError|
			self assert: anError messageText equals: cashier emptyCartErrorMessage.
			]
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'DA 6/8/2023 20:46:29' prior: 50635710!
test01CannotCheckoutAnEmptyCart
	"salesBook registrando las ventas, un cajero por cada venta"
	|cart cashier|
	
	cart := Cart with: Array new. 
	cashier := Cashier new.
	
	self 
		should: [cashier checkout: cart withCard: self aValidCreditCard]  
		raise: Error
		withExceptionDo: [:anError|
			self assert: anError messageText equals: cashier emptyCartErrorMessage.
			]
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'DA 6/8/2023 20:47:11' prior: 50635723!
test01CannotCheckoutAnEmptyCart
	"salesBook registrando las ventas, un cajero por cada venta
	asercion de mensaje de error con chequeo de invariante"
	|cart cashier|
	
	cart := Cart with: Array new. 
	cashier := Cashier new.
	
	self 
		should: [cashier checkout: cart withCard: self aValidCreditCard]  
		raise: Error
		withExceptionDo: [:anError|
			self assert: anError messageText equals: cashier emptyCartErrorMessage.
			]
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'DA 6/8/2023 20:52:25' prior: 50635356!
test02SuccesfullCheckoutCartWithOneProduct
	"checkout: cart charging cc on: adate registeringOn: salesbook "
	|cart cashier priceList|
	
	priceList := Dictionary new.
	priceList add: self bookPublished -> 10.
	
	cart := Cart with: priceList.
	cart addQuantity: 1 ofBook: self bookPublished.
	
	cashier := Cashier new.
	
	self assert: (cashier checkout: cart withCard: self aValidCreditCard) = 10.  
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'DA 6/8/2023 20:52:58' prior: 50635755!
test02SuccesfullCheckoutCartWithOneProduct
	"checkout: cart charging cc on: date registeringOn: salesbook "
	|cart cashier priceList|
	
	priceList := Dictionary new.
	priceList add: self bookPublished -> 10.
	
	cart := Cart with: priceList.
	cart addQuantity: 1 ofBook: self bookPublished.
	
	cashier := Cashier new.
	
	self assert: (cashier checkout: cart withCard: self aValidCreditCard) = 10.  
	! !

----SNAPSHOT----(8 June 2023 20:57:54) CuisUniversity-5832.image priorSource: 9710109!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'DA 6/8/2023 21:03:50'!
test05CheckoutFailWhenCreditCardWithNoSaldo 
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'DA 6/8/2023 21:04:41'!
test06CheckoutFailWhenCreditCardFraud
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'DA 6/8/2023 21:05:02'!
test05CheckoutFailWhenCreditCardWithEmptyBalance 
	! !

!methodRemoval: CashierTest #test05CheckoutFailWhenCreditCardWithNoSaldo stamp: 'DA 6/8/2023 21:05:02'!
test05CheckoutFailWhenCreditCardWithNoSaldo 
	!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'DA 6/8/2023 21:08:02'!
test07SucessfullSaleIfEverythingIsOk
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'DA 6/8/2023 21:12:25' prior: 50635771!
test02SuccesfullCheckoutCartWithOneProduct
	"checkout: cart charging cc on: date registeringOn: salesbook initializer of cashier, mensaje checkout "
	|cart cashier priceList|
	
	priceList := Dictionary new.
	priceList add: self bookPublished -> 10.
	
	cart := Cart with: priceList.
	cart addQuantity: 1 ofBook: self bookPublished.
	
	cashier := Cashier new.
	
	self assert: (cashier checkout: cart withCard: self aValidCreditCard) = 10.  
	! !

----SNAPSHOT----(8 June 2023 21:15:55) CuisUniversity-5832.image priorSource: 9732338!

----QUIT----(8 June 2023 21:16:56) CuisUniversity-5832.image priorSource: 9733659!

----STARTUP---- (9 June 2023 15:40:08) as D:\ISW1\windows64\CuisUniversity-5832.image!

!Cart methodsFor: 'accessing' stamp: 'DA 6/9/2023 15:43:07'!
total
	^ items sum: [:anItem | catalog at: anItem].! !

!methodRemoval: Cart #priceList stamp: 'DA 6/9/2023 15:43:13'!
priceList
	^ catalog !

!methodRemoval: Cart #shoppingList stamp: 'DA 6/9/2023 15:43:16'!
shoppingList
	^items asOrderedCollection !
!Cashier methodsFor: 'category-name' stamp: 'DA 6/9/2023 15:43:34' prior: 50635639!
checkout: aCart withCard: aCreditCard
	(aCart isEmpty) ifTrue: [self error: self emptyCartErrorMessage].
	(aCreditCard = 'an invalid credit card') ifTrue: [self error: self invalidCreditCardErrorMessage].
	^ aCart total
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'DA 6/9/2023 15:43:49' prior: 50635738!
test01CannotCheckoutAnEmptyCart
	"salesBook registrando las ventas, un cajero por cada venta
	asercion de mensaje de error con chequeo de invariante"
	|cart cashier|
	
	cart := Cart with: Array new. 
	cashier := Cashier new.
	
	self 
		should: [cashier checkout: cart withCard: self aValidCreditCard]  
		raise: Error
		withExceptionDo: [:anError|
			self assert: anError messageText equals: cashier emptyCartErrorMessage.
			self assert: cart isEmpty.
			]
	! !

!testRun: #CashierTest #test01CannotCheckoutAnEmptyCart stamp: 'DA 6/9/2023 15:43:50'!
PASSED!

!testRun: #CashierTest #test01CannotCheckoutAnEmptyCart stamp: 'DA 6/9/2023 15:43:50'!
PASSED!

!testRun: #CashierTest #test02SuccesfullCheckoutCartWithOneProduct stamp: 'DA 6/9/2023 15:43:50'!
PASSED!

!testRun: #CashierTest #test03SuccesfullCheckoutCartWithProducts stamp: 'DA 6/9/2023 15:43:50'!
PASSED!

!testRun: #CashierTest #test04CheckoutFailWhenCreditCardIsExpired stamp: 'DA 6/9/2023 15:43:50'!
PASSED!

!testRun: #CashierTest #test05CheckoutFailWhenCreditCardWithEmptyBalance stamp: 'DA 6/9/2023 15:43:50'!
PASSED!

!testRun: #CashierTest #test06CheckoutFailWhenCreditCardFraud stamp: 'DA 6/9/2023 15:43:50'!
PASSED!

!testRun: #CashierTest #test07SucessfullSaleIfEverythingIsOk stamp: 'DA 6/9/2023 15:43:50'!
PASSED!
!Cart methodsFor: 'assertions' stamp: 'DA 6/9/2023 15:46:58' prior: 50635055!
assertValidQuantity: anAmount
	(anAmount isInteger) ifFalse: [self error: self onlyCanAddIntegerQuantityErrorMessage].
	(anAmount strictlyPositive ) ifFalse: [self error: self onlyCanAddPositiveQuantityErrorMessage].
	! !
!Cart methodsFor: 'adding' stamp: 'DA 6/9/2023 15:48:01'!
add: aBook
	self addQuantity: 1 ofBook: aBook. ! !
!CartTest methodsFor: 'tests' stamp: 'DA 6/9/2023 15:49:05' prior: 50631691!
test05CartCanAddPositiveAmountOfSameBook
	|cart catalog|
	catalog := Array with: self bookPublished. 
	cart := Cart with: catalog.
	self 
		should: [cart addQuantity: -1 ofBook: self bookPublished.]
		raise: Error
		withExceptionDo: [:anError|
			self assert: anError messageText equals: cart onlyCanAddPositiveQuantityErrorMessage.
			self assert: cart isEmpty]! !
!CartTest methodsFor: 'tests' stamp: 'DA 6/9/2023 15:49:27' prior: 50634960!
test08CartCanAddIntegerAmountOfBooks
	|cart catalog|
	catalog := Array with: self bookPublished. 
	cart := Cart with: catalog.
	self 
		should: [cart addQuantity: 1.1 ofBook: self bookPublished.]
		raise: Error
		withExceptionDo: [:anError|
			self assert: anError messageText equals: cart onlyCanAddIntegerQuantityErrorMessage.
			self assert: cart isEmpty]! !

Object subclass: #CreditCard
	instanceVariableNames: 'expiration'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'DA 6/9/2023 15:54:56'!
Object subclass: #CreditCard
	instanceVariableNames: 'expiration'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'DA 6/9/2023 16:02:01' prior: 50635856!
test01CannotCheckoutAnEmptyCart
	"salesBook registrando las ventas, un cajero por cada venta
	asercion de mensaje de error con chequeo de invariante"
	|cart cashier creditCard |
	
	cart := Cart with: Array new. 
	cashier := Cashier new.
	creditCard := CreditCard expiringOn: (Month month: Date today monthIndex year: Date today yearNumber) .
	
	self 
		should: [cashier checkout: cart withCard: self aValidCreditCard on: Date today]  
		raise: Error
		withExceptionDo: [:anError|
			self assert: anError messageText equals: cashier emptyCartErrorMessage.
			self assert: cart isEmpty.
			]
	! !

!testRun: #CashierTest #test01CannotCheckoutAnEmptyCart stamp: 'DA 6/9/2023 16:02:05'!
ERROR!
!CreditCard class methodsFor: 'class initialization' stamp: 'DA 6/9/2023 16:02:14'!
expiringOn: aRenameMe1 
	self shouldBeImplemented.! !
!CreditCard class methodsFor: 'class initialization' stamp: 'DA 6/9/2023 16:03:20' prior: 50635977!
expiringOn: aMonthOfYear
	self new initializeExpiringOn: aMonthOfYear! !

!testRun: #CashierTest #test01CannotCheckoutAnEmptyCart stamp: 'DA 6/9/2023 16:03:22'!
ERROR!

!testRun: #CashierTest #test01CannotCheckoutAnEmptyCart stamp: 'DA 6/9/2023 16:03:46'!
ERROR!

!testRun: #CashierTest #test02SuccesfullCheckoutCartWithOneProduct stamp: 'DA 6/9/2023 16:03:46'!
PASSED!

!testRun: #CashierTest #test03SuccesfullCheckoutCartWithProducts stamp: 'DA 6/9/2023 16:03:46'!
PASSED!

!testRun: #CashierTest #test04CheckoutFailWhenCreditCardIsExpired stamp: 'DA 6/9/2023 16:03:46'!
PASSED!

!testRun: #CashierTest #test05CheckoutFailWhenCreditCardWithEmptyBalance stamp: 'DA 6/9/2023 16:03:46'!
PASSED!

!testRun: #CashierTest #test06CheckoutFailWhenCreditCardFraud stamp: 'DA 6/9/2023 16:03:46'!
PASSED!

!testRun: #CashierTest #test07SucessfullSaleIfEverythingIsOk stamp: 'DA 6/9/2023 16:03:46'!
PASSED!

!testRun: #CashierTest #test01CannotCheckoutAnEmptyCart stamp: 'DA 6/9/2023 16:03:46'!
ERROR!

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'DA 6/9/2023 16:03:59'!
Object subclass: #CreditCard
	instanceVariableNames: 'expiration monthOfYear'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCard methodsFor: 'initialization' stamp: 'DA 6/9/2023 16:03:59'!
initializeExpiringOn: aMonthOfYear 
	self shouldBeImplemented.
	monthOfYear := aMonthOfYear.! !
!CreditCard methodsFor: 'initialization' stamp: 'DA 6/9/2023 16:04:45' prior: 50636023!
initializeExpiringOn: aMonthOfYear 
	expiration := aMonthOfYear.! !

!testRun: #CashierTest #test01CannotCheckoutAnEmptyCart stamp: 'DA 6/9/2023 16:04:46'!
FAILURE!
!Cashier methodsFor: 'category-name' stamp: 'DA 6/9/2023 16:05:43'!
checkout: aCart withCard: aCreditCard on: aDate
	(aCart isEmpty) ifTrue: [self error: self emptyCartErrorMessage].
	(aCreditCard isExpiredOn: aDate) ifTrue: [self error: self invalidCreditCardErrorMessage].
	^ aCart total
	! !

!testRun: #CashierTest #test01CannotCheckoutAnEmptyCart stamp: 'DA 6/9/2023 16:05:46'!
PASSED!

!testRun: #CashierTest #test02SuccesfullCheckoutCartWithOneProduct stamp: 'DA 6/9/2023 16:05:46'!
PASSED!

!testRun: #CashierTest #test03SuccesfullCheckoutCartWithProducts stamp: 'DA 6/9/2023 16:05:46'!
PASSED!

!testRun: #CashierTest #test04CheckoutFailWhenCreditCardIsExpired stamp: 'DA 6/9/2023 16:05:46'!
PASSED!

!testRun: #CashierTest #test05CheckoutFailWhenCreditCardWithEmptyBalance stamp: 'DA 6/9/2023 16:05:46'!
PASSED!

!testRun: #CashierTest #test06CheckoutFailWhenCreditCardFraud stamp: 'DA 6/9/2023 16:05:46'!
PASSED!

!testRun: #CashierTest #test07SucessfullSaleIfEverythingIsOk stamp: 'DA 6/9/2023 16:05:46'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'DA 6/9/2023 16:06:50' prior: 50635811!
test02SuccesfullCheckoutCartWithOneProduct
	"checkout: cart charging cc on: date registeringOn: salesbook initializer of cashier, mensaje checkout "
	|cart cashier priceList creditCard|
	
	priceList := Dictionary new.
	priceList add: self bookPublished -> 10.
	
	cart := Cart with: priceList.
	cart addQuantity: 1 ofBook: self bookPublished.
	
	cashier := Cashier new.
	
	creditCard := CreditCard expiringOn: (Month month: Date today monthIndex year: Date today yearNumber) .
	
	self assert: (cashier checkout: cart withCard: self aValidCreditCard) = 10.  
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'DA 6/9/2023 16:07:20' prior: 50636070!
test02SuccesfullCheckoutCartWithOneProduct
	"checkout: cart charging cc on: date registeringOn: salesbook initializer of cashier, mensaje checkout "
	|cart cashier priceList creditCard|
	
	priceList := Dictionary new.
	priceList add: self bookPublished -> 10.
	
	cart := Cart with: priceList.
	cart addQuantity: 1 ofBook: self bookPublished.
	
	cashier := Cashier new.
	
	creditCard := CreditCard expiringOn: (Month month: Date today monthIndex year: Date today yearNumber) .
	
	self assert: (cashier checkout: cart withCard: self aValidCreditCard on: Date today) = 10.  
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'DA 6/9/2023 16:07:28' prior: 50636091!
test02SuccesfullCheckoutCartWithOneProduct
	"checkout: cart charging cc on: date registeringOn: salesbook initializer of cashier, mensaje checkout "
	|cart cashier priceList creditCard|
	
	priceList := Dictionary new.
	priceList add: self bookPublished -> 10.
	
	cart := Cart with: priceList.
	cart addQuantity: 1 ofBook: self bookPublished.
	
	cashier := Cashier new.
	
	creditCard := CreditCard expiringOn: (Month month: Date today monthIndex year: Date today yearNumber) .
	
	self assert: (cashier checkout: cart withCard: creditCard on: Date today) = 10.  
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'DA 6/9/2023 16:07:47' prior: 50635487!
test03SuccesfullCheckoutCartWithProducts
	|cart cashier priceList creditCard|
	
	priceList := Dictionary new.
	priceList add: self bookPublished -> 10.
	priceList add: self otherBookPublished -> 20.
	
	cart := Cart with: priceList.
	cart addQuantity: 2 ofBook: self bookPublished.
	cart addQuantity: 1 ofBook: self otherBookPublished.
	
	cashier := Cashier new.
	creditCard := CreditCard expiringOn: (Month month: Date today monthIndex year: Date today yearNumber) .
	
	self assert: (cashier checkout: cart withCard: creditCard on: Date today) = 40.  ! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'DA 6/9/2023 16:08:29' prior: 50635689!
test04CheckoutFailWhenCreditCardIsExpired
	"se le deberia proveer el aniomes al cajero para poder saber si la tarjeta expiró."
	|cart cashier priceList creditCardExpired|
	
	priceList := Dictionary new.
	priceList add: self bookPublished -> 10.
	
	cart := Cart with: priceList.
	cart addQuantity: 2 ofBook: self bookPublished.
	
	cashier := Cashier new.
	
	creditCardExpired := CreditCard expiringOn: (Month month: Date today monthIndex year: Date today yearNumber - 1) .
	
	self 
		should: [cashier checkout: cart withCard: creditCardExpired on: Date today]
		raise: Error
		withExceptionDo: [:anError|
			self assert: anError messageText equals: cashier invalidCreditCardErrorMessage.]! !

!testRun: #CashierTest #test04CheckoutFailWhenCreditCardIsExpired stamp: 'DA 6/9/2023 16:08:37'!
FAILURE!

!methodRemoval: Cashier #checkout:withCard: stamp: 'DA 6/9/2023 16:08:51'!
checkout: aCart withCard: aCreditCard
	(aCart isEmpty) ifTrue: [self error: self emptyCartErrorMessage].
	(aCreditCard = 'an invalid credit card') ifTrue: [self error: self invalidCreditCardErrorMessage].
	^ aCart total
	!

!testRun: #CashierTest #test02SuccesfullCheckoutCartWithOneProduct stamp: 'DA 6/9/2023 16:08:55'!
ERROR!

!testRun: #CashierTest #test02SuccesfullCheckoutCartWithOneProduct stamp: 'DA 6/9/2023 16:08:55'!
ERROR!
!CreditCard class methodsFor: 'category-name' stamp: 'DA 6/9/2023 16:09:06'!
isExpiredOn: aDate 
	self shouldBeImplemented.! !

!testRun: #CashierTest #test02SuccesfullCheckoutCartWithOneProduct stamp: 'DA 6/9/2023 16:10:19'!
ERROR!
!Cashier methodsFor: 'category-name' stamp: 'DA 6/9/2023 16:10:40'!
checkout: aCart charging: aCreditCard on: aDate
	(aCart isEmpty) ifTrue: [self error: self emptyCartErrorMessage].
	(aCreditCard isExpiredOn: aDate) ifTrue: [self error: self invalidCreditCardErrorMessage].
	^ aCart total
	! !

!methodRemoval: Cashier #checkout:withCard:on: stamp: 'DA 6/9/2023 16:10:46'!
checkout: aCart withCard: aCreditCard on: aDate
	(aCart isEmpty) ifTrue: [self error: self emptyCartErrorMessage].
	(aCreditCard isExpiredOn: aDate) ifTrue: [self error: self invalidCreditCardErrorMessage].
	^ aCart total
	!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'DA 6/9/2023 16:10:53' prior: 50635952!
test01CannotCheckoutAnEmptyCart
	"salesBook registrando las ventas, un cajero por cada venta
	asercion de mensaje de error con chequeo de invariante"
	|cart cashier creditCard |
	
	cart := Cart with: Array new. 
	cashier := Cashier new.
	creditCard := CreditCard expiringOn: (Month month: Date today monthIndex year: Date today yearNumber) .
	
	self 
		should: [cashier checkout: cart charging: self aValidCreditCard on: Date today]  
		raise: Error
		withExceptionDo: [:anError|
			self assert: anError messageText equals: cashier emptyCartErrorMessage.
			self assert: cart isEmpty.
			]
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'DA 6/9/2023 16:11:03' prior: 50636225!
test01CannotCheckoutAnEmptyCart
	"salesBook registrando las ventas, un cajero por cada venta
	asercion de mensaje de error con chequeo de invariante"
	|cart cashier creditCard |
	
	cart := Cart with: Array new. 
	cashier := Cashier new.
	creditCard := CreditCard expiringOn: (Month month: Date today monthIndex year: Date today yearNumber) .
	
	self 
		should: [cashier checkout: cart charging: creditCard on: Date today]  
		raise: Error
		withExceptionDo: [:anError|
			self assert: anError messageText equals: cashier emptyCartErrorMessage.
			self assert: cart isEmpty.
			]
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'DA 6/9/2023 16:11:11' prior: 50636112!
test02SuccesfullCheckoutCartWithOneProduct
	"checkout: cart charging cc on: date registeringOn: salesbook initializer of cashier, mensaje checkout "
	|cart cashier priceList creditCard|
	
	priceList := Dictionary new.
	priceList add: self bookPublished -> 10.
	
	cart := Cart with: priceList.
	cart addQuantity: 1 ofBook: self bookPublished.
	
	cashier := Cashier new.
	
	creditCard := CreditCard expiringOn: (Month month: Date today monthIndex year: Date today yearNumber) .
	
	self assert: (cashier checkout: cart charging: creditCard on: Date today) = 10.  
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'DA 6/9/2023 16:11:17' prior: 50636133!
test03SuccesfullCheckoutCartWithProducts
	|cart cashier priceList creditCard|
	
	priceList := Dictionary new.
	priceList add: self bookPublished -> 10.
	priceList add: self otherBookPublished -> 20.
	
	cart := Cart with: priceList.
	cart addQuantity: 2 ofBook: self bookPublished.
	cart addQuantity: 1 ofBook: self otherBookPublished.
	
	cashier := Cashier new.
	creditCard := CreditCard expiringOn: (Month month: Date today monthIndex year: Date today yearNumber) .
	
	self assert: (cashier checkout: cart charging: creditCard on: Date today) = 40.  ! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'DA 6/9/2023 16:11:23' prior: 50636154!
test04CheckoutFailWhenCreditCardIsExpired
	"se le deberia proveer el aniomes al cajero para poder saber si la tarjeta expiró."
	|cart cashier priceList creditCardExpired|
	
	priceList := Dictionary new.
	priceList add: self bookPublished -> 10.
	
	cart := Cart with: priceList.
	cart addQuantity: 2 ofBook: self bookPublished.
	
	cashier := Cashier new.
	
	creditCardExpired := CreditCard expiringOn: (Month month: Date today monthIndex year: Date today yearNumber - 1) .
	
	self 
		should: [cashier checkout: cart charging: creditCardExpired on: Date today]
		raise: Error
		withExceptionDo: [:anError|
			self assert: anError messageText equals: cashier invalidCreditCardErrorMessage.]! !

!testRun: #CashierTest #test01CannotCheckoutAnEmptyCart stamp: 'DA 6/9/2023 16:11:30'!
PASSED!

!testRun: #CashierTest #test01CannotCheckoutAnEmptyCart stamp: 'DA 6/9/2023 16:11:30'!
PASSED!

!testRun: #CashierTest #test02SuccesfullCheckoutCartWithOneProduct stamp: 'DA 6/9/2023 16:11:30'!
ERROR!

!testRun: #CashierTest #test03SuccesfullCheckoutCartWithProducts stamp: 'DA 6/9/2023 16:11:30'!
ERROR!

!testRun: #CashierTest #test04CheckoutFailWhenCreditCardIsExpired stamp: 'DA 6/9/2023 16:11:30'!
FAILURE!

!testRun: #CashierTest #test05CheckoutFailWhenCreditCardWithEmptyBalance stamp: 'DA 6/9/2023 16:11:30'!
PASSED!

!testRun: #CashierTest #test06CheckoutFailWhenCreditCardFraud stamp: 'DA 6/9/2023 16:11:30'!
PASSED!

!testRun: #CashierTest #test07SucessfullSaleIfEverythingIsOk stamp: 'DA 6/9/2023 16:11:30'!
PASSED!

Object subclass: #CreditCard
	instanceVariableNames: 'expiration'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'DA 6/9/2023 16:11:49'!
Object subclass: #CreditCard
	instanceVariableNames: 'expiration'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCard methodsFor: 'initialization' stamp: 'DA 6/9/2023 16:13:13'!
isExpiredOn: aDate
	^expiration < Month month: aDate monthIndex year: aDate yearNumber! !

!testRun: #CashierTest #test01CannotCheckoutAnEmptyCart stamp: 'DA 6/9/2023 16:13:15'!
PASSED!

!testRun: #CashierTest #test02SuccesfullCheckoutCartWithOneProduct stamp: 'DA 6/9/2023 16:13:15'!
ERROR!

!testRun: #CashierTest #test03SuccesfullCheckoutCartWithProducts stamp: 'DA 6/9/2023 16:13:15'!
ERROR!

!testRun: #CashierTest #test04CheckoutFailWhenCreditCardIsExpired stamp: 'DA 6/9/2023 16:13:15'!
FAILURE!

!testRun: #CashierTest #test05CheckoutFailWhenCreditCardWithEmptyBalance stamp: 'DA 6/9/2023 16:13:15'!
PASSED!

!testRun: #CashierTest #test06CheckoutFailWhenCreditCardFraud stamp: 'DA 6/9/2023 16:13:15'!
PASSED!

!testRun: #CashierTest #test07SucessfullSaleIfEverythingIsOk stamp: 'DA 6/9/2023 16:13:15'!
PASSED!

!testRun: #CashierTest #test01CannotCheckoutAnEmptyCart stamp: 'DA 6/9/2023 16:14:33'!
PASSED!

!testRun: #CashierTest #test02SuccesfullCheckoutCartWithOneProduct stamp: 'DA 6/9/2023 16:14:33'!
ERROR!

!testRun: #CashierTest #test03SuccesfullCheckoutCartWithProducts stamp: 'DA 6/9/2023 16:14:33'!
ERROR!

!testRun: #CashierTest #test04CheckoutFailWhenCreditCardIsExpired stamp: 'DA 6/9/2023 16:14:33'!
FAILURE!

!testRun: #CashierTest #test05CheckoutFailWhenCreditCardWithEmptyBalance stamp: 'DA 6/9/2023 16:14:33'!
PASSED!

!testRun: #CashierTest #test06CheckoutFailWhenCreditCardFraud stamp: 'DA 6/9/2023 16:14:33'!
PASSED!

!testRun: #CashierTest #test07SucessfullSaleIfEverythingIsOk stamp: 'DA 6/9/2023 16:14:33'!
PASSED!

!testRun: #CashierTest #test02SuccesfullCheckoutCartWithOneProduct stamp: 'DA 6/9/2023 16:14:34'!
ERROR!

!methodRemoval: CreditCard class #isExpiredOn: stamp: 'DA 6/9/2023 16:14:53'!
isExpiredOn: aDate 
	self shouldBeImplemented.!

!testRun: #CashierTest #test01CannotCheckoutAnEmptyCart stamp: 'DA 6/9/2023 16:14:59'!
PASSED!

!testRun: #CashierTest #test01CannotCheckoutAnEmptyCart stamp: 'DA 6/9/2023 16:14:59'!
PASSED!

!testRun: #CashierTest #test02SuccesfullCheckoutCartWithOneProduct stamp: 'DA 6/9/2023 16:14:59'!
ERROR!

!testRun: #CashierTest #test03SuccesfullCheckoutCartWithProducts stamp: 'DA 6/9/2023 16:14:59'!
ERROR!

!testRun: #CashierTest #test04CheckoutFailWhenCreditCardIsExpired stamp: 'DA 6/9/2023 16:14:59'!
FAILURE!

!testRun: #CashierTest #test05CheckoutFailWhenCreditCardWithEmptyBalance stamp: 'DA 6/9/2023 16:14:59'!
PASSED!

!testRun: #CashierTest #test06CheckoutFailWhenCreditCardFraud stamp: 'DA 6/9/2023 16:14:59'!
PASSED!

!testRun: #CashierTest #test07SucessfullSaleIfEverythingIsOk stamp: 'DA 6/9/2023 16:14:59'!
PASSED!

!testRun: #CashierTest #test02SuccesfullCheckoutCartWithOneProduct stamp: 'DA 6/9/2023 16:15:01'!
ERROR!
!CreditCard class methodsFor: 'class initialization' stamp: 'DA 6/9/2023 16:17:32' prior: 50635982!
expiringOn: aMonthOfYear
	^self new initializeExpiringOn: aMonthOfYear! !

!testRun: #CashierTest #test01CannotCheckoutAnEmptyCart stamp: 'DA 6/9/2023 16:17:41'!
PASSED!

!testRun: #CashierTest #test01CannotCheckoutAnEmptyCart stamp: 'DA 6/9/2023 16:17:41'!
PASSED!

!testRun: #CashierTest #test02SuccesfullCheckoutCartWithOneProduct stamp: 'DA 6/9/2023 16:17:41'!
ERROR!

!testRun: #CashierTest #test03SuccesfullCheckoutCartWithProducts stamp: 'DA 6/9/2023 16:17:41'!
ERROR!

!testRun: #CashierTest #test04CheckoutFailWhenCreditCardIsExpired stamp: 'DA 6/9/2023 16:17:41'!
FAILURE!

!testRun: #CashierTest #test05CheckoutFailWhenCreditCardWithEmptyBalance stamp: 'DA 6/9/2023 16:17:41'!
PASSED!

!testRun: #CashierTest #test06CheckoutFailWhenCreditCardFraud stamp: 'DA 6/9/2023 16:17:41'!
PASSED!

!testRun: #CashierTest #test07SucessfullSaleIfEverythingIsOk stamp: 'DA 6/9/2023 16:17:42'!
PASSED!

!testRun: #CashierTest #test02SuccesfullCheckoutCartWithOneProduct stamp: 'DA 6/9/2023 16:17:43'!
ERROR!

!testRun: #CashierTest #test02SuccesfullCheckoutCartWithOneProduct stamp: 'DA 6/9/2023 16:17:56'!
ERROR!

!testRun: #CashierTest #test02SuccesfullCheckoutCartWithOneProduct stamp: 'DA 6/9/2023 16:18:00'!
ERROR!
!CreditCard methodsFor: 'initialization' stamp: 'DA 6/9/2023 16:20:54' prior: 50636372!
isExpiredOn: aDate
	^expiration start < (Month month: aDate monthIndex year: aDate yearNumber) start! !

!testRun: #CashierTest #test01CannotCheckoutAnEmptyCart stamp: 'DA 6/9/2023 16:20:55'!
PASSED!

!testRun: #CashierTest #test02SuccesfullCheckoutCartWithOneProduct stamp: 'DA 6/9/2023 16:20:55'!
PASSED!

!testRun: #CashierTest #test03SuccesfullCheckoutCartWithProducts stamp: 'DA 6/9/2023 16:20:55'!
PASSED!

!testRun: #CashierTest #test04CheckoutFailWhenCreditCardIsExpired stamp: 'DA 6/9/2023 16:20:55'!
PASSED!

!testRun: #CashierTest #test05CheckoutFailWhenCreditCardWithEmptyBalance stamp: 'DA 6/9/2023 16:20:55'!
PASSED!

!testRun: #CashierTest #test06CheckoutFailWhenCreditCardFraud stamp: 'DA 6/9/2023 16:20:55'!
PASSED!

!testRun: #CashierTest #test07SucessfullSaleIfEverythingIsOk stamp: 'DA 6/9/2023 16:20:55'!
PASSED!

Object subclass: #StoreTestObjects
	instanceVariableNames: 'today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #StoreTestObjects category: 'TusLibros' stamp: 'DA 6/9/2023 16:21:56'!
Object subclass: #StoreTestObjects
	instanceVariableNames: 'today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreTestObjects methodsFor: 'no messages' stamp: 'DA 6/9/2023 16:22:35'!
bookNotPublished
	^'A book that is not published'! !
!StoreTestObjects methodsFor: 'as yet unclassified' stamp: 'DA 6/9/2023 16:22:49' prior: 50636541!
bookNotPublished
	^'A book that is not published'! !
!StoreTestObjects methodsFor: 'as yet unclassified' stamp: 'DA 6/9/2023 16:23:13'!
bookPublished
	^'A book that is published'! !
!StoreTestObjects methodsFor: 'as yet unclassified' stamp: 'DA 6/9/2023 16:23:28'!
defaultCatalog! !
!StoreTestObjects methodsFor: 'as yet unclassified' stamp: 'DA 6/9/2023 16:23:42'!
creditCardValid! !
!StoreTestObjects methodsFor: 'as yet unclassified' stamp: 'DA 6/9/2023 16:24:09'!
expiredCreditCard! !

!methodRemoval: StoreTestObjects #creditCardValid stamp: 'DA 6/9/2023 16:24:09'!
creditCardValid!
!StoreTestObjects methodsFor: 'as yet unclassified' stamp: 'DA 6/9/2023 16:24:16'!
notExpiredCreditCard! !
!StoreTestObjects methodsFor: 'as yet unclassified' stamp: 'DA 6/9/2023 16:24:57'!
createCart
	^ Cart with: self defaultCatalog ! !
!StoreTestObjects methodsFor: 'as yet unclassified' stamp: 'DA 6/9/2023 16:26:42' prior: 50636556!
defaultCatalog
	^ Dictionary with:  self bookPublished -> 10 with: self otherBookPublished -> 20.! !
!StoreTestObjects methodsFor: 'as yet unclassified' stamp: 'DA 6/9/2023 16:26:52'!
otherBookPublished
	^'Other book that is published'! !
!StoreTestObjects methodsFor: 'as yet unclassified' stamp: 'DA 6/9/2023 16:27:33' prior: 50636571!
notExpiredCreditCard
	^CreditCard expiringOn: (Month month: today monthIndex year: today yearNumber)! !
!StoreTestObjects methodsFor: 'as yet unclassified' stamp: 'DA 6/9/2023 16:28:00' prior: 50636564!
expiredCreditCard
	^ CreditCard expiringOn: (Month month: today monthIndex year: today yearNumber + 1)! !
!StoreTestObjects methodsFor: 'as yet unclassified' stamp: 'DA 6/9/2023 16:28:50' overrides: 16920235!
initialize 
	today := DateAndTime now.! !
!StoreTestObjects methodsFor: 'as yet unclassified' stamp: 'DA 6/9/2023 16:29:00'!
today
	^ today! !
!CartTest methodsFor: 'tests' stamp: 'DA 6/9/2023 16:31:09' prior: 50631497!
test01NewCartStartsEmpty
	
	self assert: StoreTestObjects createCart isEmpty! !
!CartTest methodsFor: 'tests' stamp: 'DA 6/9/2023 16:31:27' prior: 50636612!
test01NewCartStartsEmpty
	
	self assert: (StoreTestObjects createCart) isEmpty! !

!testRun: #CartTest #test01NewCartStartsEmpty stamp: 'DA 6/9/2023 16:31:28'!
ERROR!
!StoreTestObjects methodsFor: 'as yet unclassified' stamp: 'DA 6/9/2023 16:32:23' prior: 50636575!
createCart
	^ Cart initializeWith: self defaultCatalog ! !

!methodRemoval: CartTest #bookNotPublished stamp: 'DA 6/9/2023 16:32:30'!
bookNotPublished
	^'A book that is not published'!

!methodRemoval: CartTest #bookPublished stamp: 'DA 6/9/2023 16:32:36'!
bookPublished
	^'A book that is published'!

!testRun: #CartTest #test01NewCartStartsEmpty stamp: 'DA 6/9/2023 16:32:40'!
ERROR!
!CartTest methodsFor: 'tests' stamp: 'DA 6/9/2023 16:33:51' prior: 50636617!
test01NewCartStartsEmpty
	
	self assert: (StoreTestObjects new createCart) isEmpty! !

!testRun: #CartTest #test01NewCartStartsEmpty stamp: 'DA 6/9/2023 16:33:52'!
ERROR!
!StoreTestObjects methodsFor: 'as yet unclassified' stamp: 'DA 6/9/2023 16:34:45' prior: 50636626!
createCart
	^ Cart initializeWith: self defaultCatalog ! !

!testRun: #CartTest #test01NewCartStartsEmpty stamp: 'DA 6/9/2023 16:34:46'!
ERROR!

!testRun: #CartTest #test02CannotAddBookThatNotBelongSite stamp: 'DA 6/9/2023 16:34:46'!
FAILURE!

!testRun: #CartTest #test03AddingBookThatBelongSiteMakesCartNotEmpty stamp: 'DA 6/9/2023 16:34:46'!
ERROR!

!testRun: #CartTest #test04CartCanAddAmountOfSameBook stamp: 'DA 6/9/2023 16:34:46'!
ERROR!

!testRun: #CartTest #test05CartCanAddPositiveAmountOfSameBook stamp: 'DA 6/9/2023 16:34:46'!
ERROR!

!testRun: #CartTest #test06CartCanRememberNumberOfBooksAdded stamp: 'DA 6/9/2023 16:34:46'!
ERROR!

!testRun: #CartTest #test07CartCanCheckIfHasAddedABook stamp: 'DA 6/9/2023 16:34:46'!
ERROR!

!testRun: #CartTest #test08CartCanAddIntegerAmountOfBooks stamp: 'DA 6/9/2023 16:34:46'!
ERROR!

!testRun: #CartTest #test01NewCartStartsEmpty stamp: 'DA 6/9/2023 16:34:57'!
ERROR!

!testRun: #CartTest #test01NewCartStartsEmpty stamp: 'DA 6/9/2023 16:34:57'!
ERROR!
!StoreTestObjects methodsFor: 'as yet unclassified' stamp: 'DA 6/9/2023 16:35:22' prior: 50636650!
createCart
	^ Cart with: self defaultCatalog ! !

!testRun: #CartTest #test01NewCartStartsEmpty stamp: 'DA 6/9/2023 16:35:28'!
PASSED!
!CartTest methodsFor: 'tests' stamp: 'DA 6/9/2023 16:35:48' prior: 50634851!
test02CannotAddBookThatNotBelongSite
	|cart emptyCatalog|
	emptyCatalog := Array new. 
	cart := Cart with: emptyCatalog.
	
	self 
		should: [cart addQuantity: 1 ofBook: StoreTestObjects bookPublished.]
	 	raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: cart invalidBookErrorMessage.
			self assert: cart isEmpty. 
			]! !

!testRun: #CartTest #test02CannotAddBookThatNotBelongSite stamp: 'DA 6/9/2023 16:36:32'!
FAILURE!
!CartTest methodsFor: 'tests' stamp: 'DA 6/9/2023 16:37:30' prior: 50636641!
test01NewCartStartsEmpty
	
	self assert: (StoreTestObjects createCart) isEmpty! !

!testRun: #CartTest #test01NewCartStartsEmpty stamp: 'DA 6/9/2023 16:38:13'!
ERROR!

!testRun: #CartTest #test02CannotAddBookThatNotBelongSite stamp: 'DA 6/9/2023 16:38:13'!
FAILURE!

!testRun: #CartTest #test03AddingBookThatBelongSiteMakesCartNotEmpty stamp: 'DA 6/9/2023 16:38:13'!
ERROR!

!testRun: #CartTest #test04CartCanAddAmountOfSameBook stamp: 'DA 6/9/2023 16:38:13'!
ERROR!

!testRun: #CartTest #test05CartCanAddPositiveAmountOfSameBook stamp: 'DA 6/9/2023 16:38:13'!
ERROR!

!testRun: #CartTest #test06CartCanRememberNumberOfBooksAdded stamp: 'DA 6/9/2023 16:38:13'!
ERROR!

!testRun: #CartTest #test07CartCanCheckIfHasAddedABook stamp: 'DA 6/9/2023 16:38:13'!
ERROR!

!testRun: #CartTest #test08CartCanAddIntegerAmountOfBooks stamp: 'DA 6/9/2023 16:38:13'!
ERROR!

!testRun: #CartTest #test01NewCartStartsEmpty stamp: 'DA 6/9/2023 16:38:15'!
ERROR!
!StoreTestObjects methodsFor: 'as yet unclassified' stamp: 'DA 6/9/2023 16:39:28' prior: 50636580!
defaultCatalog
	^ Dictionary new
		at: self bookPublished put: 10; at: self otherBookPublished put: 20.! !

!testRun: #CartTest #test01NewCartStartsEmpty stamp: 'DA 6/9/2023 16:39:29'!
ERROR!

!testRun: #CartTest #test02CannotAddBookThatNotBelongSite stamp: 'DA 6/9/2023 16:39:29'!
FAILURE!

!testRun: #CartTest #test03AddingBookThatBelongSiteMakesCartNotEmpty stamp: 'DA 6/9/2023 16:39:29'!
ERROR!

!testRun: #CartTest #test04CartCanAddAmountOfSameBook stamp: 'DA 6/9/2023 16:39:29'!
ERROR!

!testRun: #CartTest #test05CartCanAddPositiveAmountOfSameBook stamp: 'DA 6/9/2023 16:39:29'!
ERROR!

!testRun: #CartTest #test06CartCanRememberNumberOfBooksAdded stamp: 'DA 6/9/2023 16:39:29'!
ERROR!

!testRun: #CartTest #test07CartCanCheckIfHasAddedABook stamp: 'DA 6/9/2023 16:39:30'!
ERROR!

!testRun: #CartTest #test08CartCanAddIntegerAmountOfBooks stamp: 'DA 6/9/2023 16:39:30'!
ERROR!
!StoreTestObjects methodsFor: 'as yet unclassified' stamp: 'DA 6/9/2023 16:39:37' prior: 50636742!
defaultCatalog
	^ Dictionary new
		at: self bookPublished put: 10;
		at: self otherBookPublished put: 20.! !

!testRun: #CartTest #test01NewCartStartsEmpty stamp: 'DA 6/9/2023 16:40:22'!
ERROR!

!testRun: #CartTest #test01NewCartStartsEmpty stamp: 'DA 6/9/2023 16:40:22'!
ERROR!

!classDefinition: #CartTest category: 'TusLibros' stamp: 'DA 6/9/2023 16:41:23'!
TestCase subclass: #CartTest
	instanceVariableNames: 'testStoreObjects'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CartTest methodsFor: 'nil' stamp: 'DA 6/9/2023 16:41:21' overrides: 16961394!
setUp
	testStoreObjects := StoreTestObjects new! !
!CartTest methodsFor: 'tests' stamp: 'DA 6/9/2023 16:41:39' prior: 50636709!
test01NewCartStartsEmpty
	
	self assert: (testStoreObjects createCart) isEmpty! !

!testRun: #CartTest #test01NewCartStartsEmpty stamp: 'DA 6/9/2023 16:41:40'!
PASSED!

!testRun: #CartTest #test01NewCartStartsEmpty stamp: 'DA 6/9/2023 16:41:40'!
PASSED!

!testRun: #CartTest #test02CannotAddBookThatNotBelongSite stamp: 'DA 6/9/2023 16:41:40'!
FAILURE!

!testRun: #CartTest #test03AddingBookThatBelongSiteMakesCartNotEmpty stamp: 'DA 6/9/2023 16:41:40'!
ERROR!

!testRun: #CartTest #test04CartCanAddAmountOfSameBook stamp: 'DA 6/9/2023 16:41:40'!
ERROR!

!testRun: #CartTest #test05CartCanAddPositiveAmountOfSameBook stamp: 'DA 6/9/2023 16:41:40'!
ERROR!

!testRun: #CartTest #test06CartCanRememberNumberOfBooksAdded stamp: 'DA 6/9/2023 16:41:40'!
ERROR!

!testRun: #CartTest #test07CartCanCheckIfHasAddedABook stamp: 'DA 6/9/2023 16:41:40'!
ERROR!

!testRun: #CartTest #test08CartCanAddIntegerAmountOfBooks stamp: 'DA 6/9/2023 16:41:40'!
ERROR!

!testRun: #CartTest #test01NewCartStartsEmpty stamp: 'DA 6/9/2023 16:41:43'!
PASSED!
!CartTest methodsFor: 'tests' stamp: 'DA 6/9/2023 16:42:37' prior: 50636692!
test02CannotAddBookThatNotBelongSite
	|cart|
	cart := testStoreObjects createCart.
	
	self 
		should: [cart addQuantity: 1 ofBook: testStoreObjects bookPublished.]
	 	raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: cart invalidBookErrorMessage.
			self assert: cart isEmpty. 
			]! !
!CartTest methodsFor: 'tests' stamp: 'DA 6/9/2023 16:43:11' prior: 50631579!
test03AddingBookThatBelongSiteMakesCartNotEmpty
	|cart|
	cart := testStoreObjects createCart.
	
	cart addQuantity: 1 ofBook: testStoreObjects bookPublished.
	self deny: cart isEmpty.! !
!CartTest methodsFor: 'tests' stamp: 'DA 6/9/2023 16:43:46' prior: 50631589!
test04CartCanAddAmountOfSameBook
	|cart|
	cart := testStoreObjects createCart.
	
	cart addQuantity: 2 ofBook: testStoreObjects bookPublished .
	self deny: cart isEmpty.! !
!CartTest methodsFor: 'tests' stamp: 'DA 6/9/2023 16:43:47' prior: 50636853!
test04CartCanAddAmountOfSameBook
	|cart|
	cart := testStoreObjects createCart.
	
	cart addQuantity: 2 ofBook: testStoreObjects bookPublished.
	self deny: cart isEmpty.! !
!CartTest methodsFor: 'tests' stamp: 'DA 6/9/2023 16:44:15' prior: 50635912!
test05CartCanAddPositiveAmountOfSameBook
	|cart|
	cart := testStoreObjects createCart.
	self 
		should: [cart addQuantity: -1 ofBook: testStoreObjects bookPublished.]
		raise: Error
		withExceptionDo: [:anError|
			self assert: anError messageText equals: cart onlyCanAddPositiveQuantityErrorMessage.
			self assert: cart isEmpty]! !
!CartTest methodsFor: 'tests' stamp: 'DA 6/9/2023 16:44:52' prior: 50634690!
test06CartCanRememberNumberOfBooksAdded
	|cart |
	cart := testStoreObjects createCart.
	
	cart addQuantity: 2 ofBook: testStoreObjects bookPublished .
	self assert: 2 equals: (cart amountAddedOf: testStoreObjects bookPublished). ! !
!CartTest methodsFor: 'tests' stamp: 'DA 6/9/2023 16:45:23' prior: 50634732!
test07CartCanCheckIfHasAddedABook
	|cart|
	cart := testStoreObjects createCart.
	
	cart addQuantity: 2 ofBook: testStoreObjects bookPublished.
	self assert: (cart contains: testStoreObjects bookPublished). ! !
!CartTest methodsFor: 'tests' stamp: 'DA 6/9/2023 16:45:51' prior: 50635926!
test08CartCanAddIntegerAmountOfBooks
	|cart| 
	cart := testStoreObjects createCart.
	self 
		should: [cart addQuantity: 1.1 ofBook: testStoreObjects bookPublished]
		raise: Error
		withExceptionDo: [:anError|
			self assert: anError messageText equals: cart onlyCanAddIntegerQuantityErrorMessage.
			self assert: cart isEmpty]! !

!testRun: #CartTest #test08CartCanAddIntegerAmountOfBooks stamp: 'DA 6/9/2023 16:45:53'!
PASSED!

!testRun: #CartTest #test01NewCartStartsEmpty stamp: 'DA 6/9/2023 16:45:53'!
PASSED!

!testRun: #CartTest #test02CannotAddBookThatNotBelongSite stamp: 'DA 6/9/2023 16:45:53'!
FAILURE!

!testRun: #CartTest #test03AddingBookThatBelongSiteMakesCartNotEmpty stamp: 'DA 6/9/2023 16:45:53'!
ERROR!

!testRun: #CartTest #test04CartCanAddAmountOfSameBook stamp: 'DA 6/9/2023 16:45:53'!
ERROR!

!testRun: #CartTest #test05CartCanAddPositiveAmountOfSameBook stamp: 'DA 6/9/2023 16:45:53'!
PASSED!

!testRun: #CartTest #test06CartCanRememberNumberOfBooksAdded stamp: 'DA 6/9/2023 16:45:53'!
ERROR!

!testRun: #CartTest #test07CartCanCheckIfHasAddedABook stamp: 'DA 6/9/2023 16:45:53'!
ERROR!

!testRun: #CartTest #test08CartCanAddIntegerAmountOfBooks stamp: 'DA 6/9/2023 16:45:53'!
PASSED!

!testRun: #CartTest #test02CannotAddBookThatNotBelongSite stamp: 'DA 6/9/2023 16:45:56'!
FAILURE!

!testRun: #CartTest #test02CannotAddBookThatNotBelongSite stamp: 'DA 6/9/2023 16:46:13'!
FAILURE!

!testRun: #CartTest #test02CannotAddBookThatNotBelongSite stamp: 'DA 6/9/2023 16:46:13'!
FAILURE!

!testRun: #CartTest #test01NewCartStartsEmpty stamp: 'DA 6/9/2023 16:47:00'!
PASSED!
!StoreTestObjects methodsFor: 'as yet unclassified' stamp: 'DA 6/9/2023 16:48:24' prior: 50636773!
defaultCatalog
	^ Dictionary with: self bookPublished -> 10 with: self otherBookPublished ->20.! !

!testRun: #CartTest #test02CannotAddBookThatNotBelongSite stamp: 'DA 6/9/2023 16:48:29'!
FAILURE!

!testRun: #CartTest #test02CannotAddBookThatNotBelongSite stamp: 'DA 6/9/2023 16:48:29'!
FAILURE!

!testRun: #CartTest #test02CannotAddBookThatNotBelongSite stamp: 'DA 6/9/2023 16:48:48'!
FAILURE!
!CartTest methodsFor: 'tests' stamp: 'DA 6/9/2023 16:49:05' prior: 50636831!
test02CannotAddBookThatNotBelongSite
	|cart|
	cart := testStoreObjects createCart.
	
	cart addQuantity: 1 ofBook: testStoreObjects bookPublished.
	
	self 
		should: [cart addQuantity: 1 ofBook: testStoreObjects bookPublished.]
	 	raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: cart invalidBookErrorMessage.
			self assert: cart isEmpty. 
			]! !
!CartTest methodsFor: 'tests' stamp: 'DA 6/9/2023 16:49:15' prior: 50636969!
test02CannotAddBookThatNotBelongSite
	|cart|
	cart := testStoreObjects createCart.
	
	self 
		should: [cart addQuantity: 1 ofBook: testStoreObjects bookNotPublished.]
	 	raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: cart invalidBookErrorMessage.
			self assert: cart isEmpty. 
			]! !

!testRun: #CartTest #test02CannotAddBookThatNotBelongSite stamp: 'DA 6/9/2023 16:49:17'!
PASSED!

!testRun: #CartTest #test01NewCartStartsEmpty stamp: 'DA 6/9/2023 16:49:17'!
PASSED!

!testRun: #CartTest #test02CannotAddBookThatNotBelongSite stamp: 'DA 6/9/2023 16:49:17'!
PASSED!

!testRun: #CartTest #test03AddingBookThatBelongSiteMakesCartNotEmpty stamp: 'DA 6/9/2023 16:49:17'!
PASSED!

!testRun: #CartTest #test04CartCanAddAmountOfSameBook stamp: 'DA 6/9/2023 16:49:17'!
PASSED!

!testRun: #CartTest #test05CartCanAddPositiveAmountOfSameBook stamp: 'DA 6/9/2023 16:49:18'!
PASSED!

!testRun: #CartTest #test06CartCanRememberNumberOfBooksAdded stamp: 'DA 6/9/2023 16:49:18'!
PASSED!

!testRun: #CartTest #test07CartCanCheckIfHasAddedABook stamp: 'DA 6/9/2023 16:49:18'!
PASSED!

!testRun: #CartTest #test08CartCanAddIntegerAmountOfBooks stamp: 'DA 6/9/2023 16:49:18'!
PASSED!

!methodRemoval: CashierTest #aValidCreditCard stamp: 'DA 6/9/2023 16:49:33'!
aValidCreditCard
	^ 'a valid credit card'!

!methodRemoval: CashierTest #anInvalidCreditCard stamp: 'DA 6/9/2023 16:49:34'!
anInvalidCreditCard
	^ 'an invalid credit card'!

!methodRemoval: CashierTest #bookPublished stamp: 'DA 6/9/2023 16:49:36'!
bookPublished
	^ 'a valid book'!

!methodRemoval: CashierTest #otherBookPublished stamp: 'DA 6/9/2023 16:49:38'!
otherBookPublished
	^ 'an Other valid book'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'DA 6/9/2023 16:50:10'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'testStoreObjects'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'nil' stamp: 'DA 6/9/2023 16:50:09' overrides: 16961394!
setUp
	testStoreObjects := StoreTestObjects new. ! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'DA 6/9/2023 16:52:24' prior: 50636247!
test01CannotCheckoutAnEmptyCart
	"salesBook registrando las ventas, un cajero por cada venta
	asercion de mensaje de error con chequeo de invariante"
	|cart cashier|
	
	cart := testStoreObjects createCart.
	cashier := Cashier new.
	
	self 
		should: [
			cashier checkout: cart
				charging: testStoreObjects notExpiredCreditCard
				on: testStoreObjects today]  
		raise: Error
		withExceptionDo: [:anError|
			self assert: anError messageText equals: cashier emptyCartErrorMessage.
			self assert: cart isEmpty.
			]
	! !

!testRun: #CashierTest #test01CannotCheckoutAnEmptyCart stamp: 'DA 6/9/2023 16:52:27'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'DA 6/9/2023 16:53:38' prior: 50636269!
test02SuccesfullCheckoutCartWithOneProduct
	"checkout: cart charging cc on: date registeringOn: salesbook initializer of cashier, mensaje checkout "
	|cart |
	
	cart := testStoreObjects createCart.
	cart addQuantity: 1 ofBook: testStoreObjects bookPublished.
	
	self assert: (Cashier checkout: cart charging: testStoreObjects notExpiredCreditCard on: testStoreObjects today) = 10.  
	! !

!testRun: #CashierTest #test02SuccesfullCheckoutCartWithOneProduct stamp: 'DA 6/9/2023 16:53:44'!
ERROR!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'DA 6/9/2023 16:53:49' prior: 50637075!
test02SuccesfullCheckoutCartWithOneProduct
	"checkout: cart charging cc on: date registeringOn: salesbook initializer of cashier, mensaje checkout "
	|cart |
	
	cart := testStoreObjects createCart.
	cart addQuantity: 1 ofBook: testStoreObjects bookPublished.
	
	self assert: (Cashier new checkout: cart charging: testStoreObjects notExpiredCreditCard on: testStoreObjects today) = 10.  
	! !

!testRun: #CashierTest #test02SuccesfullCheckoutCartWithOneProduct stamp: 'DA 6/9/2023 16:53:50'!
PASSED!

!testRun: #CashierTest #test01CannotCheckoutAnEmptyCart stamp: 'DA 6/9/2023 16:53:50'!
PASSED!

!testRun: #CashierTest #test02SuccesfullCheckoutCartWithOneProduct stamp: 'DA 6/9/2023 16:53:50'!
PASSED!

!testRun: #CashierTest #test03SuccesfullCheckoutCartWithProducts stamp: 'DA 6/9/2023 16:53:50'!
ERROR!

!testRun: #CashierTest #test04CheckoutFailWhenCreditCardIsExpired stamp: 'DA 6/9/2023 16:53:50'!
ERROR!

!testRun: #CashierTest #test05CheckoutFailWhenCreditCardWithEmptyBalance stamp: 'DA 6/9/2023 16:53:50'!
PASSED!

!testRun: #CashierTest #test06CheckoutFailWhenCreditCardFraud stamp: 'DA 6/9/2023 16:53:50'!
PASSED!

!testRun: #CashierTest #test07SucessfullSaleIfEverythingIsOk stamp: 'DA 6/9/2023 16:53:50'!
PASSED!

!testRun: #CashierTest #test02SuccesfullCheckoutCartWithOneProduct stamp: 'DA 6/9/2023 16:53:55'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'DA 6/9/2023 16:54:10' prior: 50637052!
test01CannotCheckoutAnEmptyCart
	"salesBook registrando las ventas, un cajero por cada venta
	asercion de mensaje de error con chequeo de invariante"
	|cart cashier|
	
	cart := testStoreObjects createCart.
	
	self 
		should: [
			Cashier new checkout: cart
				charging: testStoreObjects notExpiredCreditCard
				on: testStoreObjects today]  
		raise: Error
		withExceptionDo: [:anError|
			self assert: anError messageText equals: cashier emptyCartErrorMessage.
			self assert: cart isEmpty.
			]
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'DA 6/9/2023 16:54:41' prior: 50636290!
test03SuccesfullCheckoutCartWithProducts
	|cart cashier creditCard|
	
	cart := testStoreObjects createCart.	
	cart addQuantity: 2 ofBook: self bookPublished.
	cart addQuantity: 1 ofBook: self otherBookPublished.
	
	cashier := Cashier new.
	creditCard := CreditCard expiringOn: (Month month: Date today monthIndex year: Date today yearNumber) .
	
	self assert: (cashier checkout: cart charging: creditCard on: Date today) = 40.  ! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'DA 6/9/2023 16:55:26' prior: 50637158!
test03SuccesfullCheckoutCartWithProducts
	|cart |
	
	cart := testStoreObjects createCart.	
	cart addQuantity: 2 ofBook: testStoreObjects bookPublished.
	cart addQuantity: 1 ofBook: testStoreObjects otherBookPublished.
	
	self assert: (Cashier new checkout: cart charging: testStoreObjects notExpiredCreditCard on: testStoreObjects today) = 40.  ! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'DA 6/9/2023 16:56:30' prior: 50636311!
test04CheckoutFailWhenCreditCardIsExpired
	"se le deberia proveer el aniomes al cajero para poder saber si la tarjeta expiró."
	|cart cashier |
	
	cart := testStoreObjects createCart.
	cart addQuantity: 2 ofBook: testStoreObjects bookPublished.
	
	cashier := Cashier new.
	
	self 
		should: [cashier checkout: cart charging: testStoreObjects expiredCreditCard on: testStoreObjects today]
		raise: Error
		withExceptionDo: [:anError|
			self assert: anError messageText equals: cashier invalidCreditCardErrorMessage.]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'DA 6/9/2023 16:56:41' prior: 50637189!
test04CheckoutFailWhenCreditCardIsExpired
	|cart cashier |
	
	cart := testStoreObjects createCart.
	cart addQuantity: 2 ofBook: testStoreObjects bookPublished.
	
	cashier := Cashier new.
	
	self 
		should: [cashier checkout: cart charging: testStoreObjects expiredCreditCard on: testStoreObjects today]
		raise: Error
		withExceptionDo: [:anError|
			self assert: anError messageText equals: cashier invalidCreditCardErrorMessage.]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'DA 6/9/2023 16:56:48' prior: 50637175!
test03SuccesfullCheckoutCartWithProducts
	|cart |
	cart := testStoreObjects createCart.	
	cart addQuantity: 2 ofBook: testStoreObjects bookPublished.
	cart addQuantity: 1 ofBook: testStoreObjects otherBookPublished.
	
	self assert: (Cashier new checkout: cart charging: testStoreObjects notExpiredCreditCard on: testStoreObjects today) = 40.  ! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'DA 6/9/2023 16:56:52' prior: 50637094!
test02SuccesfullCheckoutCartWithOneProduct
	"checkout: cart charging cc on: date registeringOn: salesbook initializer of cashier, mensaje checkout "
	|cart |
	cart := testStoreObjects createCart.
	cart addQuantity: 1 ofBook: testStoreObjects bookPublished.
	
	self assert: (Cashier new checkout: cart charging: testStoreObjects notExpiredCreditCard on: testStoreObjects today) = 10.  
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'DA 6/9/2023 16:57:02' prior: 50637139!
test01CannotCheckoutAnEmptyCart
	"salesBook registrando las ventas, un cajero por cada venta
	asercion de mensaje de error con chequeo de invariante"
	|cart cashier|
	
	cart := testStoreObjects createCart.
	
	self 
		should: [
			Cashier new checkout: cart
				charging: testStoreObjects notExpiredCreditCard
				on: testStoreObjects today]  
		raise: Error
		withExceptionDo: [:anError|
			self assert: anError messageText equals: cashier emptyCartErrorMessage.
			]
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'DA 6/9/2023 16:57:21' prior: 50637256!
test01CannotCheckoutAnEmptyCart
	"salesBook registrando las ventas, un cajero por cada venta
	asercion de mensaje de error con chequeo de invariante"
	|cart cashier|
	
	cart := testStoreObjects createCart.
	cashier := Cashier new.
	
	self 
		should: [
			cashier checkout: cart
				charging: testStoreObjects notExpiredCreditCard
				on: testStoreObjects today]  
		raise: Error
		withExceptionDo: [:anError|
			self assert: anError messageText equals: cashier emptyCartErrorMessage.
			]
	! !

!testRun: #CashierTest #test01CannotCheckoutAnEmptyCart stamp: 'DA 6/9/2023 16:57:23'!
PASSED!

!testRun: #CashierTest #test01CannotCheckoutAnEmptyCart stamp: 'DA 6/9/2023 16:57:26'!
PASSED!

!testRun: #CashierTest #test01CannotCheckoutAnEmptyCart stamp: 'DA 6/9/2023 16:57:26'!
PASSED!

!testRun: #CashierTest #test02SuccesfullCheckoutCartWithOneProduct stamp: 'DA 6/9/2023 16:57:26'!
PASSED!

!testRun: #CashierTest #test03SuccesfullCheckoutCartWithProducts stamp: 'DA 6/9/2023 16:57:26'!
PASSED!

!testRun: #CashierTest #test04CheckoutFailWhenCreditCardIsExpired stamp: 'DA 6/9/2023 16:57:26'!
FAILURE!

!testRun: #CashierTest #test05CheckoutFailWhenCreditCardWithEmptyBalance stamp: 'DA 6/9/2023 16:57:26'!
PASSED!

!testRun: #CashierTest #test06CheckoutFailWhenCreditCardFraud stamp: 'DA 6/9/2023 16:57:26'!
PASSED!

!testRun: #CashierTest #test07SucessfullSaleIfEverythingIsOk stamp: 'DA 6/9/2023 16:57:26'!
PASSED!

!testRun: #CashierTest #test04CheckoutFailWhenCreditCardIsExpired stamp: 'DA 6/9/2023 16:57:26'!
FAILURE!

!testRun: #CashierTest #test02SuccesfullCheckoutCartWithOneProduct stamp: 'DA 6/9/2023 16:57:44'!
PASSED!

!testRun: #CashierTest #test03SuccesfullCheckoutCartWithProducts stamp: 'DA 6/9/2023 16:57:47'!
PASSED!

!testRun: #CashierTest #test04CheckoutFailWhenCreditCardIsExpired stamp: 'DA 6/9/2023 16:57:52'!
FAILURE!

!testRun: #CashierTest #test04CheckoutFailWhenCreditCardIsExpired stamp: 'DA 6/9/2023 16:57:52'!
FAILURE!
!Cashier methodsFor: 'error handling' stamp: 'DA 6/9/2023 16:58:37'!
expiredCreditCardErrorMessage
	^ 'Invalid credit card'! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'DA 6/9/2023 16:58:37' prior: 50636205!
checkout: aCart charging: aCreditCard on: aDate
	(aCart isEmpty) ifTrue: [self error: self emptyCartErrorMessage].
	(aCreditCard isExpiredOn: aDate) ifTrue: [self error: self expiredCreditCardErrorMessage].
	^ aCart total
	! !

!methodRemoval: Cashier #invalidCreditCardErrorMessage stamp: 'DA 6/9/2023 16:58:37'!
invalidCreditCardErrorMessage
	^ 'Invalid credit card'!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'DA 6/9/2023 16:58:49' prior: 50637209!
test04CheckoutFailWhenCreditCardIsExpired
	|cart cashier |
	
	cart := testStoreObjects createCart.
	cart addQuantity: 2 ofBook: testStoreObjects bookPublished.
	
	cashier := Cashier new.
	
	self 
		should: [cashier checkout: cart charging: testStoreObjects expiredCreditCard on: testStoreObjects today]
		raise: Error
		withExceptionDo: [:anError|
			self assert: anError messageText equals: cashier expiredCreditCardErrorMessage.]! !

!testRun: #CashierTest #test04CheckoutFailWhenCreditCardIsExpired stamp: 'DA 6/9/2023 16:58:50'!
FAILURE!

!testRun: #CashierTest #test04CheckoutFailWhenCreditCardIsExpired stamp: 'DA 6/9/2023 16:59:03'!
FAILURE!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'DA 6/9/2023 16:59:14' prior: 50637358!
test04CheckoutFailWhenCreditCardIsExpired
	|cart cashier |
	
	cart := testStoreObjects createCart.
	cart addQuantity: 2 ofBook: testStoreObjects bookPublished.
	
	cashier := Cashier new.
	
	cashier checkout: cart charging: testStoreObjects expiredCreditCard on: testStoreObjects today.
	self 
		should: [cashier checkout: cart charging: testStoreObjects expiredCreditCard on: testStoreObjects today]
		raise: Error
		withExceptionDo: [:anError|
			self assert: anError messageText equals: cashier expiredCreditCardErrorMessage.]! !
!CreditCard methodsFor: 'initialization' stamp: 'DA 6/9/2023 17:00:19' prior: 50636501!
isExpiredOn: aDate
	^expiration start < (Month month: aDate monthIndex year: aDate yearNumber)! !
!CreditCard methodsFor: 'initialization' stamp: 'DA 6/9/2023 17:01:39' prior: 50637402!
isExpiredOn: aDate
	^expiration start < (Month month: aDate monthIndex year: aDate yearNumber) start! !
!StoreTestObjects methodsFor: 'as yet unclassified' stamp: 'DA 6/9/2023 17:01:48' prior: 50636598!
expiredCreditCard
	^ CreditCard expiringOn: (Month month: today monthIndex year: today yearNumber - 1)! !
!StoreTestObjects methodsFor: 'as yet unclassified' stamp: 'DA 6/9/2023 17:02:19' prior: 50636591!
notExpiredCreditCard
	^CreditCard expiringOn: (Month month: today monthIndex year: today yearNumber + 1)! !
!Behavior method!
add: aBook
	#_coverageTracker4948412_ markAsExecuted.
	[ | receiver1 |
	receiver1 _ #_coverageTracker4948412_
		coverAll:
			{13 to: 16}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker4948412_
		coverAll:
			{18 to: 29. 33 to: 39}
		evaluating: [
			receiver1
				addQuantity:
					(#_coverageTracker4948412_
						coverAll:
							{31 to: 31}
						byLiteralOrPseudoVariable: 1)
				ofBook:
					(#_coverageTracker4948412_
						cover: (41 to: 45)
						declaredAt: (6 to: 10)
						by: aBook) ]
		thatSends: #addQuantity:ofBook:
		to: receiver1 ] value.! !
!Behavior method!
with: aCatalog
	#_coverageTracker4948464_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 _ [ | receiver1 |
	receiver1 _ #_coverageTracker4948464_
		coverAll:
			{18 to: 21}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker4948464_
		coverAll:
			{23 to: 25}
		evaluating: [ receiver1 new ]
		thatSends: #new
		to: receiver1 ] value.
	#_coverageTracker4948464_
		coverAll:
			{27 to: 41}
		evaluating: [
			receiver2 initializeWith:
				(#_coverageTracker4948464_
					cover: (43 to: 50)
					declaredAt: (7 to: 14)
					by: aCatalog) ]
		thatSends: #initializeWith:
		to: receiver2 ] value.! !
!Behavior method!
test05CartCanAddPositiveAmountOfSameBook
	| cart |
	#_coverageTracker4948495_ markAsExecuted.
	#_coverageTracker4948495_
		cover: (51 to: 54)
		declaredAt: (44 to: 47)
		by:
			(cart _ [ | receiver1 |
			receiver1 _ #_coverageTracker4948495_
				cover: (59 to: 74)
				declaredAt: (59 to: 74)
				by: testStoreObjects.
			#_coverageTracker4948495_
				coverAll:
					{76 to: 85}
				evaluating: [ receiver1 createCart ]
				thatSends: #createCart
				to: receiver1 ] value).
	[ | receiver9 |
	receiver9 _ #_coverageTracker4948495_
		coverAll:
			{89 to: 92}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker4948495_
		coverAll:
			{97 to: 103. 170 to: 175. 185 to: 200}
		evaluating: [
			receiver9
				should: [
					[ | receiver3 |
					receiver3 _ #_coverageTracker4948495_
						cover: (106 to: 109)
						declaredAt: (44 to: 47)
						by: cart.
					#_coverageTracker4948495_
						coverAll:
							{111 to: 122. 127 to: 133}
						evaluating: [
							receiver3
								addQuantity:
									(#_coverageTracker4948495_
										coverAll:
											{124 to: 125}
										byLiteralOrPseudoVariable: -1)
								ofBook:
									[ | receiver2 |
									receiver2 _ #_coverageTracker4948495_
										cover: (135 to: 150)
										declaredAt: (59 to: 74)
										by: testStoreObjects.
									#_coverageTracker4948495_
										coverAll:
											{152 to: 164}
										evaluating: [ receiver2 bookPublished ]
										thatSends: #bookPublished
										to: receiver2 ] value ]
						thatSends: #addQuantity:ofBook:
						to: receiver3 ] value ]
				raise:
					(#_coverageTracker4948495_
						coverAll:
							{177 to: 181}
						by: Error)
				withExceptionDo: [ :anError |
					[ | receiver6 |
					receiver6 _ #_coverageTracker4948495_
						coverAll:
							{216 to: 219}
						byLiteralOrPseudoVariable: self.
					#_coverageTracker4948495_
						coverAll:
							{221 to: 227. 249 to: 255}
						evaluating: [
							receiver6
								assert:
									[ | receiver4 |
									receiver4 _ #_coverageTracker4948495_
										cover: (229 to: 235)
										declaredAt: (204 to: 210)
										by: anError.
									#_coverageTracker4948495_
										coverAll:
											{237 to: 247}
										evaluating: [ receiver4 messageText ]
										thatSends: #messageText
										to: receiver4 ] value
								equals:
									[ | receiver5 |
									receiver5 _ #_coverageTracker4948495_
										cover: (257 to: 260)
										declaredAt: (44 to: 47)
										by: cart.
									#_coverageTracker4948495_
										coverAll:
											{262 to: 299}
										evaluating: [ receiver5 onlyCanAddPositiveQuantityErrorMessage ]
										thatSends: #onlyCanAddPositiveQuantityErrorMessage
										to: receiver5 ] value ]
						thatSends: #assert:equals:
						to: receiver6 ] value.
					[ | receiver8 |
					receiver8 _ #_coverageTracker4948495_
						coverAll:
							{305 to: 308}
						byLiteralOrPseudoVariable: self.
					#_coverageTracker4948495_
						coverAll:
							{310 to: 316}
						evaluating: [
							receiver8 assert:
								[ | receiver7 |
								receiver7 _ #_coverageTracker4948495_
									cover: (318 to: 321)
									declaredAt: (44 to: 47)
									by: cart.
								#_coverageTracker4948495_
									coverAll:
										{323 to: 329}
									evaluating: [ receiver7 isEmpty ]
									thatSends: #isEmpty
									to: receiver7 ] value ]
						thatSends: #assert:
						to: receiver8 ] value ]]
		thatSends: #should:raise:withExceptionDo:
		to: receiver9 ] value.! !
!Behavior method!
amountAddedOf: aBook
	#_coverageTracker4948557_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 _ #_coverageTracker4948557_
		cover: (25 to: 29)
		declaredAt: (25 to: 29)
		by: items.
	#_coverageTracker4948557_
		coverAll:
			{31 to: 44}
		evaluating: [
			receiver1 occurrencesOf:
				(#_coverageTracker4948557_
					cover: (46 to: 50)
					declaredAt: (16 to: 20)
					by: aBook) ]
		thatSends: #occurrencesOf:
		to: receiver1 ] value.! !
!Behavior method!
bookNotPublished
	#_coverageTracker4948584_ markAsExecuted.
	^ #_coverageTracker4948584_
		coverAll:
			{20 to: 49}
		byLiteralOrPseudoVariable: 'A book that is not published'.! !
!Behavior method!
contains: aBook
	#_coverageTracker4948610_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 _ #_coverageTracker4948610_
		cover: (20 to: 24)
		declaredAt: (20 to: 24)
		by: items.
	#_coverageTracker4948610_
		coverAll:
			{26 to: 34}
		evaluating: [
			receiver1 includes:
				(#_coverageTracker4948610_
					cover: (36 to: 40)
					declaredAt: (11 to: 15)
					by: aBook) ]
		thatSends: #includes:
		to: receiver1 ] value.! !
!Behavior method!
expiringOn: aMonthOfYear
	#_coverageTracker4948637_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 _ [ | receiver1 |
	receiver1 _ #_coverageTracker4948637_
		coverAll:
			{28 to: 31}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker4948637_
		coverAll:
			{33 to: 35}
		evaluating: [ receiver1 new ]
		thatSends: #new
		to: receiver1 ] value.
	#_coverageTracker4948637_
		coverAll:
			{37 to: 57}
		evaluating: [
			receiver2 initializeExpiringOn:
				(#_coverageTracker4948637_
					cover: (59 to: 70)
					declaredAt: (13 to: 24)
					by: aMonthOfYear) ]
		thatSends: #initializeExpiringOn:
		to: receiver2 ] value.! !
!Behavior method!
test01NewCartStartsEmpty
	#_coverageTracker4948658_ markAsExecuted.
	[ | receiver3 |
	receiver3 _ #_coverageTracker4948658_
		coverAll:
			{29 to: 32}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker4948658_
		coverAll:
			{34 to: 40}
		evaluating: [
			receiver3 assert:
				[ | receiver2 |
				receiver2 _ [ | receiver1 |
				receiver1 _ #_coverageTracker4948658_
					cover: (43 to: 58)
					declaredAt: (43 to: 58)
					by: testStoreObjects.
				#_coverageTracker4948658_
					coverAll:
						{60 to: 69}
					evaluating: [ receiver1 createCart ]
					thatSends: #createCart
					to: receiver1 ] value.
				#_coverageTracker4948658_
					coverAll:
						{72 to: 78}
					evaluating: [ receiver2 isEmpty ]
					thatSends: #isEmpty
					to: receiver2 ] value ]
		thatSends: #assert:
		to: receiver3 ] value.! !
!Behavior method!
initializeWith: aCatalog
	#_coverageTracker4948683_ markAsExecuted.
	#_coverageTracker4948683_
		cover: (28 to: 34)
		declaredAt: (28 to: 34)
		by:
			(catalog _ #_coverageTracker4948683_
				cover: (39 to: 46)
				declaredAt: (17 to: 24)
				by: aCatalog).
	#_coverageTracker4948683_
		cover: (50 to: 54)
		declaredAt: (50 to: 54)
		by:
			(items _ [ | receiver1 |
			receiver1 _ #_coverageTracker4948683_
				coverAll:
					{59 to: 61}
				by: Bag.
			#_coverageTracker4948683_
				coverAll:
					{63 to: 65}
				evaluating: [ receiver1 new ]
				thatSends: #new
				to: receiver1 ] value).! !
!Behavior method!
test03AddingBookThatBelongSiteMakesCartNotEmpty
	| cart |
	#_coverageTracker4948798_ markAsExecuted.
	#_coverageTracker4948798_
		cover: (58 to: 61)
		declaredAt: (51 to: 54)
		by:
			(cart _ [ | receiver1 |
			receiver1 _ #_coverageTracker4948798_
				cover: (66 to: 81)
				declaredAt: (66 to: 81)
				by: testStoreObjects.
			#_coverageTracker4948798_
				coverAll:
					{83 to: 92}
				evaluating: [ receiver1 createCart ]
				thatSends: #createCart
				to: receiver1 ] value).
	[ | receiver3 |
	receiver3 _ #_coverageTracker4948798_
		cover: (98 to: 101)
		declaredAt: (51 to: 54)
		by: cart.
	#_coverageTracker4948798_
		coverAll:
			{103 to: 114. 118 to: 124}
		evaluating: [
			receiver3
				addQuantity:
					(#_coverageTracker4948798_
						coverAll:
							{116 to: 116}
						byLiteralOrPseudoVariable: 1)
				ofBook:
					[ | receiver2 |
					receiver2 _ #_coverageTracker4948798_
						cover: (126 to: 141)
						declaredAt: (66 to: 81)
						by: testStoreObjects.
					#_coverageTracker4948798_
						coverAll:
							{143 to: 155}
						evaluating: [ receiver2 bookPublished ]
						thatSends: #bookPublished
						to: receiver2 ] value ]
		thatSends: #addQuantity:ofBook:
		to: receiver3 ] value.
	[ | receiver5 |
	receiver5 _ #_coverageTracker4948798_
		coverAll:
			{159 to: 162}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker4948798_
		coverAll:
			{164 to: 168}
		evaluating: [
			receiver5 deny:
				[ | receiver4 |
				receiver4 _ #_coverageTracker4948798_
					cover: (170 to: 173)
					declaredAt: (51 to: 54)
					by: cart.
				#_coverageTracker4948798_
					coverAll:
						{175 to: 181}
					evaluating: [ receiver4 isEmpty ]
					thatSends: #isEmpty
					to: receiver4 ] value ]
		thatSends: #deny:
		to: receiver5 ] value.! !
!Behavior method!
today
	#_coverageTracker4948843_ markAsExecuted.
	^ #_coverageTracker4948843_
		cover: (10 to: 14)
		declaredAt: (10 to: 14)
		by: today.! !
!Behavior method!
test06CartCanRememberNumberOfBooksAdded
	| cart |
	#_coverageTracker4948868_ markAsExecuted.
	#_coverageTracker4948868_
		cover: (51 to: 54)
		declaredAt: (43 to: 46)
		by:
			(cart _ [ | receiver1 |
			receiver1 _ #_coverageTracker4948868_
				cover: (59 to: 74)
				declaredAt: (59 to: 74)
				by: testStoreObjects.
			#_coverageTracker4948868_
				coverAll:
					{76 to: 85}
				evaluating: [ receiver1 createCart ]
				thatSends: #createCart
				to: receiver1 ] value).
	[ | receiver3 |
	receiver3 _ #_coverageTracker4948868_
		cover: (91 to: 94)
		declaredAt: (43 to: 46)
		by: cart.
	#_coverageTracker4948868_
		coverAll:
			{96 to: 107. 111 to: 117}
		evaluating: [
			receiver3
				addQuantity:
					(#_coverageTracker4948868_
						coverAll:
							{109 to: 109}
						byLiteralOrPseudoVariable: 2)
				ofBook:
					[ | receiver2 |
					receiver2 _ #_coverageTracker4948868_
						cover: (119 to: 134)
						declaredAt: (59 to: 74)
						by: testStoreObjects.
					#_coverageTracker4948868_
						coverAll:
							{136 to: 148}
						evaluating: [ receiver2 bookPublished ]
						thatSends: #bookPublished
						to: receiver2 ] value ]
		thatSends: #addQuantity:ofBook:
		to: receiver3 ] value.
	[ | receiver6 |
	receiver6 _ #_coverageTracker4948868_
		coverAll:
			{153 to: 156}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker4948868_
		coverAll:
			{158 to: 164. 168 to: 174}
		evaluating: [
			receiver6
				assert:
					(#_coverageTracker4948868_
						coverAll:
							{166 to: 166}
						byLiteralOrPseudoVariable: 2)
				equals:
					[ | receiver5 |
					receiver5 _ #_coverageTracker4948868_
						cover: (177 to: 180)
						declaredAt: (43 to: 46)
						by: cart.
					#_coverageTracker4948868_
						coverAll:
							{182 to: 195}
						evaluating: [
							receiver5 amountAddedOf:
								[ | receiver4 |
								receiver4 _ #_coverageTracker4948868_
									cover: (197 to: 212)
									declaredAt: (59 to: 74)
									by: testStoreObjects.
								#_coverageTracker4948868_
									coverAll:
										{214 to: 226}
									evaluating: [ receiver4 bookPublished ]
									thatSends: #bookPublished
									to: receiver4 ] value ]
						thatSends: #amountAddedOf:
						to: receiver5 ] value ]
		thatSends: #assert:equals:
		to: receiver6 ] value.! !
!Behavior method!
defaultCatalog
	#_coverageTracker4948906_ markAsExecuted.
	^ [ | receiver5 |
	receiver5 _ #_coverageTracker4948906_
		coverAll:
			{19 to: 28}
		by: Dictionary.
	#_coverageTracker4948906_
		coverAll:
			{30 to: 34. 61 to: 65}
		evaluating: [
			receiver5
				with:
					[ | receiver2 |
					receiver2 _ [ | receiver1 |
					receiver1 _ #_coverageTracker4948906_
						coverAll:
							{36 to: 39}
						byLiteralOrPseudoVariable: self.
					#_coverageTracker4948906_
						coverAll:
							{41 to: 53}
						evaluating: [ receiver1 bookPublished ]
						thatSends: #bookPublished
						to: receiver1 ] value.
					#_coverageTracker4948906_
						coverAll:
							{55 to: 56}
						evaluating: [
							receiver2 ->
								(#_coverageTracker4948906_
									coverAll:
										{58 to: 59}
									byLiteralOrPseudoVariable: 10) ]
						thatSends: #->
						to: receiver2 ] value
				with:
					[ | receiver4 |
					receiver4 _ [ | receiver3 |
					receiver3 _ #_coverageTracker4948906_
						coverAll:
							{67 to: 70}
						byLiteralOrPseudoVariable: self.
					#_coverageTracker4948906_
						coverAll:
							{72 to: 89}
						evaluating: [ receiver3 otherBookPublished ]
						thatSends: #otherBookPublished
						to: receiver3 ] value.
					#_coverageTracker4948906_
						coverAll:
							{91 to: 92}
						evaluating: [
							receiver4 ->
								(#_coverageTracker4948906_
									coverAll:
										{93 to: 94}
									byLiteralOrPseudoVariable: 20) ]
						thatSends: #->
						to: receiver4 ] value ]
		thatSends: #with:with:
		to: receiver5 ] value.! !
!Behavior method!
test08CartCanAddIntegerAmountOfBooks
	| cart |
	#_coverageTracker4948953_ markAsExecuted.
	#_coverageTracker4948953_
		cover: (48 to: 51)
		declaredAt: (40 to: 43)
		by:
			(cart _ [ | receiver1 |
			receiver1 _ #_coverageTracker4948953_
				cover: (56 to: 71)
				declaredAt: (56 to: 71)
				by: testStoreObjects.
			#_coverageTracker4948953_
				coverAll:
					{73 to: 82}
				evaluating: [ receiver1 createCart ]
				thatSends: #createCart
				to: receiver1 ] value).
	[ | receiver9 |
	receiver9 _ #_coverageTracker4948953_
		coverAll:
			{86 to: 89}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker4948953_
		coverAll:
			{94 to: 100. 167 to: 172. 182 to: 197}
		evaluating: [
			receiver9
				should: [
					[ | receiver3 |
					receiver3 _ #_coverageTracker4948953_
						cover: (103 to: 106)
						declaredAt: (40 to: 43)
						by: cart.
					#_coverageTracker4948953_
						coverAll:
							{108 to: 119. 125 to: 131}
						evaluating: [
							receiver3
								addQuantity:
									(#_coverageTracker4948953_
										coverAll:
											{121 to: 123}
										byLiteralOrPseudoVariable: 1.1)
								ofBook:
									[ | receiver2 |
									receiver2 _ #_coverageTracker4948953_
										cover: (133 to: 148)
										declaredAt: (56 to: 71)
										by: testStoreObjects.
									#_coverageTracker4948953_
										coverAll:
											{150 to: 162}
										evaluating: [ receiver2 bookPublished ]
										thatSends: #bookPublished
										to: receiver2 ] value ]
						thatSends: #addQuantity:ofBook:
						to: receiver3 ] value ]
				raise:
					(#_coverageTracker4948953_
						coverAll:
							{174 to: 178}
						by: Error)
				withExceptionDo: [ :anError |
					[ | receiver6 |
					receiver6 _ #_coverageTracker4948953_
						coverAll:
							{213 to: 216}
						byLiteralOrPseudoVariable: self.
					#_coverageTracker4948953_
						coverAll:
							{218 to: 224. 246 to: 252}
						evaluating: [
							receiver6
								assert:
									[ | receiver4 |
									receiver4 _ #_coverageTracker4948953_
										cover: (226 to: 232)
										declaredAt: (201 to: 207)
										by: anError.
									#_coverageTracker4948953_
										coverAll:
											{234 to: 244}
										evaluating: [ receiver4 messageText ]
										thatSends: #messageText
										to: receiver4 ] value
								equals:
									[ | receiver5 |
									receiver5 _ #_coverageTracker4948953_
										cover: (254 to: 257)
										declaredAt: (40 to: 43)
										by: cart.
									#_coverageTracker4948953_
										coverAll:
											{259 to: 295}
										evaluating: [ receiver5 onlyCanAddIntegerQuantityErrorMessage ]
										thatSends: #onlyCanAddIntegerQuantityErrorMessage
										to: receiver5 ] value ]
						thatSends: #assert:equals:
						to: receiver6 ] value.
					[ | receiver8 |
					receiver8 _ #_coverageTracker4948953_
						coverAll:
							{301 to: 304}
						byLiteralOrPseudoVariable: self.
					#_coverageTracker4948953_
						coverAll:
							{306 to: 312}
						evaluating: [
							receiver8 assert:
								[ | receiver7 |
								receiver7 _ #_coverageTracker4948953_
									cover: (314 to: 317)
									declaredAt: (40 to: 43)
									by: cart.
								#_coverageTracker4948953_
									coverAll:
										{319 to: 325}
									evaluating: [ receiver7 isEmpty ]
									thatSends: #isEmpty
									to: receiver7 ] value ]
						thatSends: #assert:
						to: receiver8 ] value ]]
		thatSends: #should:raise:withExceptionDo:
		to: receiver9 ] value.! !
!Behavior method!
expiredCreditCardErrorMessage
	#_coverageTracker4949006_ markAsExecuted.
	^ #_coverageTracker4949006_
		coverAll:
			{34 to: 54}
		byLiteralOrPseudoVariable: 'Invalid credit card'.! !
!Behavior method!
test07CartCanCheckIfHasAddedABook
	| cart |
	#_coverageTracker4949029_ markAsExecuted.
	#_coverageTracker4949029_
		cover: (44 to: 47)
		declaredAt: (37 to: 40)
		by:
			(cart _ [ | receiver1 |
			receiver1 _ #_coverageTracker4949029_
				cover: (52 to: 67)
				declaredAt: (52 to: 67)
				by: testStoreObjects.
			#_coverageTracker4949029_
				coverAll:
					{69 to: 78}
				evaluating: [ receiver1 createCart ]
				thatSends: #createCart
				to: receiver1 ] value).
	[ | receiver3 |
	receiver3 _ #_coverageTracker4949029_
		cover: (84 to: 87)
		declaredAt: (37 to: 40)
		by: cart.
	#_coverageTracker4949029_
		coverAll:
			{89 to: 100. 104 to: 110}
		evaluating: [
			receiver3
				addQuantity:
					(#_coverageTracker4949029_
						coverAll:
							{102 to: 102}
						byLiteralOrPseudoVariable: 2)
				ofBook:
					[ | receiver2 |
					receiver2 _ #_coverageTracker4949029_
						cover: (112 to: 127)
						declaredAt: (52 to: 67)
						by: testStoreObjects.
					#_coverageTracker4949029_
						coverAll:
							{129 to: 141}
						evaluating: [ receiver2 bookPublished ]
						thatSends: #bookPublished
						to: receiver2 ] value ]
		thatSends: #addQuantity:ofBook:
		to: receiver3 ] value.
	[ | receiver6 |
	receiver6 _ #_coverageTracker4949029_
		coverAll:
			{145 to: 148}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker4949029_
		coverAll:
			{150 to: 156}
		evaluating: [
			receiver6 assert:
				[ | receiver5 |
				receiver5 _ #_coverageTracker4949029_
					cover: (159 to: 162)
					declaredAt: (37 to: 40)
					by: cart.
				#_coverageTracker4949029_
					coverAll:
						{164 to: 172}
					evaluating: [
						receiver5 contains:
							[ | receiver4 |
							receiver4 _ #_coverageTracker4949029_
								cover: (174 to: 189)
								declaredAt: (52 to: 67)
								by: testStoreObjects.
							#_coverageTracker4949029_
								coverAll:
									{191 to: 203}
								evaluating: [ receiver4 bookPublished ]
								thatSends: #bookPublished
								to: receiver4 ] value ]
					thatSends: #contains:
					to: receiver5 ] value ]
		thatSends: #assert:
		to: receiver6 ] value.! !
!Behavior method!
createCart
	#_coverageTracker4949059_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 _ #_coverageTracker4949059_
		coverAll:
			{15 to: 18}
		by: Cart.
	#_coverageTracker4949059_
		coverAll:
			{20 to: 24}
		evaluating: [
			receiver2 with:
				[ | receiver1 |
				receiver1 _ #_coverageTracker4949059_
					coverAll:
						{26 to: 29}
					byLiteralOrPseudoVariable: self.
				#_coverageTracker4949059_
					coverAll:
						{31 to: 44}
					evaluating: [ receiver1 defaultCatalog ]
					thatSends: #defaultCatalog
					to: receiver1 ] value ]
		thatSends: #with:
		to: receiver2 ] value.! !
!Behavior method!
invalidBookErrorMessage
	#_coverageTracker4949086_ markAsExecuted.
	^ #_coverageTracker4949086_
		coverAll:
			{28 to: 53}
		byLiteralOrPseudoVariable: 'Book not belongs to site'.! !
!Behavior method!
test02CannotAddBookThatNotBelongSite
	| cart |
	#_coverageTracker4949117_ markAsExecuted.
	#_coverageTracker4949117_
		cover: (47 to: 50)
		declaredAt: (40 to: 43)
		by:
			(cart _ [ | receiver1 |
			receiver1 _ #_coverageTracker4949117_
				cover: (55 to: 70)
				declaredAt: (55 to: 70)
				by: testStoreObjects.
			#_coverageTracker4949117_
				coverAll:
					{72 to: 81}
				evaluating: [ receiver1 createCart ]
				thatSends: #createCart
				to: receiver1 ] value).
	[ | receiver9 |
	receiver9 _ #_coverageTracker4949117_
		coverAll:
			{87 to: 90}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker4949117_
		coverAll:
			{95 to: 101. 171 to: 176. 186 to: 201}
		evaluating: [
			receiver9
				should: [
					[ | receiver3 |
					receiver3 _ #_coverageTracker4949117_
						cover: (104 to: 107)
						declaredAt: (40 to: 43)
						by: cart.
					#_coverageTracker4949117_
						coverAll:
							{109 to: 120. 124 to: 130}
						evaluating: [
							receiver3
								addQuantity:
									(#_coverageTracker4949117_
										coverAll:
											{122 to: 122}
										byLiteralOrPseudoVariable: 1)
								ofBook:
									[ | receiver2 |
									receiver2 _ #_coverageTracker4949117_
										cover: (132 to: 147)
										declaredAt: (55 to: 70)
										by: testStoreObjects.
									#_coverageTracker4949117_
										coverAll:
											{149 to: 164}
										evaluating: [ receiver2 bookNotPublished ]
										thatSends: #bookNotPublished
										to: receiver2 ] value ]
						thatSends: #addQuantity:ofBook:
						to: receiver3 ] value ]
				raise:
					(#_coverageTracker4949117_
						coverAll:
							{178 to: 182}
						by: Error)
				withExceptionDo: [ :anError |
					[ | receiver6 |
					receiver6 _ #_coverageTracker4949117_
						coverAll:
							{219 to: 222}
						byLiteralOrPseudoVariable: self.
					#_coverageTracker4949117_
						coverAll:
							{224 to: 230. 252 to: 258}
						evaluating: [
							receiver6
								assert:
									[ | receiver4 |
									receiver4 _ #_coverageTracker4949117_
										cover: (232 to: 238)
										declaredAt: (205 to: 211)
										by: anError.
									#_coverageTracker4949117_
										coverAll:
											{240 to: 250}
										evaluating: [ receiver4 messageText ]
										thatSends: #messageText
										to: receiver4 ] value
								equals:
									[ | receiver5 |
									receiver5 _ #_coverageTracker4949117_
										cover: (260 to: 263)
										declaredAt: (40 to: 43)
										by: cart.
									#_coverageTracker4949117_
										coverAll:
											{265 to: 287}
										evaluating: [ receiver5 invalidBookErrorMessage ]
										thatSends: #invalidBookErrorMessage
										to: receiver5 ] value ]
						thatSends: #assert:equals:
						to: receiver6 ] value.
					[ | receiver8 |
					receiver8 _ #_coverageTracker4949117_
						coverAll:
							{293 to: 296}
						byLiteralOrPseudoVariable: self.
					#_coverageTracker4949117_
						coverAll:
							{298 to: 304}
						evaluating: [
							receiver8 assert:
								[ | receiver7 |
								receiver7 _ #_coverageTracker4949117_
									cover: (306 to: 309)
									declaredAt: (40 to: 43)
									by: cart.
								#_coverageTracker4949117_
									coverAll:
										{311 to: 317}
									evaluating: [ receiver7 isEmpty ]
									thatSends: #isEmpty
									to: receiver7 ] value ]
						thatSends: #assert:
						to: receiver8 ] value ]]
		thatSends: #should:raise:withExceptionDo:
		to: receiver9 ] value.! !
!Behavior method!
initializeExpiringOn: aMonthOfYear
	#_coverageTracker4949167_ markAsExecuted.
	#_coverageTracker4949167_
		cover: (38 to: 47)
		declaredAt: (38 to: 47)
		by:
			(expiration _ #_coverageTracker4949167_
				cover: (52 to: 63)
				declaredAt: (23 to: 34)
				by: aMonthOfYear).! !
!Behavior method!
initialize
	#_coverageTracker4949191_ markAsExecuted.
	#_coverageTracker4949191_
		cover: (14 to: 18)
		declaredAt: (14 to: 18)
		by:
			(today _ [ | receiver1 |
			receiver1 _ #_coverageTracker4949191_
				coverAll:
					{23 to: 33}
				by: DateAndTime.
			#_coverageTracker4949191_
				coverAll:
					{35 to: 37}
				evaluating: [ receiver1 now ]
				thatSends: #now
				to: receiver1 ] value).! !
!Behavior method!
test04CartCanAddAmountOfSameBook
	| cart |
	#_coverageTracker4949217_ markAsExecuted.
	#_coverageTracker4949217_
		cover: (43 to: 46)
		declaredAt: (36 to: 39)
		by:
			(cart _ [ | receiver1 |
			receiver1 _ #_coverageTracker4949217_
				cover: (51 to: 66)
				declaredAt: (51 to: 66)
				by: testStoreObjects.
			#_coverageTracker4949217_
				coverAll:
					{68 to: 77}
				evaluating: [ receiver1 createCart ]
				thatSends: #createCart
				to: receiver1 ] value).
	[ | receiver3 |
	receiver3 _ #_coverageTracker4949217_
		cover: (83 to: 86)
		declaredAt: (36 to: 39)
		by: cart.
	#_coverageTracker4949217_
		coverAll:
			{88 to: 99. 103 to: 109}
		evaluating: [
			receiver3
				addQuantity:
					(#_coverageTracker4949217_
						coverAll:
							{101 to: 101}
						byLiteralOrPseudoVariable: 2)
				ofBook:
					[ | receiver2 |
					receiver2 _ #_coverageTracker4949217_
						cover: (111 to: 126)
						declaredAt: (51 to: 66)
						by: testStoreObjects.
					#_coverageTracker4949217_
						coverAll:
							{128 to: 140}
						evaluating: [ receiver2 bookPublished ]
						thatSends: #bookPublished
						to: receiver2 ] value ]
		thatSends: #addQuantity:ofBook:
		to: receiver3 ] value.
	[ | receiver5 |
	receiver5 _ #_coverageTracker4949217_
		coverAll:
			{144 to: 147}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker4949217_
		coverAll:
			{149 to: 153}
		evaluating: [
			receiver5 deny:
				[ | receiver4 |
				receiver4 _ #_coverageTracker4949217_
					cover: (155 to: 158)
					declaredAt: (36 to: 39)
					by: cart.
				#_coverageTracker4949217_
					coverAll:
						{160 to: 166}
					evaluating: [ receiver4 isEmpty ]
					thatSends: #isEmpty
					to: receiver4 ] value ]
		thatSends: #deny:
		to: receiver5 ] value.! !
!Behavior method!
assertValidQuantity: anAmount
	#_coverageTracker4949255_ markAsExecuted.
	[ | receiver4 |
	receiver4 _ [ | receiver1 |
	receiver1 _ #_coverageTracker4949255_
		cover: (33 to: 40)
		declaredAt: (22 to: 29)
		by: anAmount.
	#_coverageTracker4949255_
		coverAll:
			{42 to: 50}
		evaluating: [ receiver1 isInteger ]
		thatSends: #isInteger
		to: receiver1 ] value.
	#_coverageTracker4949255_
		coverAll:
			{53 to: 60}
		evaluating: [
			receiver4 ifFalse: [
				[ | receiver3 |
				receiver3 _ #_coverageTracker4949255_
					coverAll:
						{63 to: 66}
					byLiteralOrPseudoVariable: self.
				#_coverageTracker4949255_
					coverAll:
						{68 to: 73}
					evaluating: [
						receiver3 error:
							[ | receiver2 |
							receiver2 _ #_coverageTracker4949255_
								coverAll:
									{75 to: 78}
								byLiteralOrPseudoVariable: self.
							#_coverageTracker4949255_
								coverAll:
									{80 to: 116}
								evaluating: [ receiver2 onlyCanAddIntegerQuantityErrorMessage ]
								thatSends: #onlyCanAddIntegerQuantityErrorMessage
								to: receiver2 ] value ]
					thatSends: #error:
					to: receiver3 ] value ]]
		thatSends: #ifFalse:
		to: receiver4 ] value.
	[ | receiver8 |
	receiver8 _ [ | receiver5 |
	receiver5 _ #_coverageTracker4949255_
		cover: (122 to: 129)
		declaredAt: (22 to: 29)
		by: anAmount.
	#_coverageTracker4949255_
		coverAll:
			{131 to: 146}
		evaluating: [ receiver5 strictlyPositive ]
		thatSends: #strictlyPositive
		to: receiver5 ] value.
	#_coverageTracker4949255_
		coverAll:
			{150 to: 157}
		evaluating: [
			receiver8 ifFalse: [
				[ | receiver7 |
				receiver7 _ #_coverageTracker4949255_
					coverAll:
						{160 to: 163}
					byLiteralOrPseudoVariable: self.
				#_coverageTracker4949255_
					coverAll:
						{165 to: 170}
					evaluating: [
						receiver7 error:
							[ | receiver6 |
							receiver6 _ #_coverageTracker4949255_
								coverAll:
									{172 to: 175}
								byLiteralOrPseudoVariable: self.
							#_coverageTracker4949255_
								coverAll:
									{177 to: 214}
								evaluating: [ receiver6 onlyCanAddPositiveQuantityErrorMessage ]
								thatSends: #onlyCanAddPositiveQuantityErrorMessage
								to: receiver6 ] value ]
					thatSends: #error:
					to: receiver7 ] value ]]
		thatSends: #ifFalse:
		to: receiver8 ] value.! !
!Behavior method!
onlyCanAddIntegerQuantityErrorMessage
	#_coverageTracker4949288_ markAsExecuted.
	^ #_coverageTracker4949288_
		coverAll:
			{41 to: 70}
		byLiteralOrPseudoVariable: 'Amount only can be a integer'.! !
!Behavior method!
isExpiredOn: aDate
	#_coverageTracker4949310_ markAsExecuted.
	^ [ | receiver6 |
	receiver6 _ [ | receiver1 |
	receiver1 _ #_coverageTracker4949310_
		cover: (22 to: 31)
		declaredAt: (22 to: 31)
		by: expiration.
	#_coverageTracker4949310_
		coverAll:
			{33 to: 37}
		evaluating: [ receiver1 start ]
		thatSends: #start
		to: receiver1 ] value.
	#_coverageTracker4949310_
		coverAll:
			{39 to: 39}
		evaluating: [
			receiver6 <
				[ | receiver5 |
				receiver5 _ [ | receiver4 |
				receiver4 _ #_coverageTracker4949310_
					coverAll:
						{42 to: 46}
					by: Month.
				#_coverageTracker4949310_
					coverAll:
						{48 to: 53. 72 to: 76}
					evaluating: [
						receiver4
							month:
								[ | receiver2 |
								receiver2 _ #_coverageTracker4949310_
									cover: (55 to: 59)
									declaredAt: (14 to: 18)
									by: aDate.
								#_coverageTracker4949310_
									coverAll:
										{61 to: 70}
									evaluating: [ receiver2 monthIndex ]
									thatSends: #monthIndex
									to: receiver2 ] value
							year:
								[ | receiver3 |
								receiver3 _ #_coverageTracker4949310_
									cover: (78 to: 82)
									declaredAt: (14 to: 18)
									by: aDate.
								#_coverageTracker4949310_
									coverAll:
										{84 to: 93}
									evaluating: [ receiver3 yearNumber ]
									thatSends: #yearNumber
									to: receiver3 ] value ]
					thatSends: #month:year:
					to: receiver4 ] value.
				#_coverageTracker4949310_
					coverAll:
						{96 to: 100}
					evaluating: [ receiver5 start ]
					thatSends: #start
					to: receiver5 ] value ]
		thatSends: #<
		to: receiver6 ] value.! !
!Behavior method!
addQuantity: anAmount ofBook: aBook
	#_coverageTracker4949357_ markAsExecuted.
	[ | receiver1 |
	receiver1 _ #_coverageTracker4949357_
		coverAll:
			{39 to: 42}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker4949357_
		coverAll:
			{44 to: 63}
		evaluating: [
			receiver1 assertValidQuantity:
				(#_coverageTracker4949357_
					cover: (65 to: 72)
					declaredAt: (14 to: 21)
					by: anAmount) ]
		thatSends: #assertValidQuantity:
		to: receiver1 ] value.
	[ | receiver2 |
	receiver2 _ #_coverageTracker4949357_
		coverAll:
			{76 to: 79}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker4949357_
		coverAll:
			{81 to: 96}
		evaluating: [
			receiver2 assertValidBook:
				(#_coverageTracker4949357_
					cover: (98 to: 102)
					declaredAt: (31 to: 35)
					by: aBook) ]
		thatSends: #assertValidBook:
		to: receiver2 ] value.
	[ | receiver3 |
	receiver3 _ #_coverageTracker4949357_
		cover: (107 to: 111)
		declaredAt: (107 to: 111)
		by: items.
	#_coverageTracker4949357_
		coverAll:
			{113 to: 116. 124 to: 139}
		evaluating: [
			receiver3
				add:
					(#_coverageTracker4949357_
						cover: (118 to: 122)
						declaredAt: (31 to: 35)
						by: aBook)
				withOccurrences:
					(#_coverageTracker4949357_
						cover: (141 to: 148)
						declaredAt: (14 to: 21)
						by: anAmount) ]
		thatSends: #add:withOccurrences:
		to: receiver3 ] value.! !
!Behavior method!
bookPublished
	#_coverageTracker4949384_ markAsExecuted.
	^ #_coverageTracker4949384_
		coverAll:
			{17 to: 42}
		byLiteralOrPseudoVariable: 'A book that is published'.! !
!Behavior method!
onlyCanAddPositiveQuantityErrorMessage
	#_coverageTracker4949399_ markAsExecuted.
	^ #_coverageTracker4949399_
		coverAll:
			{42 to: 84}
		byLiteralOrPseudoVariable: 'Cant add zero or negative amount of books'.! !
!Behavior method!
checkout: aCart charging: aCreditCard on: aDate
	#_coverageTracker4949423_ markAsExecuted.
	[ | receiver4 |
	receiver4 _ [ | receiver1 |
	receiver1 _ #_coverageTracker4949423_
		cover: (51 to: 55)
		declaredAt: (11 to: 15)
		by: aCart.
	#_coverageTracker4949423_
		coverAll:
			{57 to: 63}
		evaluating: [ receiver1 isEmpty ]
		thatSends: #isEmpty
		to: receiver1 ] value.
	#_coverageTracker4949423_
		coverAll:
			{66 to: 72}
		evaluating: [
			receiver4 ifTrue: [
				[ | receiver3 |
				receiver3 _ #_coverageTracker4949423_
					coverAll:
						{75 to: 78}
					byLiteralOrPseudoVariable: self.
				#_coverageTracker4949423_
					coverAll:
						{80 to: 85}
					evaluating: [
						receiver3 error:
							[ | receiver2 |
							receiver2 _ #_coverageTracker4949423_
								coverAll:
									{87 to: 90}
								byLiteralOrPseudoVariable: self.
							#_coverageTracker4949423_
								coverAll:
									{92 to: 112}
								evaluating: [ receiver2 emptyCartErrorMessage ]
								thatSends: #emptyCartErrorMessage
								to: receiver2 ] value ]
					thatSends: #error:
					to: receiver3 ] value ]]
		thatSends: #ifTrue:
		to: receiver4 ] value.
	[ | receiver8 |
	receiver8 _ [ | receiver5 |
	receiver5 _ #_coverageTracker4949423_
		cover: (118 to: 128)
		declaredAt: (27 to: 37)
		by: aCreditCard.
	#_coverageTracker4949423_
		coverAll:
			{130 to: 141}
		evaluating: [
			receiver5 isExpiredOn:
				(#_coverageTracker4949423_
					cover: (143 to: 147)
					declaredAt: (43 to: 47)
					by: aDate) ]
		thatSends: #isExpiredOn:
		to: receiver5 ] value.
	#_coverageTracker4949423_
		coverAll:
			{150 to: 156}
		evaluating: [
			receiver8 ifTrue: [
				[ | receiver7 |
				receiver7 _ #_coverageTracker4949423_
					coverAll:
						{159 to: 162}
					byLiteralOrPseudoVariable: self.
				#_coverageTracker4949423_
					coverAll:
						{164 to: 169}
					evaluating: [
						receiver7 error:
							[ | receiver6 |
							receiver6 _ #_coverageTracker4949423_
								coverAll:
									{171 to: 174}
								byLiteralOrPseudoVariable: self.
							#_coverageTracker4949423_
								coverAll:
									{176 to: 204}
								evaluating: [ receiver6 expiredCreditCardErrorMessage ]
								thatSends: #expiredCreditCardErrorMessage
								to: receiver6 ] value ]
					thatSends: #error:
					to: receiver7 ] value ]]
		thatSends: #ifTrue:
		to: receiver8 ] value.
	^ [ | receiver9 |
	receiver9 _ #_coverageTracker4949423_
		cover: (211 to: 215)
		declaredAt: (11 to: 15)
		by: aCart.
	#_coverageTracker4949423_
		coverAll:
			{217 to: 221}
		evaluating: [ receiver9 total ]
		thatSends: #total
		to: receiver9 ] value.! !
!Behavior method!
otherBookPublished
	#_coverageTracker4949465_ markAsExecuted.
	^ #_coverageTracker4949465_
		coverAll:
			{22 to: 51}
		byLiteralOrPseudoVariable: 'Other book that is published'.! !
!Behavior method!
notExpiredCreditCard
	#_coverageTracker4949491_ markAsExecuted.
	^ [ | receiver5 |
	receiver5 _ #_coverageTracker4949491_
		coverAll:
			{24 to: 33}
		by: CreditCard.
	#_coverageTracker4949491_
		coverAll:
			{35 to: 45}
		evaluating: [
			receiver5 expiringOn:
				[ | receiver4 |
				receiver4 _ #_coverageTracker4949491_
					coverAll:
						{48 to: 52}
					by: Month.
				#_coverageTracker4949491_
					coverAll:
						{54 to: 59. 78 to: 82}
					evaluating: [
						receiver4
							month:
								[ | receiver1 |
								receiver1 _ #_coverageTracker4949491_
									cover: (61 to: 65)
									declaredAt: (61 to: 65)
									by: today.
								#_coverageTracker4949491_
									coverAll:
										{67 to: 76}
									evaluating: [ receiver1 monthIndex ]
									thatSends: #monthIndex
									to: receiver1 ] value
							year:
								[ | receiver3 |
								receiver3 _ [ | receiver2 |
								receiver2 _ #_coverageTracker4949491_
									cover: (84 to: 88)
									declaredAt: (61 to: 65)
									by: today.
								#_coverageTracker4949491_
									coverAll:
										{90 to: 99}
									evaluating: [ receiver2 yearNumber ]
									thatSends: #yearNumber
									to: receiver2 ] value.
								#_coverageTracker4949491_
									coverAll:
										{101 to: 101}
									evaluating: [
										receiver3 +
											(#_coverageTracker4949491_
												coverAll:
													{103 to: 103}
												byLiteralOrPseudoVariable: 1) ]
									thatSends: #+
									to: receiver3 ] value ]
					thatSends: #month:year:
					to: receiver4 ] value ]
		thatSends: #expiringOn:
		to: receiver5 ] value.! !
!Behavior method!
expiredCreditCard
	#_coverageTracker4949521_ markAsExecuted.
	^ [ | receiver5 |
	receiver5 _ #_coverageTracker4949521_
		coverAll:
			{22 to: 31}
		by: CreditCard.
	#_coverageTracker4949521_
		coverAll:
			{33 to: 43}
		evaluating: [
			receiver5 expiringOn:
				[ | receiver4 |
				receiver4 _ #_coverageTracker4949521_
					coverAll:
						{46 to: 50}
					by: Month.
				#_coverageTracker4949521_
					coverAll:
						{52 to: 57. 76 to: 80}
					evaluating: [
						receiver4
							month:
								[ | receiver1 |
								receiver1 _ #_coverageTracker4949521_
									cover: (59 to: 63)
									declaredAt: (59 to: 63)
									by: today.
								#_coverageTracker4949521_
									coverAll:
										{65 to: 74}
									evaluating: [ receiver1 monthIndex ]
									thatSends: #monthIndex
									to: receiver1 ] value
							year:
								[ | receiver3 |
								receiver3 _ [ | receiver2 |
								receiver2 _ #_coverageTracker4949521_
									cover: (82 to: 86)
									declaredAt: (59 to: 63)
									by: today.
								#_coverageTracker4949521_
									coverAll:
										{88 to: 97}
									evaluating: [ receiver2 yearNumber ]
									thatSends: #yearNumber
									to: receiver2 ] value.
								#_coverageTracker4949521_
									coverAll:
										{99 to: 99}
									evaluating: [
										receiver3 -
											(#_coverageTracker4949521_
												coverAll:
													{101 to: 101}
												byLiteralOrPseudoVariable: 1) ]
									thatSends: #-
									to: receiver3 ] value ]
					thatSends: #month:year:
					to: receiver4 ] value ]
		thatSends: #expiringOn:
		to: receiver5 ] value.! !
!Behavior method!
total
	#_coverageTracker4949565_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 _ #_coverageTracker4949565_
		cover: (10 to: 14)
		declaredAt: (10 to: 14)
		by: items.
	#_coverageTracker4949565_
		coverAll:
			{16 to: 19}
		evaluating: [
			receiver2 sum: [ :anItem |
				[ | receiver1 |
				receiver1 _ #_coverageTracker4949565_
					cover: (32 to: 38)
					declaredAt: (32 to: 38)
					by: catalog.
				#_coverageTracker4949565_
					coverAll:
						{40 to: 42}
					evaluating: [
						receiver1 at:
							(#_coverageTracker4949565_
								cover: (44 to: 49)
								declaredAt: (23 to: 28)
								by: anItem) ]
					thatSends: #at:
					to: receiver1 ] value ]]
		thatSends: #sum:
		to: receiver2 ] value.! !
!Behavior method!
assertValidBook: aBook
	#_coverageTracker4949589_ markAsExecuted.
	[ | receiver4 |
	receiver4 _ [ | receiver1 |
	receiver1 _ #_coverageTracker4949589_
		cover: (26 to: 32)
		declaredAt: (26 to: 32)
		by: catalog.
	#_coverageTracker4949589_
		coverAll:
			{34 to: 45}
		evaluating: [
			receiver1 includesKey:
				(#_coverageTracker4949589_
					cover: (47 to: 51)
					declaredAt: (18 to: 22)
					by: aBook) ]
		thatSends: #includesKey:
		to: receiver1 ] value.
	#_coverageTracker4949589_
		coverAll:
			{54 to: 61}
		evaluating: [
			receiver4 ifFalse: [
				[ | receiver3 |
				receiver3 _ #_coverageTracker4949589_
					coverAll:
						{64 to: 67}
					byLiteralOrPseudoVariable: self.
				#_coverageTracker4949589_
					coverAll:
						{69 to: 74}
					evaluating: [
						receiver3 error:
							[ | receiver2 |
							receiver2 _ #_coverageTracker4949589_
								coverAll:
									{76 to: 79}
								byLiteralOrPseudoVariable: self.
							#_coverageTracker4949589_
								coverAll:
									{81 to: 103}
								evaluating: [ receiver2 invalidBookErrorMessage ]
								thatSends: #invalidBookErrorMessage
								to: receiver2 ] value ]
					thatSends: #error:
					to: receiver3 ] value ]]
		thatSends: #ifFalse:
		to: receiver4 ] value.! !
!Behavior method!
emptyCartErrorMessage
	#_coverageTracker4949613_ markAsExecuted.
	^ #_coverageTracker4949613_
		coverAll:
			{26 to: 56}
		byLiteralOrPseudoVariable: 'Cannot checkout an empty cart'.! !
!Behavior method!
setUp
	#_coverageTracker4949637_ markAsExecuted.
	#_coverageTracker4949637_
		cover: (8 to: 23)
		declaredAt: (8 to: 23)
		by:
			(testStoreObjects _ [ | receiver1 |
			receiver1 _ #_coverageTracker4949637_
				coverAll:
					{28 to: 43}
				by: StoreTestObjects.
			#_coverageTracker4949637_
				coverAll:
					{45 to: 47}
				evaluating: [ receiver1 new ]
				thatSends: #new
				to: receiver1 ] value).! !
!Behavior method!
isEmpty
	#_coverageTracker4949661_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 _ #_coverageTracker4949661_
		cover: (11 to: 15)
		declaredAt: (11 to: 15)
		by: items.
	#_coverageTracker4949661_
		coverAll:
			{17 to: 23}
		evaluating: [ receiver1 isEmpty ]
		thatSends: #isEmpty
		to: receiver1 ] value.! !

!testRun: #CashierTest #test04CheckoutFailWhenCreditCardIsExpired stamp: 'DA 6/9/2023 17:02:36'!
ERROR!

!testRun: #CashierTest #test04CheckoutFailWhenCreditCardIsExpired stamp: 'DA 6/9/2023 17:02:36'!
ERROR!

!testRun: #CashierTest #test04CheckoutFailWhenCreditCardIsExpired stamp: 'DA 6/9/2023 17:02:40'!
ERROR!

!testRun: #CashierTest #test04CheckoutFailWhenCreditCardIsExpired stamp: 'DA 6/9/2023 17:02:41'!
ERROR!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'DA 6/9/2023 17:02:46' prior: 50637382!
test04CheckoutFailWhenCreditCardIsExpired
	|cart cashier |
	
	cart := testStoreObjects createCart.
	cart addQuantity: 2 ofBook: testStoreObjects bookPublished.
	
	cashier := Cashier new.

	self 
		should: [cashier checkout: cart charging: testStoreObjects expiredCreditCard on: testStoreObjects today]
		raise: Error
		withExceptionDo: [:anError|
			self assert: anError messageText equals: cashier expiredCreditCardErrorMessage.]! !

!testRun: #CashierTest #test04CheckoutFailWhenCreditCardIsExpired stamp: 'DA 6/9/2023 17:02:49'!
PASSED!

!testRun: #CashierTest #test01CannotCheckoutAnEmptyCart stamp: 'DA 6/9/2023 17:02:49'!
PASSED!

!testRun: #CashierTest #test02SuccesfullCheckoutCartWithOneProduct stamp: 'DA 6/9/2023 17:02:49'!
PASSED!

!testRun: #CashierTest #test03SuccesfullCheckoutCartWithProducts stamp: 'DA 6/9/2023 17:02:49'!
PASSED!

!testRun: #CashierTest #test04CheckoutFailWhenCreditCardIsExpired stamp: 'DA 6/9/2023 17:02:49'!
PASSED!

!testRun: #CashierTest #test05CheckoutFailWhenCreditCardWithEmptyBalance stamp: 'DA 6/9/2023 17:02:49'!
PASSED!

!testRun: #CashierTest #test06CheckoutFailWhenCreditCardFraud stamp: 'DA 6/9/2023 17:02:49'!
PASSED!

!testRun: #CashierTest #test07SucessfullSaleIfEverythingIsOk stamp: 'DA 6/9/2023 17:02:49'!
PASSED!

----SNAPSHOT----(9 June 2023 17:02:57) CuisUniversity-5832.image priorSource: 9733747!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'DA 6/9/2023 17:04:26' prior: 50637274!
test01CannotCheckoutAnEmptyCart
	"salesBook registrando las ventas, un cajero por cada venta
	asercion de mensaje de error con chequeo de invariante"
	|cart cashier salesBook|
	
	cart := testStoreObjects createCart.
	cashier := Cashier new.
	salesBook := OrderedCollection new.
	
	self 
		should: [
			cashier checkout: cart
				charging: testStoreObjects notExpiredCreditCard
				on: testStoreObjects today]  
		raise: Error
		withExceptionDo: [:anError|
			self assert: anError messageText equals: cashier emptyCartErrorMessage.
			]
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'DA 6/9/2023 17:04:36' prior: 50638805!
test01CannotCheckoutAnEmptyCart
	"salesBook registrando las ventas, un cajero por cada venta
	asercion de mensaje de error con chequeo de invariante"
	|cart cashier salesBook|
	
	cart := testStoreObjects createCart.
	cashier := Cashier new.
	salesBook := OrderedCollection new.
	
	self 
		should: [
			cashier checkout: cart
				charging: testStoreObjects notExpiredCreditCard
				on: testStoreObjects today]  
		raise: Error
		withExceptionDo: [:anError|
			self assert: anError messageText equals: cashier emptyCartErrorMessage.
			self assert: salesBook isEmpty.
			]
	! !

!testRun: #CashierTest #test01CannotCheckoutAnEmptyCart stamp: 'DA 6/9/2023 17:04:37'!
PASSED!

!testRun: #CashierTest #test01CannotCheckoutAnEmptyCart stamp: 'DA 6/9/2023 17:04:37'!
PASSED!

!testRun: #CashierTest #test02SuccesfullCheckoutCartWithOneProduct stamp: 'DA 6/9/2023 17:04:37'!
PASSED!

!testRun: #CashierTest #test03SuccesfullCheckoutCartWithProducts stamp: 'DA 6/9/2023 17:04:37'!
PASSED!

!testRun: #CashierTest #test04CheckoutFailWhenCreditCardIsExpired stamp: 'DA 6/9/2023 17:04:37'!
PASSED!

!testRun: #CashierTest #test05CheckoutFailWhenCreditCardWithEmptyBalance stamp: 'DA 6/9/2023 17:04:37'!
PASSED!

!testRun: #CashierTest #test06CheckoutFailWhenCreditCardFraud stamp: 'DA 6/9/2023 17:04:37'!
PASSED!

!testRun: #CashierTest #test07SucessfullSaleIfEverythingIsOk stamp: 'DA 6/9/2023 17:04:37'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'DA 6/9/2023 17:04:49' prior: 50637240!
test02SuccesfullCheckoutCartWithOneProduct
	"checkout: cart charging cc on: date registeringOn: salesbook initializer of cashier, mensaje checkout "
	|cart salesBook|
	cart := testStoreObjects createCart.
	cart addQuantity: 1 ofBook: testStoreObjects bookPublished.
	
	self assert: (Cashier new checkout: cart charging: testStoreObjects notExpiredCreditCard on: testStoreObjects today) = 10.  
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'DA 6/9/2023 17:07:30' prior: 50638872!
test02SuccesfullCheckoutCartWithOneProduct
	"checkout: cart charging cc on: date registeringOn: salesbook initializer of cashier, mensaje checkout "
	|cart cashier salesBook|
	cart := testStoreObjects createCart.
	cart addQuantity: 1 ofBook: testStoreObjects bookPublished.
	salesBook := OrderedCollection new.
	
	cashier := Cashier new checkout: cart charging: testStoreObjects notExpiredCreditCard on: testStoreObjects today.
	
	self assert: 10.  
	
	self assert: salesBook size = 1.
	self assert: salesBook first total.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'DA 6/9/2023 17:08:18' prior: 50638888!
test02SuccesfullCheckoutCartWithOneProduct
	"checkout: cart charging cc on: date registeringOn: salesbook initializer of cashier, mensaje checkout "
	|cart total salesBook|
	cart := testStoreObjects createCart.
	cart addQuantity: 1 ofBook: testStoreObjects bookPublished.
	salesBook := OrderedCollection new.
	
	total := Cashier new checkout: cart charging: testStoreObjects notExpiredCreditCard on: testStoreObjects today.
	
	self assert: total = 10.  
	
	self assert: salesBook size = 1.
	self assert: salesBook first total = total.! !

!testRun: #CashierTest #test02SuccesfullCheckoutCartWithOneProduct stamp: 'DA 6/9/2023 17:08:19'!
FAILURE!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'DA 6/9/2023 17:08:49' prior: 50638908!
test02SuccesfullCheckoutCartWithOneProduct
	"checkout: cart charging cc on: date registeringOn: salesbook initializer of cashier, mensaje checkout "
	|cart total salesBook cashier |
	cart := testStoreObjects createCart.
	cart addQuantity: 1 ofBook: testStoreObjects bookPublished.
	salesBook := OrderedCollection new.
	cashier := Cashier new.
	
	total := cashier checkout: cart charging: testStoreObjects notExpiredCreditCard on: testStoreObjects today.
	
	self assert: total = 10.  
	
	self assert: salesBook size = 1.
	self assert: salesBook first total = total.! !

!testRun: #CashierTest #test02SuccesfullCheckoutCartWithOneProduct stamp: 'DA 6/9/2023 17:08:56'!
FAILURE!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'DA 6/9/2023 17:09:17' prior: 50638932!
test02SuccesfullCheckoutCartWithOneProduct
	"checkout: cart charging cc on: date registeringOn: salesbook initializer of cashier, mensaje checkout "
	|cart total salesBook |
	cart := testStoreObjects createCart.
	cart addQuantity: 1 ofBook: testStoreObjects bookPublished.
	salesBook := OrderedCollection new.
	
	total := Cashier new checkout: cart charging: testStoreObjects notExpiredCreditCard on: testStoreObjects today.
	
	self assert: total = 10.  
	
	self assert: salesBook size = 1.
	self assert: salesBook first total = total.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'DA 6/9/2023 17:09:22' prior: 50638957!
test02SuccesfullCheckoutCartWithOneProduct
	"checkout: cart charging cc on: date registeringOn: salesbook initializer of cashier, mensaje checkout "
	|cart total salesBook |
	cart := testStoreObjects createCart.
	cart addQuantity: 1 ofBook: testStoreObjects bookPublished.
	salesBook := OrderedCollection new.
	
	total := Cashier new checkout: cart charging: testStoreObjects notExpiredCreditCard on: testStoreObjects today.
	
	self assert: total = 10.  
	self assert: salesBook size = 1.
	self assert: salesBook first total = total.! !
!Cashier methodsFor: 'category-name' stamp: 'DA 6/9/2023 17:10:22'!
checkout: aCart charging: aCreditCard on: aDate registerIn: aSalesBook
	(aCart isEmpty) ifTrue: [self error: self emptyCartErrorMessage].
	(aCreditCard isExpiredOn: aDate) ifTrue: [self error: self expiredCreditCardErrorMessage].
	aSalesBook add: aCart total.
	^ aCart total
	! !
!Cashier methodsFor: 'category-name' stamp: 'DA 6/9/2023 17:10:55' prior: 50638996!
checkout: aCart charging: aCreditCard on: aDate registerIn: aSalesBook
	| total |
	(aCart isEmpty) ifTrue: [self error: self emptyCartErrorMessage].
	(aCreditCard isExpiredOn: aDate) ifTrue: [self error: self expiredCreditCardErrorMessage].
	total := aCart total.
	aSalesBook add: total
	^ total
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'DA 6/9/2023 17:11:19' prior: 50638825!
test01CannotCheckoutAnEmptyCart
	"salesBook registrando las ventas, un cajero por cada venta
	asercion de mensaje de error con chequeo de invariante"
	|cart cashier salesBook|
	
	cart := testStoreObjects createCart.
	cashier := Cashier new.
	salesBook := OrderedCollection new.
	
	self 
		should: [
			cashier checkout: cart
				charging: testStoreObjects notExpiredCreditCard
				on: testStoreObjects today
				registerIn: salesBook]  
		raise: Error
		withExceptionDo: [:anError|
			self assert: anError messageText equals: cashier emptyCartErrorMessage.
			self assert: salesBook isEmpty.
			]
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'DA 6/9/2023 17:11:51' prior: 50638977!
test02SuccesfullCheckoutCartWithOneProduct
	"checkout: cart charging cc on: date registeringOn: salesbook initializer of cashier, mensaje checkout "
	|cart total salesBook |
	cart := testStoreObjects createCart.
	cart addQuantity: 1 ofBook: testStoreObjects bookPublished.
	salesBook := OrderedCollection new.
	
	total := Cashier new checkout: cart 
					charging: testStoreObjects notExpiredCreditCard 
					on: testStoreObjects today
					registerIn: salesBook.
	
	self assert: total = 10.  
	self assert: salesBook size = 1.
	self assert: salesBook first total = total.! !

!testRun: #CashierTest #test02SuccesfullCheckoutCartWithOneProduct stamp: 'DA 6/9/2023 17:11:55'!
FAILURE!

!testRun: #CashierTest #test02SuccesfullCheckoutCartWithOneProduct stamp: 'DA 6/9/2023 17:11:55'!
FAILURE!
!Cashier methodsFor: 'category-name' stamp: 'DA 6/9/2023 17:12:22' prior: 50639008!
checkout: aCart charging: aCreditCard on: aDate registerIn: aSalesBook
	| total |
	(aCart isEmpty) ifTrue: [self error: self emptyCartErrorMessage].
	(aCreditCard isExpiredOn: aDate) ifTrue: [self error: self expiredCreditCardErrorMessage].
	total := aCart total.
	aSalesBook add: total.
	^ total
	! !

!testRun: #CashierTest #test02SuccesfullCheckoutCartWithOneProduct stamp: 'DA 6/9/2023 17:12:26'!
ERROR!

!testRun: #CashierTest #test02SuccesfullCheckoutCartWithOneProduct stamp: 'DA 6/9/2023 17:12:26'!
ERROR!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'DA 6/9/2023 17:12:55' prior: 50639043!
test02SuccesfullCheckoutCartWithOneProduct
	"checkout: cart charging cc on: date registeringOn: salesbook initializer of cashier, mensaje checkout "
	|cart total salesBook |
	cart := testStoreObjects createCart.
	cart addQuantity: 1 ofBook: testStoreObjects bookPublished.
	salesBook := OrderedCollection new.
	
	total := Cashier new checkout: cart 
					charging: testStoreObjects notExpiredCreditCard 
					on: testStoreObjects today
					registerIn: salesBook.
	
	self assert: total = 10.  
	self assert: salesBook size = 1.
	self assert: salesBook first = total.! !

!testRun: #CashierTest #test02SuccesfullCheckoutCartWithOneProduct stamp: 'DA 6/9/2023 17:12:56'!
PASSED!

!testRun: #CashierTest #test01CannotCheckoutAnEmptyCart stamp: 'DA 6/9/2023 17:12:56'!
PASSED!

!testRun: #CashierTest #test02SuccesfullCheckoutCartWithOneProduct stamp: 'DA 6/9/2023 17:12:56'!
PASSED!

!testRun: #CashierTest #test03SuccesfullCheckoutCartWithProducts stamp: 'DA 6/9/2023 17:12:56'!
PASSED!

!testRun: #CashierTest #test04CheckoutFailWhenCreditCardIsExpired stamp: 'DA 6/9/2023 17:12:57'!
PASSED!

!testRun: #CashierTest #test05CheckoutFailWhenCreditCardWithEmptyBalance stamp: 'DA 6/9/2023 17:12:57'!
PASSED!

!testRun: #CashierTest #test06CheckoutFailWhenCreditCardFraud stamp: 'DA 6/9/2023 17:12:57'!
PASSED!

!testRun: #CashierTest #test07SucessfullSaleIfEverythingIsOk stamp: 'DA 6/9/2023 17:12:57'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'DA 6/9/2023 17:14:30' prior: 50637226!
test03SuccesfullCheckoutCartWithProducts
	|cart salesBook total |
	cart := testStoreObjects createCart.	
	cart addQuantity: 2 ofBook: testStoreObjects bookPublished.
	cart addQuantity: 1 ofBook: testStoreObjects otherBookPublished.
	
	salesBook := OrderedCollection new.
	
	total := Cashier new checkout: cart 
						charging: testStoreObjects notExpiredCreditCard 
						on: testStoreObjects today
						registerIn: salesBook.
	
	self assert: total = 40.  
	self assert: salesBook first = total. ! !

!testRun: #CashierTest #test03SuccesfullCheckoutCartWithProducts stamp: 'DA 6/9/2023 17:14:35'!
PASSED!

!testRun: #CashierTest #test01CannotCheckoutAnEmptyCart stamp: 'DA 6/9/2023 17:14:35'!
PASSED!

!testRun: #CashierTest #test02SuccesfullCheckoutCartWithOneProduct stamp: 'DA 6/9/2023 17:14:35'!
PASSED!

!testRun: #CashierTest #test03SuccesfullCheckoutCartWithProducts stamp: 'DA 6/9/2023 17:14:35'!
PASSED!

!testRun: #CashierTest #test04CheckoutFailWhenCreditCardIsExpired stamp: 'DA 6/9/2023 17:14:36'!
PASSED!

!testRun: #CashierTest #test05CheckoutFailWhenCreditCardWithEmptyBalance stamp: 'DA 6/9/2023 17:14:36'!
PASSED!

!testRun: #CashierTest #test06CheckoutFailWhenCreditCardFraud stamp: 'DA 6/9/2023 17:14:36'!
PASSED!

!testRun: #CashierTest #test07SucessfullSaleIfEverythingIsOk stamp: 'DA 6/9/2023 17:14:36'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'DA 6/9/2023 17:15:49' prior: 50638759!
test04CheckoutFailWhenCreditCardIsExpired
	|cart cashier salesBook|
	
	cart := testStoreObjects createCart.
	cart addQuantity: 2 ofBook: testStoreObjects bookPublished.
	
	cashier := Cashier new.
	salesBook := OrderedCollection new.

	self 
		should: [cashier checkout: cart 
				charging: testStoreObjects expiredCreditCard 
				on: testStoreObjects today
				registerIn: salesBook]
		raise: Error
		withExceptionDo: [:anError|
			self assert: anError messageText equals: cashier expiredCreditCardErrorMessage.
			self assert: salesBook isEmpty]! !

!testRun: #CashierTest #test04CheckoutFailWhenCreditCardIsExpired stamp: 'DA 6/9/2023 17:15:50'!
PASSED!

!testRun: #CashierTest #test01CannotCheckoutAnEmptyCart stamp: 'DA 6/9/2023 17:15:50'!
PASSED!

!testRun: #CashierTest #test02SuccesfullCheckoutCartWithOneProduct stamp: 'DA 6/9/2023 17:15:50'!
PASSED!

!testRun: #CashierTest #test03SuccesfullCheckoutCartWithProducts stamp: 'DA 6/9/2023 17:15:50'!
PASSED!

!testRun: #CashierTest #test04CheckoutFailWhenCreditCardIsExpired stamp: 'DA 6/9/2023 17:15:51'!
PASSED!

!testRun: #CashierTest #test05CheckoutFailWhenCreditCardWithEmptyBalance stamp: 'DA 6/9/2023 17:15:51'!
PASSED!

!testRun: #CashierTest #test06CheckoutFailWhenCreditCardFraud stamp: 'DA 6/9/2023 17:15:51'!
PASSED!

!testRun: #CashierTest #test07SucessfullSaleIfEverythingIsOk stamp: 'DA 6/9/2023 17:15:51'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'DA 6/9/2023 17:17:04' prior: 50639090!
test02SuccesfullCheckoutCartWithOneProduct
	"checkout: cart charging cc on: date registeringOn: salesbook initializer of cashier, mensaje checkout "
	|cart total salesBook |
	cart := testStoreObjects createCart.
	cart addQuantity: 1 ofBook: testStoreObjects bookPublished.
	salesBook := OrderedCollection new.
	
	total := Cashier checkout: cart 
					charging: testStoreObjects notExpiredCreditCard 
					on: testStoreObjects today
					registerIn: salesBook.
	
	self assert: total = 10.  
	self assert: salesBook size = 1.
	self assert: salesBook first = total.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'DA 6/9/2023 17:18:05' prior: 50639021!
test01CannotCheckoutAnEmptyCart
	"salesBook registrando las ventas, un cajero por cada venta
	asercion de mensaje de error con chequeo de invariante"
	|cart cashier salesBook|
	
	cart := testStoreObjects createCart.
	salesBook := OrderedCollection new.
	cashier := Cashier checkout: cart
				charging: testStoreObjects notExpiredCreditCard
				on: testStoreObjects today
				registerIn: salesBook.

	
	self 
		should: [cashier checkout]  
		raise: Error
		withExceptionDo: [:anError|
			self assert: anError messageText equals: cashier emptyCartErrorMessage.
			self assert: salesBook isEmpty.
			]
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'DA 6/9/2023 17:18:11' prior: 50639250!
test01CannotCheckoutAnEmptyCart
	"salesBook registrando las ventas, un cajero por cada venta
	asercion de mensaje de error con chequeo de invariante"
	|cart cashier salesBook|
	
	cart := testStoreObjects createCart.
	salesBook := OrderedCollection new.
	cashier := Cashier checkout: cart
				charging: testStoreObjects notExpiredCreditCard
				on: testStoreObjects today
				registerIn: salesBook.

	self 
		should: [cashier checkout]  
		raise: Error
		withExceptionDo: [:anError|
			self assert: anError messageText equals: cashier emptyCartErrorMessage.
			self assert: salesBook isEmpty.
			]
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'DA 6/9/2023 17:18:49' prior: 50639137!
test03SuccesfullCheckoutCartWithProducts
	|cart salesBook total cashier |
	cart := testStoreObjects createCart.	
	cart addQuantity: 2 ofBook: testStoreObjects bookPublished.
	cart addQuantity: 1 ofBook: testStoreObjects otherBookPublished.
	
	salesBook := OrderedCollection new.
	
	cashier := Cashier checkout: cart 
						charging: testStoreObjects notExpiredCreditCard 
						on: testStoreObjects today
						registerIn: salesBook.
	
	self assert: cashier checkout = 40.  
	self assert: salesBook first = total. ! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'DA 6/9/2023 17:19:09' prior: 50639294!
test03SuccesfullCheckoutCartWithProducts
	|cart salesBook cashier |
	cart := testStoreObjects createCart.	
	cart addQuantity: 2 ofBook: testStoreObjects bookPublished.
	cart addQuantity: 1 ofBook: testStoreObjects otherBookPublished.
	
	salesBook := OrderedCollection new.
	
	cashier := Cashier checkout: cart 
						charging: testStoreObjects notExpiredCreditCard 
						on: testStoreObjects today
						registerIn: salesBook.
	
	self assert: cashier checkout = 40.  
	self assert: salesBook first = cashier checkout. ! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'DA 6/9/2023 17:19:36' prior: 50639182!
test04CheckoutFailWhenCreditCardIsExpired
	|cart cashier salesBook|
	
	cart := testStoreObjects createCart.
	cart addQuantity: 2 ofBook: testStoreObjects bookPublished.
	salesBook := OrderedCollection new.
	cashier := Cashier checkout: cart 
				charging: testStoreObjects expiredCreditCard 
				on: testStoreObjects today
				registerIn: salesBook.

	self 
		should: [cashier checkout]
		raise: Error
		withExceptionDo: [:anError|
			self assert: anError messageText equals: cashier expiredCreditCardErrorMessage.
			self assert: salesBook isEmpty]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'DA 6/9/2023 17:19:38' prior: 50639334!
test04CheckoutFailWhenCreditCardIsExpired
	|cart cashier salesBook|
	
	cart := testStoreObjects createCart.
	cart addQuantity: 2 ofBook: testStoreObjects bookPublished.
	salesBook := OrderedCollection new.
	cashier := Cashier checkout: cart 
				charging: testStoreObjects expiredCreditCard 
				on: testStoreObjects today
				registerIn: salesBook.
	self 
		should: [cashier checkout]
		raise: Error
		withExceptionDo: [:anError|
			self assert: anError messageText equals: cashier expiredCreditCardErrorMessage.
			self assert: salesBook isEmpty]! !

!testRun: #CashierTest #test04CheckoutFailWhenCreditCardIsExpired stamp: 'DA 6/9/2023 17:19:46'!
ERROR!
!Cashier class methodsFor: 'instance creation' stamp: 'DA 6/9/2023 17:19:51'!
checkout: aCart charging: aCreditCard on: aDateAndTime registerIn: anOrderedCollection 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeCheckout: aCart charging: aCreditCard on: aDateAndTime registerIn: anOrderedCollection ! !
!Cashier class methodsFor: 'instance creation' stamp: 'DA 6/9/2023 17:20:31' prior: 50639378!
checkout: aCart charging: aCreditCard on: aDate registerIn: aSalesBook 
	^self new initializeCheckout: aCart charging: aCreditCard on: aDate registerIn: aSalesBook ! !

!testRun: #CashierTest #test04CheckoutFailWhenCreditCardIsExpired stamp: 'DA 6/9/2023 17:20:32'!
ERROR!

!classDefinition: #Cashier category: 'TusLibros' stamp: 'DA 6/9/2023 17:20:38'!
Object subclass: #Cashier
	instanceVariableNames: 'cart'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cashier category: 'TusLibros' stamp: 'DA 6/9/2023 17:20:38'!
Object subclass: #Cashier
	instanceVariableNames: 'cart creditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cashier category: 'TusLibros' stamp: 'DA 6/9/2023 17:20:38'!
Object subclass: #Cashier
	instanceVariableNames: 'cart creditCard date'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cashier category: 'TusLibros' stamp: 'DA 6/9/2023 17:20:38'!
Object subclass: #Cashier
	instanceVariableNames: 'cart creditCard date salesBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'category-name' stamp: 'DA 6/9/2023 17:20:38'!
initializeCheckout: aCart charging: aCreditCard on: aDate registerIn: aSalesBook 
	self shouldBeImplemented.
	cart := aCart.
	creditCard := aCreditCard.
	date := aDate.
	salesBook := aSalesBook.! !
!Cashier methodsFor: 'category-name' stamp: 'DA 6/9/2023 17:21:13' prior: 50639430!
initializeCheckout: aCart charging: aCreditCard on: aDate registerIn: aSalesBook 
	cart := aCart.
	creditCard := aCreditCard.
	date := aDate.
	salesBook := aSalesBook.! !

!testRun: #CashierTest #test04CheckoutFailWhenCreditCardIsExpired stamp: 'DA 6/9/2023 17:21:14'!
FAILURE!

!methodRemoval: Cashier #checkout:charging:on: stamp: 'DA 6/9/2023 17:21:26'!
checkout: aCart charging: aCreditCard on: aDate
	(aCart isEmpty) ifTrue: [self error: self emptyCartErrorMessage].
	(aCreditCard isExpiredOn: aDate) ifTrue: [self error: self expiredCreditCardErrorMessage].
	^ aCart total
	!
!Cashier methodsFor: 'category-name' stamp: 'DA 6/9/2023 17:22:02'!
checkout
	| total |
	(cart isEmpty) ifTrue: [self error: self emptyCartErrorMessage].
	(creditCard isExpiredOn: date) ifTrue: [self error: self expiredCreditCardErrorMessage].
	total := cart total.
	salesBook add: total.
	^ total
	! !

!methodRemoval: Cashier #checkout:charging:on:registerIn: stamp: 'DA 6/9/2023 17:22:11'!
checkout: aCart charging: aCreditCard on: aDate registerIn: aSalesBook
	| total |
	(aCart isEmpty) ifTrue: [self error: self emptyCartErrorMessage].
	(aCreditCard isExpiredOn: aDate) ifTrue: [self error: self expiredCreditCardErrorMessage].
	total := aCart total.
	aSalesBook add: total.
	^ total
	!

!testRun: #CashierTest #test01CannotCheckoutAnEmptyCart stamp: 'DA 6/9/2023 17:22:17'!
PASSED!

!testRun: #CashierTest #test01CannotCheckoutAnEmptyCart stamp: 'DA 6/9/2023 17:22:20'!
PASSED!

!testRun: #CashierTest #test02SuccesfullCheckoutCartWithOneProduct stamp: 'DA 6/9/2023 17:22:20'!
FAILURE!

!testRun: #CashierTest #test03SuccesfullCheckoutCartWithProducts stamp: 'DA 6/9/2023 17:22:20'!
PASSED!

!testRun: #CashierTest #test04CheckoutFailWhenCreditCardIsExpired stamp: 'DA 6/9/2023 17:22:20'!
PASSED!

!testRun: #CashierTest #test05CheckoutFailWhenCreditCardWithEmptyBalance stamp: 'DA 6/9/2023 17:22:20'!
PASSED!

!testRun: #CashierTest #test06CheckoutFailWhenCreditCardFraud stamp: 'DA 6/9/2023 17:22:20'!
PASSED!

!testRun: #CashierTest #test07SucessfullSaleIfEverythingIsOk stamp: 'DA 6/9/2023 17:22:20'!
PASSED!

!testRun: #CashierTest #test02SuccesfullCheckoutCartWithOneProduct stamp: 'DA 6/9/2023 17:22:20'!
FAILURE!

!testRun: #CashierTest #test02SuccesfullCheckoutCartWithOneProduct stamp: 'DA 6/9/2023 17:22:27'!
FAILURE!

!testRun: #CashierTest #test02SuccesfullCheckoutCartWithOneProduct stamp: 'DA 6/9/2023 17:22:27'!
FAILURE!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'DA 6/9/2023 17:22:53' prior: 50639229!
test02SuccesfullCheckoutCartWithOneProduct
	"checkout: cart charging cc on: date registeringOn: salesbook initializer of cashier, mensaje checkout "
	|cart salesBook cashier |
	cart := testStoreObjects createCart.
	cart addQuantity: 1 ofBook: testStoreObjects bookPublished.
	salesBook := OrderedCollection new.
	
	cashier := Cashier checkout: cart 
					charging: testStoreObjects notExpiredCreditCard 
					on: testStoreObjects today
					registerIn: salesBook.
	
	self assert: cashier checkout = 10.  
	self assert: salesBook size = 1.
	self assert: salesBook first = cashier checkout.! !

!testRun: #CashierTest #test02SuccesfullCheckoutCartWithOneProduct stamp: 'DA 6/9/2023 17:22:57'!
PASSED!

!testRun: #CashierTest #test01CannotCheckoutAnEmptyCart stamp: 'DA 6/9/2023 17:22:57'!
PASSED!

!testRun: #CashierTest #test02SuccesfullCheckoutCartWithOneProduct stamp: 'DA 6/9/2023 17:22:57'!
PASSED!

!testRun: #CashierTest #test03SuccesfullCheckoutCartWithProducts stamp: 'DA 6/9/2023 17:22:57'!
PASSED!

!testRun: #CashierTest #test04CheckoutFailWhenCreditCardIsExpired stamp: 'DA 6/9/2023 17:22:57'!
PASSED!

!testRun: #CashierTest #test05CheckoutFailWhenCreditCardWithEmptyBalance stamp: 'DA 6/9/2023 17:22:57'!
PASSED!

!testRun: #CashierTest #test06CheckoutFailWhenCreditCardFraud stamp: 'DA 6/9/2023 17:22:57'!
PASSED!

!testRun: #CashierTest #test07SucessfullSaleIfEverythingIsOk stamp: 'DA 6/9/2023 17:22:57'!
PASSED!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'DA 6/9/2023 17:29:49'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'testStoreObjects debitBehavior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'DA 6/9/2023 17:29:48'!
debit: anAmount from: aCreditCard
	^ debitBehavior value: anAmount value: aCreditCard. ! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'DA 6/9/2023 17:30:16' prior: 50637047 overrides: 16961394!
setUp
	testStoreObjects := StoreTestObjects new. 
	debitBehavior := [:anAmount :aCreditCard].! !

Object subclass: #Cashier
	instanceVariableNames: 'cart creditCard merchantProcessor salesBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cashier category: 'TusLibros' stamp: 'DA 6/9/2023 17:31:47'!
Object subclass: #Cashier
	instanceVariableNames: 'cart creditCard merchantProcessor salesBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'category-name' stamp: 'DA 6/9/2023 17:33:33' prior: 50639460!
checkout
	| total |
	(cart isEmpty) ifTrue: [self error: self emptyCartErrorMessage].
	total := cart total.
	merchantProcessor debit: total from: creditCard. 
	salesBook add: total.
	^ total
	! !
!Cashier class methodsFor: 'instance creation' stamp: 'DA 6/9/2023 17:34:00' prior: 50639391!
checkout: aCart charging: aCreditCard on: aDate registerIn: aSalesBook 
	(aCreditCard isExpiredOn: aDate) ifTrue: [self error: self expiredCreditCardErrorMessage].
	^self new initializeCheckout: aCart charging: aCreditCard on: aDate registerIn: aSalesBook ! !
!Cashier class methodsFor: 'instance creation' stamp: 'DA 6/9/2023 17:34:09' prior: 50639610!
checkout: aCart charging: aCreditCard on: aDate registerIn: aSalesBook 
	(aCreditCard isExpiredOn: aDate) ifTrue: [self error: self expiredCreditCardErrorMessage].
	^self new initializeCheckout: aCart charging: aCreditCard on: aDate registerIn: aSalesBook ! !
!Cashier class methodsFor: 'error handling' stamp: 'DA 6/9/2023 17:34:26'!
expiredCreditCardErrorMessage
	^ 'Invalid credit card'! !

!methodRemoval: Cashier #expiredCreditCardErrorMessage stamp: 'DA 6/9/2023 17:34:26'!
expiredCreditCardErrorMessage
	^ 'Invalid credit card'!
!Cashier class methodsFor: 'error handling' stamp: 'DA 6/9/2023 17:34:34'!
emptyCartErrorMessage
	^ 'Cannot checkout an empty cart'! !

!methodRemoval: Cashier #emptyCartErrorMessage stamp: 'DA 6/9/2023 17:34:34'!
emptyCartErrorMessage
	^ 'Cannot checkout an empty cart'!
!Cashier methodsFor: 'category-name' stamp: 'DA 6/9/2023 17:34:45' prior: 50639600!
checkout
	| total |
	total := cart total.
	merchantProcessor debit: total from: creditCard. 
	salesBook add: total.
	^ total
	! !
!Cashier class methodsFor: 'instance creation' stamp: 'DA 6/9/2023 17:35:06' prior: 50639622!
checkout: aCart charging: aCreditCard on: aDate registerIn: aSalesBook 
	(aCart isEmpty) ifTrue: [self error: self emptyCartErrorMessage].
	(aCreditCard isExpiredOn: aDate) ifTrue: [self error: self expiredCreditCardErrorMessage].
	^self new initializeCheckout: aCart charging: aCreditCard on: aDate registerIn: aSalesBook ! !
!Cashier class methodsFor: 'instance creation' stamp: 'DA 6/9/2023 17:35:51'!
checkout: aCart charging: aCreditCard through: aMerchantProcessor on: aDate registerIn: aSalesBook 
	(aCart isEmpty) ifTrue: [self error: self emptyCartErrorMessage].
	(aCreditCard isExpiredOn: aDate) ifTrue: [self error: self expiredCreditCardErrorMessage].
	^self new initializeCheckout: aCart charging: aCreditCard through: aMerchantProcessor registerIn: aSalesBook ! !
!Cashier methodsFor: 'category-name' stamp: 'DA 6/9/2023 17:36:23'!
initializeCheckout: aCart charging: aCreditCard through: aMerchantProcessor registerIn: aSalesBook 
	cart := aCart.
	creditCard := aCreditCard.
	merchantProcessor := aMerchantProcessor.
	salesBook := aSalesBook.! !

!methodRemoval: Cashier #initializeCheckout:charging:on:registerIn: stamp: 'DA 6/9/2023 17:36:31'!
initializeCheckout: aCart charging: aCreditCard on: aDate registerIn: aSalesBook 
	cart := aCart.
	creditCard := aCreditCard.
	date := aDate.
	salesBook := aSalesBook.!

!methodRemoval: Cashier class #checkout:charging:on:registerIn: stamp: 'DA 6/9/2023 17:36:57'!
checkout: aCart charging: aCreditCard on: aDate registerIn: aSalesBook 
	(aCart isEmpty) ifTrue: [self error: self emptyCartErrorMessage].
	(aCreditCard isExpiredOn: aDate) ifTrue: [self error: self expiredCreditCardErrorMessage].
	^self new initializeCheckout: aCart charging: aCreditCard on: aDate registerIn: aSalesBook !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'DA 6/9/2023 17:38:19' prior: 50639272!
test01CannotCheckoutAnEmptyCart
	"salesBook registrando las ventas, un cajero por cada venta
	asercion de mensaje de error con chequeo de invariante"
	|cart cashier salesBook|
	
	cart := testStoreObjects createCart.
	salesBook := OrderedCollection new.
	cashier := Cashier checkout: cart
				charging: testStoreObjects notExpiredCreditCard
				through: self
				on: testStoreObjects today
				registerIn: salesBook.

	self 
		should: [cashier checkout]  
		raise: Error
		withExceptionDo: [:anError|
			self assert: anError messageText equals: cashier emptyCartErrorMessage.
			self assert: salesBook isEmpty.
			]
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'DA 6/9/2023 17:38:32' prior: 50639519!
test02SuccesfullCheckoutCartWithOneProduct
	"checkout: cart charging cc on: date registeringOn: salesbook initializer of cashier, mensaje checkout "
	|cart salesBook cashier |
	cart := testStoreObjects createCart.
	cart addQuantity: 1 ofBook: testStoreObjects bookPublished.
	salesBook := OrderedCollection new.
	
	cashier := Cashier checkout: cart 
					charging: testStoreObjects notExpiredCreditCard 
					through: self
					on: testStoreObjects today
					registerIn: salesBook.
	
	self assert: cashier checkout = 10.  
	self assert: salesBook size = 1.
	self assert: salesBook first = cashier checkout.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'DA 6/9/2023 17:38:39' prior: 50639314!
test03SuccesfullCheckoutCartWithProducts
	|cart salesBook cashier |
	cart := testStoreObjects createCart.	
	cart addQuantity: 2 ofBook: testStoreObjects bookPublished.
	cart addQuantity: 1 ofBook: testStoreObjects otherBookPublished.
	
	salesBook := OrderedCollection new.
	
	cashier := Cashier checkout: cart 
						charging: testStoreObjects notExpiredCreditCard 
						through: self
						on: testStoreObjects today
						registerIn: salesBook.
	
	self assert: cashier checkout = 40.  
	self assert: salesBook first = cashier checkout. ! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'DA 6/9/2023 17:38:47' prior: 50639355!
test04CheckoutFailWhenCreditCardIsExpired
	|cart cashier salesBook|
	
	cart := testStoreObjects createCart.
	cart addQuantity: 2 ofBook: testStoreObjects bookPublished.
	salesBook := OrderedCollection new.
	cashier := Cashier checkout: cart 
				charging: testStoreObjects expiredCreditCard 
				through: self
				on: testStoreObjects today
				registerIn: salesBook.
	self 
		should: [cashier checkout]
		raise: Error
		withExceptionDo: [:anError|
			self assert: anError messageText equals: cashier expiredCreditCardErrorMessage.
			self assert: salesBook isEmpty]! !

!testRun: #CashierTest #test01CannotCheckoutAnEmptyCart stamp: 'DA 6/9/2023 17:38:57'!
ERROR!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'DA 6/9/2023 17:39:09' prior: 50639717!
test01CannotCheckoutAnEmptyCart
	"salesBook registrando las ventas, un cajero por cada venta
	asercion de mensaje de error con chequeo de invariante"
	|cart cashier salesBook|
	
	cart := testStoreObjects createCart.
	salesBook := OrderedCollection new.
	cashier := Cashier checkout: cart
				charging: testStoreObjects notExpiredCreditCard
				through: self
				on: testStoreObjects today
				registerIn: salesBook.

	self 
		should: [cashier checkout]  
		raise: Error
		withExceptionDo: [:anError|
			self assert: anError messageText equals: cashier class emptyCartErrorMessage.
			self assert: salesBook isEmpty.
			]
	! !

!testRun: #CashierTest #test01CannotCheckoutAnEmptyCart stamp: 'DA 6/9/2023 17:39:10'!
ERROR!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'DA 6/9/2023 17:39:41' prior: 50639807!
test01CannotCheckoutAnEmptyCart
	"salesBook registrando las ventas, un cajero por cada venta
	asercion de mensaje de error con chequeo de invariante"
	|cart salesBook|
	
	cart := testStoreObjects createCart.
	salesBook := OrderedCollection new.
	
	self 
		should: [Cashier checkout: cart
				charging: testStoreObjects notExpiredCreditCard
				through: self
				on: testStoreObjects today
				registerIn: salesBook.]  
		raise: Error
		withExceptionDo: [:anError|
			self assert: anError messageText equals: Cashier class emptyCartErrorMessage.
			self assert: salesBook isEmpty.
			]
	! !

!testRun: #CashierTest #test01CannotCheckoutAnEmptyCart stamp: 'DA 6/9/2023 17:39:44'!
ERROR!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'DA 6/9/2023 17:39:49' prior: 50639833!
test01CannotCheckoutAnEmptyCart
	"salesBook registrando las ventas, un cajero por cada venta
	asercion de mensaje de error con chequeo de invariante"
	|cart salesBook|
	
	cart := testStoreObjects createCart.
	salesBook := OrderedCollection new.
	
	self 
		should: [Cashier checkout: cart
				charging: testStoreObjects notExpiredCreditCard
				through: self
				on: testStoreObjects today
				registerIn: salesBook.]  
		raise: Error
		withExceptionDo: [:anError|
			self assert: anError messageText equals: Cashier emptyCartErrorMessage.
			self assert: salesBook isEmpty.
			]
	! !

!testRun: #CashierTest #test01CannotCheckoutAnEmptyCart stamp: 'DA 6/9/2023 17:39:50'!
PASSED!

!testRun: #CashierTest #test01CannotCheckoutAnEmptyCart stamp: 'DA 6/9/2023 17:39:50'!
PASSED!

!testRun: #CashierTest #test02SuccesfullCheckoutCartWithOneProduct stamp: 'DA 6/9/2023 17:39:50'!
PASSED!

!testRun: #CashierTest #test03SuccesfullCheckoutCartWithProducts stamp: 'DA 6/9/2023 17:39:50'!
PASSED!

!testRun: #CashierTest #test04CheckoutFailWhenCreditCardIsExpired stamp: 'DA 6/9/2023 17:39:50'!
ERROR!

!testRun: #CashierTest #test05CheckoutFailWhenCreditCardWithEmptyBalance stamp: 'DA 6/9/2023 17:39:50'!
PASSED!

!testRun: #CashierTest #test06CheckoutFailWhenCreditCardFraud stamp: 'DA 6/9/2023 17:39:50'!
PASSED!

!testRun: #CashierTest #test07SucessfullSaleIfEverythingIsOk stamp: 'DA 6/9/2023 17:39:50'!
PASSED!

!testRun: #CashierTest #test04CheckoutFailWhenCreditCardIsExpired stamp: 'DA 6/9/2023 17:39:50'!
ERROR!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'DA 6/9/2023 17:40:16' prior: 50639783!
test04CheckoutFailWhenCreditCardIsExpired
	|cart salesBook|
	
	cart := testStoreObjects createCart.
	cart addQuantity: 2 ofBook: testStoreObjects bookPublished.
	salesBook := OrderedCollection new.

	self 
		should: [Cashier checkout: cart 
				charging: testStoreObjects expiredCreditCard 
				through: self
				on: testStoreObjects today
				registerIn: salesBook.]
		raise: Error
		withExceptionDo: [:anError|
			self assert: anError messageText equals: Cashier expiredCreditCardErrorMessage.
			self assert: salesBook isEmpty]! !

!testRun: #CashierTest #test04CheckoutFailWhenCreditCardIsExpired stamp: 'DA 6/9/2023 17:40:20'!
PASSED!

!testRun: #CashierTest #test01CannotCheckoutAnEmptyCart stamp: 'DA 6/9/2023 17:40:20'!
PASSED!

!testRun: #CashierTest #test02SuccesfullCheckoutCartWithOneProduct stamp: 'DA 6/9/2023 17:40:20'!
PASSED!

!testRun: #CashierTest #test03SuccesfullCheckoutCartWithProducts stamp: 'DA 6/9/2023 17:40:20'!
PASSED!

!testRun: #CashierTest #test04CheckoutFailWhenCreditCardIsExpired stamp: 'DA 6/9/2023 17:40:20'!
PASSED!

!testRun: #CashierTest #test05CheckoutFailWhenCreditCardWithEmptyBalance stamp: 'DA 6/9/2023 17:40:20'!
PASSED!

!testRun: #CashierTest #test06CheckoutFailWhenCreditCardFraud stamp: 'DA 6/9/2023 17:40:20'!
PASSED!

!testRun: #CashierTest #test07SucessfullSaleIfEverythingIsOk stamp: 'DA 6/9/2023 17:40:20'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'DA 6/9/2023 17:43:47' prior: 50635797!
test05CheckoutFailWhenCreditCardWithEmptyBalance 
	
	| cart cashier salesBook |
	cart := testStoreObjects createCart.
	cart add: testStoreObjects bookPublished.
	salesBook := OrderedCollection new.
	
	cashier := Cashier 
				checkout: cart  
				charging: testStoreObjects notExpiredCreditCard
				through: self 
				on: testStoreObjects today
				registerIn: salesBook
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'DA 6/9/2023 17:45:11' prior: 50639955!
test05CheckoutFailWhenCreditCardWithEmptyBalance 
	
	| cart cashier salesBook |
	cart := testStoreObjects createCart.
	cart add: testStoreObjects bookPublished.
	salesBook := OrderedCollection new.
	
	cashier := Cashier 
				checkout: cart  
				charging: testStoreObjects notExpiredCreditCard
				through: self 
				on: testStoreObjects today
				registerIn: salesBook.
				
	self should: [cashier checkout]
		raise: Error
		withExceptionDo: [:anError|
			self assert: anError messageText = Cashier creditCardWithoutBalanceErrorMessage.
			self assert: salesBook isEmpty
			]
	! !

!testRun: #CashierTest #test05CheckoutFailWhenCreditCardWithEmptyBalance stamp: 'DA 6/9/2023 17:45:20'!
FAILURE!
!Cashier class methodsFor: 'nil' stamp: 'DA 6/9/2023 17:45:57'!
creditCardWithoutBalanceErrorMessage
	^ 'Credit card has no credit available'! !

!testRun: #CashierTest #test05CheckoutFailWhenCreditCardWithEmptyBalance stamp: 'DA 6/9/2023 17:46:13'!
FAILURE!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'DA 6/9/2023 17:47:07' prior: 50639858!
test01CannotCheckoutAnEmptyCart
	"salesBook registrando las ventas, un cajero por cada venta
	asercion de mensaje de error con chequeo de invariante"
	|cart salesBook|
	
	cart := testStoreObjects createCart.
	salesBook := OrderedCollection new.
	debitBehavior := [:anAmount :aCreditCard | self error: Cashier creditCardWithoutBalanceErrorMessage].
	
	self 
		should: [Cashier checkout: cart
				charging: testStoreObjects notExpiredCreditCard
				through: self
				on: testStoreObjects today
				registerIn: salesBook.]  
		raise: Error
		withExceptionDo: [:anError|
			self assert: anError messageText equals: Cashier emptyCartErrorMessage.
			self assert: salesBook isEmpty.
			]
	! !

!testRun: #CashierTest #test01CannotCheckoutAnEmptyCart stamp: 'DA 6/9/2023 17:47:08'!
PASSED!

!testRun: #CashierTest #test01CannotCheckoutAnEmptyCart stamp: 'DA 6/9/2023 17:47:08'!
PASSED!

!testRun: #CashierTest #test02SuccesfullCheckoutCartWithOneProduct stamp: 'DA 6/9/2023 17:47:08'!
PASSED!

!testRun: #CashierTest #test03SuccesfullCheckoutCartWithProducts stamp: 'DA 6/9/2023 17:47:08'!
PASSED!

!testRun: #CashierTest #test04CheckoutFailWhenCreditCardIsExpired stamp: 'DA 6/9/2023 17:47:08'!
PASSED!

!testRun: #CashierTest #test05CheckoutFailWhenCreditCardWithEmptyBalance stamp: 'DA 6/9/2023 17:47:08'!
FAILURE!

!testRun: #CashierTest #test06CheckoutFailWhenCreditCardFraud stamp: 'DA 6/9/2023 17:47:08'!
PASSED!

!testRun: #CashierTest #test07SucessfullSaleIfEverythingIsOk stamp: 'DA 6/9/2023 17:47:08'!
PASSED!

!testRun: #CashierTest #test05CheckoutFailWhenCreditCardWithEmptyBalance stamp: 'DA 6/9/2023 17:47:08'!
FAILURE!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'DA 6/9/2023 17:47:22' prior: 50639970!
test05CheckoutFailWhenCreditCardWithEmptyBalance 
	
	| cart cashier salesBook |
	cart := testStoreObjects createCart.
	cart add: testStoreObjects bookPublished.
	salesBook := OrderedCollection new.
	
	cashier := Cashier 
				checkout: cart  
				charging: testStoreObjects notExpiredCreditCard
				through: self 
				on: testStoreObjects today
				registerIn: salesBook.
				
	self should: [cashier checkout]
		raise: Error
		withExceptionDo: [:anError|
			self assert: anError messageText equals: Cashier creditCardWithoutBalanceErrorMessage.
			self assert: salesBook isEmpty
			]
	! !

!testRun: #CashierTest #test05CheckoutFailWhenCreditCardWithEmptyBalance stamp: 'DA 6/9/2023 17:47:23'!
FAILURE!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'DA 6/9/2023 17:47:51' prior: 50640004!
test01CannotCheckoutAnEmptyCart
	"salesBook registrando las ventas, un cajero por cada venta
	asercion de mensaje de error con chequeo de invariante"
	|cart salesBook|
	
	cart := testStoreObjects createCart.
	salesBook := OrderedCollection new.
	
	self 
		should: [Cashier checkout: cart
				charging: testStoreObjects notExpiredCreditCard
				through: self
				on: testStoreObjects today
				registerIn: salesBook.]  
		raise: Error
		withExceptionDo: [:anError|
			self assert: anError messageText equals: Cashier emptyCartErrorMessage.
			self assert: salesBook isEmpty.
			]
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'DA 6/9/2023 17:48:01' prior: 50640058!
test05CheckoutFailWhenCreditCardWithEmptyBalance 
	
	| cart cashier salesBook |
	cart := testStoreObjects createCart.
	cart add: testStoreObjects bookPublished.
	salesBook := OrderedCollection new.
	debitBehavior := [:anAmount :aCreditCard | self error: Cashier creditCardWithoutBalanceErrorMessage].
	
	cashier := Cashier 
				checkout: cart  
				charging: testStoreObjects notExpiredCreditCard
				through: self 
				on: testStoreObjects today
				registerIn: salesBook.
				
	self should: [cashier checkout]
		raise: Error
		withExceptionDo: [:anError|
			self assert: anError messageText equals: Cashier creditCardWithoutBalanceErrorMessage.
			self assert: salesBook isEmpty
			]
	! !

!testRun: #CashierTest #test05CheckoutFailWhenCreditCardWithEmptyBalance stamp: 'DA 6/9/2023 17:48:04'!
PASSED!

!testRun: #CashierTest #test01CannotCheckoutAnEmptyCart stamp: 'DA 6/9/2023 17:48:04'!
PASSED!

!testRun: #CashierTest #test02SuccesfullCheckoutCartWithOneProduct stamp: 'DA 6/9/2023 17:48:04'!
PASSED!

!testRun: #CashierTest #test03SuccesfullCheckoutCartWithProducts stamp: 'DA 6/9/2023 17:48:04'!
PASSED!

!testRun: #CashierTest #test04CheckoutFailWhenCreditCardIsExpired stamp: 'DA 6/9/2023 17:48:04'!
PASSED!

!testRun: #CashierTest #test05CheckoutFailWhenCreditCardWithEmptyBalance stamp: 'DA 6/9/2023 17:48:04'!
PASSED!

!testRun: #CashierTest #test06CheckoutFailWhenCreditCardFraud stamp: 'DA 6/9/2023 17:48:04'!
PASSED!

!testRun: #CashierTest #test07SucessfullSaleIfEverythingIsOk stamp: 'DA 6/9/2023 17:48:05'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'DA 6/9/2023 17:49:38' prior: 50635793!
test06CheckoutFailWhenCreditCardFraud
		
	| cart cashier salesBook |
	cart := testStoreObjects createCart.
	cart add: testStoreObjects bookPublished.
	salesBook := OrderedCollection new.
	debitBehavior := [:anAmount :aCreditCard | self error: Cashier creditCardFraudErrorMessage].
	
	cashier := Cashier 
				checkout: cart  
				charging: testStoreObjects notExpiredCreditCard
				through: self 
				on: testStoreObjects today
				registerIn: salesBook.
				
	self should: [cashier checkout]
		raise: Error
		withExceptionDo: [:anError|
			self assert: anError messageText equals: Cashier creditCardFraudErrorMessage.
			self assert: salesBook isEmpty
			]
	! !

!testRun: #CashierTest #test06CheckoutFailWhenCreditCardFraud stamp: 'DA 6/9/2023 17:49:40'!
ERROR!
!Cashier class methodsFor: 'as yet unclassified' stamp: 'DA 6/9/2023 17:49:45'!
creditCardFraudErrorMessage
	self shouldBeImplemented.! !
!Cashier class methodsFor: 'as yet unclassified' stamp: 'DA 6/9/2023 17:49:54' prior: 50640183!
creditCardFraudErrorMessage
	^ 'Credit card fraud'! !

!testRun: #CashierTest #test06CheckoutFailWhenCreditCardFraud stamp: 'DA 6/9/2023 17:49:55'!
FAILURE!

!testRun: #CashierTest #test06CheckoutFailWhenCreditCardFraud stamp: 'DA 6/9/2023 17:50:32'!
PASSED!

!methodRemoval: CashierTest #test06CheckoutFailWhenCreditCardFraud stamp: 'DA 6/9/2023 17:52:06'!
test06CheckoutFailWhenCreditCardFraud
		
	| cart cashier salesBook |
	cart := testStoreObjects createCart.
	cart add: testStoreObjects bookPublished.
	salesBook := OrderedCollection new.
	debitBehavior := [:anAmount :aCreditCard | self error: Cashier creditCardFraudErrorMessage].
	
	cashier := Cashier 
				checkout: cart  
				charging: testStoreObjects notExpiredCreditCard
				through: self 
				on: testStoreObjects today
				registerIn: salesBook.
				
	self should: [cashier checkout]
		raise: Error
		withExceptionDo: [:anError|
			self assert: anError messageText equals: Cashier creditCardFraudErrorMessage.
			self assert: salesBook isEmpty
			]
	!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'DA 6/9/2023 17:52:18'!
test06SucessfullSaleIfEverythingIsOk
	! !

!methodRemoval: CashierTest #test07SucessfullSaleIfEverythingIsOk stamp: 'DA 6/9/2023 17:52:18'!
test07SucessfullSaleIfEverythingIsOk
	!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'DA 6/9/2023 17:54:32' prior: 50640223!
test06SucessfullSaleIfEverythingIsOk
	
	| cart cashier salesBook |
	cart:= testStoreObjects createCart.
	cart add: testStoreObjects bookPublished.
	salesBook := OrderedCollection new.
	
	cashier := Cashier 
				checkout: cart  
				charging: testStoreObjects notExpiredCreditCard 
				through:  self
				on: testStoreObjects today
				registerIn: salesBook.
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'DA 6/9/2023 17:56:57' prior: 50640232!
test06SucessfullSaleIfEverythingIsOk
	
	| cart cashier salesBook debitedAmount debitedCreditCard |
	cart:= testStoreObjects createCart.
	cart add: testStoreObjects bookPublished.
	salesBook := OrderedCollection new.
	debitBehavior := [:anAmount :aCreditCard|
				debitedAmount := anAmount.
				debitedCreditCard := aCreditCard].
	
	cashier := Cashier 
				checkout: cart  
				charging: testStoreObjects notExpiredCreditCard 
				through:  self
				on: testStoreObjects today
				registerIn: salesBook.
				
	self assert: debitedCreditCard = testStoreObjects notExpiredCreditCard.
	self assert: debitedAmount = cashier checkout.
	! !

!testRun: #CashierTest #test06SucessfullSaleIfEverythingIsOk stamp: 'DA 6/9/2023 17:56:58'!
FAILURE!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'DA 6/9/2023 17:57:23' prior: 50640247!
test06SucessfullSaleIfEverythingIsOk
	
	| cart cashier salesBook debitedAmount debitedCreditCard |
	cart:= testStoreObjects createCart.
	cart add: testStoreObjects bookPublished.
	salesBook := OrderedCollection new.
	
	cashier := Cashier 
				checkout: cart  
				charging: testStoreObjects notExpiredCreditCard 
				through:  self
				on: testStoreObjects today
				registerIn: salesBook.
	
	debitBehavior := [:anAmount :aCreditCard|
				debitedAmount := anAmount.
				debitedCreditCard := aCreditCard].
				
	self assert: debitedCreditCard = testStoreObjects notExpiredCreditCard.
	self assert: debitedAmount = cashier checkout.
	! !

!testRun: #CashierTest #test06SucessfullSaleIfEverythingIsOk stamp: 'DA 6/9/2023 17:57:24'!
FAILURE!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'DA 6/9/2023 17:59:05' prior: 50640273!
test06SucessfullSaleIfEverythingIsOk
	
	| cart cashier salesBook debitedAmount debitedCreditCard total |
	cart:= testStoreObjects createCart.
	cart add: testStoreObjects bookPublished.
	salesBook := OrderedCollection new.
	
	cashier := Cashier 
				checkout: cart  
				charging: testStoreObjects notExpiredCreditCard 
				through:  self
				on: testStoreObjects today
				registerIn: salesBook.
	
	debitBehavior := [:anAmount :aCreditCard|
				debitedAmount := anAmount.
				debitedCreditCard := aCreditCard].
	
	total := cashier checkout.
				
	self assert: debitedCreditCard = testStoreObjects notExpiredCreditCard.
	self assert: debitedAmount = total.
	! !

!testRun: #CashierTest #test06SucessfullSaleIfEverythingIsOk stamp: 'DA 6/9/2023 17:59:08'!
FAILURE!

!testRun: #CashierTest #test06SucessfullSaleIfEverythingIsOk stamp: 'DA 6/9/2023 18:00:12'!
FAILURE!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'DA 6/9/2023 18:00:21' prior: 50640299!
test06SucessfullSaleIfEverythingIsOk
	
	| cart cashier salesBook debitedAmount debitedCreditCard total |
	cart:= testStoreObjects createCart.
	cart add: testStoreObjects bookPublished.
	salesBook := OrderedCollection new.
	
	cashier := Cashier 
				checkout: cart  
				charging: testStoreObjects notExpiredCreditCard 
				through:  self
				on: testStoreObjects today
				registerIn: salesBook.
	
	debitBehavior := [:anAmount :aCreditCard|
				debitedAmount := anAmount.
				debitedCreditCard := aCreditCard].
	
	total := cashier checkout.
				
	self assert: debitedCreditCard equals: testStoreObjects notExpiredCreditCard.
	self assert: debitedAmount = total.
	! !

!testRun: #CashierTest #test06SucessfullSaleIfEverythingIsOk stamp: 'DA 6/9/2023 18:00:23'!
FAILURE!

!testRun: #CashierTest #test06SucessfullSaleIfEverythingIsOk stamp: 'DA 6/9/2023 18:01:40'!
FAILURE!

!testRun: #CashierTest #test06SucessfullSaleIfEverythingIsOk stamp: 'DA 6/9/2023 18:01:47'!
FAILURE!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'DA 6/9/2023 18:02:22' prior: 50640329!
test06SucessfullSaleIfEverythingIsOk
	
	| cart cashier salesBook debitedAmount debitedCreditCard total creditCard |
	cart:= testStoreObjects createCart.
	cart add: testStoreObjects bookPublished.
	salesBook := OrderedCollection new.
	creditCard :=  testStoreObjects notExpiredCreditCard.
	
	cashier := Cashier 
				checkout: cart  
				charging: creditCard
				through:  self
				on: testStoreObjects today
				registerIn: salesBook.
	
	debitBehavior := [:anAmount :aCreditCard|
				debitedAmount := anAmount.
				debitedCreditCard := aCreditCard].
	
	total := cashier checkout.
				
	self assert: debitedCreditCard equals: creditCard.
	self assert: debitedAmount = total.
	! !

!testRun: #CashierTest #test06SucessfullSaleIfEverythingIsOk stamp: 'DA 6/9/2023 18:02:24'!
PASSED!

!testRun: #CashierTest #test01CannotCheckoutAnEmptyCart stamp: 'DA 6/9/2023 18:02:24'!
PASSED!

!testRun: #CashierTest #test02SuccesfullCheckoutCartWithOneProduct stamp: 'DA 6/9/2023 18:02:24'!
PASSED!

!testRun: #CashierTest #test03SuccesfullCheckoutCartWithProducts stamp: 'DA 6/9/2023 18:02:24'!
PASSED!

!testRun: #CashierTest #test04CheckoutFailWhenCreditCardIsExpired stamp: 'DA 6/9/2023 18:02:24'!
PASSED!

!testRun: #CashierTest #test05CheckoutFailWhenCreditCardWithEmptyBalance stamp: 'DA 6/9/2023 18:02:24'!
PASSED!

!testRun: #CashierTest #test06SucessfullSaleIfEverythingIsOk stamp: 'DA 6/9/2023 18:02:25'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'DA 6/9/2023 18:02:39' prior: 50640083!
test01CannotCheckoutAnEmptyCart
	|cart salesBook|
	
	cart := testStoreObjects createCart.
	salesBook := OrderedCollection new.
	
	self 
		should: [Cashier checkout: cart
				charging: testStoreObjects notExpiredCreditCard
				through: self
				on: testStoreObjects today
				registerIn: salesBook.]  
		raise: Error
		withExceptionDo: [:anError|
			self assert: anError messageText equals: Cashier emptyCartErrorMessage.
			self assert: salesBook isEmpty.
			]
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'DA 6/9/2023 18:02:46' prior: 50639740!
test02SuccesfullCheckoutCartWithOneProduct
	|cart salesBook cashier |
	cart := testStoreObjects createCart.
	cart addQuantity: 1 ofBook: testStoreObjects bookPublished.
	salesBook := OrderedCollection new.
	
	cashier := Cashier checkout: cart 
					charging: testStoreObjects notExpiredCreditCard 
					through: self
					on: testStoreObjects today
					registerIn: salesBook.
	
	self assert: cashier checkout = 10.  
	self assert: salesBook size = 1.
	self assert: salesBook first = cashier checkout.! !

----SNAPSHOT----(9 June 2023 18:03:57) CuisUniversity-5832.image priorSource: 9828821!

----QUIT----(9 June 2023 18:11:20) CuisUniversity-5832.image priorSource: 9881464!