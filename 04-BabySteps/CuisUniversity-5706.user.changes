

----QUIT----(20 March 2023 11:15:29) CuisUniversity-5706.image priorSource: 4313282!

----STARTUP---- (20 March 2023 11:15:29) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-5706.image!


----QUIT----(20 March 2023 11:15:30) CuisUniversity-5706.image priorSource: 8712809!

----STARTUP---- (27 April 2023 18:15:56) as /home/julian/Escritorio/linux64/CuisUniversity-5706.image!


----End fileIn of /home/julian/Escritorio/linux64/TDDBabyStepsGame.st----!

TDDBabyStepsGameRot13 start !

!classDefinition: #TDDBabyStepsRot13Test category: 'TDDBabyStepsGameRot13' stamp: 'jul 4/27/2023 18:19:53'!
TestCase subclass: #TDDBabyStepsRot13Test
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGameRot13'!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'jul 4/27/2023 18:20:09'!
test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet
	
	self assert: $n equals: $a asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'jul 4/27/2023 18:20:36'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'jul 4/27/2023 18:20:36'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'jul 4/27/2023 18:22:02'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'jul 4/27/2023 18:22:02'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'jul 4/27/2023 18:22:15'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'jul 4/27/2023 18:22:15'!
ERROR!
!Character methodsFor: 'caracter' stamp: 'jul 4/27/2023 18:22:50'!
asRot13
	self shouldBeImplemented.! !
!Character methodsFor: 'caracter' stamp: 'jul 4/27/2023 18:23:13' prior: 50605779!
asRot13
	^$n.! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'jul 4/27/2023 18:23:23'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'jul 4/27/2023 18:23:46'!
PASSED!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'jul 4/27/2023 18:23:46'!
test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet
	
	self assert: $z equals: $m asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'jul 4/27/2023 18:23:46'!
FAILURE!

!methodRemoval: TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'jul 4/27/2023 18:23:46'!
test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet
	
	self assert: $z equals: $m asRot13
	!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'jul 4/27/2023 18:23:46'!
test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet
	
	self assert: $z equals: $m asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'jul 4/27/2023 18:23:46'!
FAILURE!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'jul 4/27/2023 18:26:04' prior: 50605813!
test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet
	"a..m -> n..z"
	self assert: $z equals: $m asRot13
	! !
!Character methodsFor: 'caracter' stamp: 'jul 4/27/2023 18:29:38' prior: 50605783!
asRot13
	^(($n numericValue ) - 13 ) characterTable ! !

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'jul 4/27/2023 18:29:42'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'jul 4/27/2023 18:29:42'!
ERROR!

$n numericValue!

$n numericValue !

$n numericValue !

$n numericValue - 13!

$n numericValue - 13!

($n numericValue - 13) characterTable !
!Character methodsFor: 'caracter' stamp: 'jul 4/27/2023 18:33:43' prior: 50605831!
asRot13
	^(($n numericValue ) - 13 ) asCharacter ! !

($n numericValue - 13) asCharacter !

($m numericValue - 13) asCharacter !

($m numericValue - 13 + 1) asCharacter!

($n numericValue - 13 + 1) asCharacter!
!Character methodsFor: 'caracter' stamp: 'jul 4/27/2023 18:37:57' prior: 50605849!
asRot13
	^((self numericValue ) - 13 ) asCharacter ! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'jul 4/27/2023 18:38:43'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'jul 4/27/2023 18:38:43'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'jul 4/27/2023 18:38:48'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'jul 4/27/2023 18:38:48'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'jul 4/27/2023 18:38:55'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'jul 4/27/2023 18:38:55'!
FAILURE!

($a numericValue - 13) asCharacter!

($a numericValue - 13 +1) asCharacter!

($a numericValue + 13 ) asCharacter!
!Character methodsFor: 'caracter' stamp: 'jul 4/27/2023 18:40:34' prior: 50605859!
asRot13
	^(($n numericValue ) - 13 ) asCharacter ! !
!Character methodsFor: 'caracter' stamp: 'jul 4/27/2023 18:41:22' prior: 50605894!
asRot13
	^self! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'jul 4/27/2023 18:41:33'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'jul 4/27/2023 18:41:33'!
FAILURE!
!Character methodsFor: 'caracter' stamp: 'jul 4/27/2023 18:41:53' prior: 50605899!
asRot13
	^$n! !
!Character methodsFor: 'caracter' stamp: 'jul 4/27/2023 18:47:10' prior: 50605912!
asRot13
	^(self numericValue +13) asCharacter ! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'jul 4/27/2023 18:50:14'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'jul 4/27/2023 18:50:16'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'jul 4/27/2023 18:51:16'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'jul 4/27/2023 18:51:16'!
PASSED!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'jul 4/27/2023 18:51:16'!
test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet
	
	self assert: $a equals: $n asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'jul 4/27/2023 18:51:16'!
FAILURE!

!methodRemoval: TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'jul 4/27/2023 18:51:16'!
test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet
	
	self assert: $a equals: $n asRot13
	!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'jul 4/27/2023 18:51:16'!
test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet
	
	self assert: $a equals: $n asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'jul 4/27/2023 18:51:16'!
FAILURE!

($n numericValue + 13 ) asCharacter!

($n numericValue - 13 ) asCharacter!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'jul 4/27/2023 18:53:30'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'jul 4/27/2023 18:53:30'!
FAILURE!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'jul 4/27/2023 18:55:40' prior: 50605957!
test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet
	self asciiValue	
	! !
!Character methodsFor: 'caracter' stamp: 'jul 4/27/2023 18:58:50' prior: 50605916!
asRot13
	(self numericValue > $m numericValue) ifTrue: [ ^(self numericValue - 13 ) asCharacter ]
	^(self numericValue +13) asCharacter ! !
!Character methodsFor: 'caracter' stamp: 'jul 4/27/2023 18:58:53' prior: 50605986!
asRot13
	(self numericValue > $m numericValue) ifTrue: [ ^(self numericValue - 13 ) asCharacter ].
	^(self numericValue +13) asCharacter ! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'jul 4/27/2023 18:58:58'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'jul 4/27/2023 18:58:58'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'jul 4/27/2023 18:58:58'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'jul 4/27/2023 18:58:58'!
ERROR!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'jul 4/27/2023 18:59:25' prior: 50605980!
test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet
	
	self assert: $a equals: $n asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'jul 4/27/2023 18:59:28'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'jul 4/27/2023 18:59:32'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'jul 4/27/2023 18:59:32'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'jul 4/27/2023 18:59:32'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'jul 4/27/2023 18:59:52'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'jul 4/27/2023 18:59:52'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'jul 4/27/2023 18:59:52'!
PASSED!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'jul 4/27/2023 18:59:52'!
test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet
	
	self assert: $m equals: $z asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'jul 4/27/2023 18:59:52'!
PASSED!

!methodRemoval: TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'jul 4/27/2023 18:59:52'!
test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet
	
	self assert: $m equals: $z asRot13
	!
!Character methodsFor: 'caracter' stamp: 'jul 4/27/2023 19:01:13' prior: 50605993!
asRot13
	"(self numericValue > $m numericValue) ifTrue: [ ^(self numericValue - 13 ) asCharacter ].
	^(self numericValue +13) asCharacter "! !
!Character methodsFor: 'caracter' stamp: 'jul 4/27/2023 19:03:02' prior: 50606075!
asRot13
	(self asciiValue = $n) ifTrue: [^$a].
	^$n
	"(self numericValue > $m numericValue) ifTrue: [ ^(self numericValue - 13 ) asCharacter ].
	^(self numericValue +13) asCharacter "! !
!Character methodsFor: 'caracter' stamp: 'jul 4/27/2023 19:04:18' prior: 50606083!
asRot13
	(self asciiValue = $n) ifTrue: [^$a].
	( self asciiValue = $m) ifTrue: [^$z].
	( self asciiValue = $a) ifTrue: [^$n].
	"(self numericValue > $m numericValue) ifTrue: [ ^(self numericValue - 13 ) asCharacter ].
	^(self numericValue +13) asCharacter "! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'jul 4/27/2023 19:04:28'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'jul 4/27/2023 19:04:28'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'jul 4/27/2023 19:04:28'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'jul 4/27/2023 19:04:36'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'jul 4/27/2023 19:04:36'!
FAILURE!

$a asciiValue !
!Character methodsFor: 'caracter' stamp: 'jul 4/27/2023 19:05:55' prior: 50606092!
asRot13
	(self asCharacter = $n) ifTrue: [^$a].
	( self asCharacter = $m) ifTrue: [^$z].
	( self asCharacter = $a) ifTrue: [^$n].
	"(self numericValue > $m numericValue) ifTrue: [ ^(self numericValue - 13 ) asCharacter ].
	^(self numericValue +13) asCharacter "! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'jul 4/27/2023 19:05:59'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'jul 4/27/2023 19:05:59'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'jul 4/27/2023 19:05:59'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'jul 4/27/2023 19:06:04'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'jul 4/27/2023 19:06:04'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'jul 4/27/2023 19:06:04'!
PASSED!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'jul 4/27/2023 19:06:04'!
test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet
	
	self assert: $m equals: $z asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'jul 4/27/2023 19:06:04'!
FAILURE!

!methodRemoval: TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'jul 4/27/2023 19:06:04'!
test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet
	
	self assert: $m equals: $z asRot13
	!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'jul 4/27/2023 19:06:04'!
test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet
	
	self assert: $m equals: $z asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'jul 4/27/2023 19:06:04'!
FAILURE!
!Character methodsFor: 'caracter' stamp: 'jul 4/27/2023 19:06:42' prior: 50606126!
asRot13
	(self asCharacter = $n) ifTrue: [^$a].
	( self asCharacter = $m) ifTrue: [^$z].
	( self asCharacter = $a) ifTrue: [^$n].
	( self asCharacter = $z) ifTrue: [^$m].
	"(self numericValue > $m numericValue) ifTrue: [ ^(self numericValue - 13 ) asCharacter ].
	^(self numericValue +13) asCharacter "! !

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'jul 4/27/2023 19:07:01'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'jul 4/27/2023 19:07:09'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'jul 4/27/2023 19:07:09'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'jul 4/27/2023 19:07:09'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'jul 4/27/2023 19:07:09'!
PASSED!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'jul 4/27/2023 19:07:09'!
test05CharOnTheBelowRangeDoesntChange
	
	self assert: $` equals: $` asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'jul 4/27/2023 19:07:09'!
PASSED!

!methodRemoval: TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'jul 4/27/2023 19:07:09'!
test05CharOnTheBelowRangeDoesntChange
	
	self assert: $` equals: $` asRot13
	!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'jul 4/27/2023 19:08:04'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'jul 4/27/2023 19:08:04'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'jul 4/27/2023 19:08:04'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'jul 4/27/2023 19:08:04'!
PASSED!
!Character methodsFor: 'caracter' stamp: 'jul 4/27/2023 19:10:05' prior: 50606194!
asRot13
"	(self asCharacter = $n) ifTrue: [^$a].
	( self asCharacter = $m) ifTrue: [^$z].
	( self asCharacter = $a) ifTrue: [^$n].
	( self asCharacter = $z) ifTrue: [^$m]."
	(self numericValue > $m numericValue) ifTrue: [ ^(self numericValue - 13 ) asCharacter ].
	^(self numericValue +13) asCharacter ! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'jul 4/27/2023 19:10:16'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'jul 4/27/2023 19:10:16'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'jul 4/27/2023 19:10:16'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'jul 4/27/2023 19:10:16'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'jul 4/27/2023 19:10:21'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'jul 4/27/2023 19:10:21'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'jul 4/27/2023 19:10:21'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'jul 4/27/2023 19:10:21'!
PASSED!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'jul 4/27/2023 19:10:21'!
test05CharOnTheBelowRangeDoesntChange
	
	self assert: $` equals: $` asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'jul 4/27/2023 19:10:21'!
FAILURE!

!methodRemoval: TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'jul 4/27/2023 19:10:21'!
test05CharOnTheBelowRangeDoesntChange
	
	self assert: $` equals: $` asRot13
	!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'jul 4/27/2023 19:10:21'!
test05CharOnTheBelowRangeDoesntChange
	
	self assert: $` equals: $` asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'jul 4/27/2023 19:10:21'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'jul 4/27/2023 19:10:45'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'jul 4/27/2023 19:10:45'!
FAILURE!
!Character methodsFor: 'caracter' stamp: 'jul 4/27/2023 19:17:50' prior: 50606262!
asRot13
	(self asCharacter = $n) ifTrue: [^$a].
	( self asCharacter = $m) ifTrue: [^$z].
	( self asCharacter = $a) ifTrue: [^$n].
	( self asCharacter = $z) ifTrue: [^$m].
	(self asciiValue < $a asciiValue or: self asciiValue  > $z asciiValue ) ifTrue: [^self]
	"ifTrue: [ ^(self numericValue - 13 ) asCharacter ].
	^(self numericValue +13) asCharacter "! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'jul 4/27/2023 19:18:02'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'jul 4/27/2023 19:18:02'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'jul 4/27/2023 19:18:02'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'jul 4/27/2023 19:18:02'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'jul 4/27/2023 19:18:02'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'jul 4/27/2023 19:18:09'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'jul 4/27/2023 19:18:09'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'jul 4/27/2023 19:18:09'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'jul 4/27/2023 19:18:09'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'jul 4/27/2023 19:18:09'!
PASSED!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'jul 4/27/2023 19:18:09'!
test06CharOnTheUpperRangeDoesntChange
	
	self assert: ${ equals: ${ asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'jul 4/27/2023 19:18:09'!
PASSED!

!methodRemoval: TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'jul 4/27/2023 19:18:09'!
test06CharOnTheUpperRangeDoesntChange
	
	self assert: ${ equals: ${ asRot13
	!
!Character methodsFor: 'caracter' stamp: 'jul 4/27/2023 19:19:49' prior: 50606341!
asRot13
	(self asCharacter = $n) ifTrue: [^$a].
	( self asCharacter = $m) ifTrue: [^$z].
	( self asCharacter = $a) ifTrue: [^$n].
	( self asCharacter = $z) ifTrue: [^$m].
	(self asCharacter  = $`) ifTrue: [^$`].
	"(self asciiValue < $a asciiValue or: self asciiValue  > $z asciiValue ) ifTrue: [^self]"
	"ifTrue: [ ^(self numericValue - 13 ) asCharacter ].
	^(self numericValue +13) asCharacter "! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'jul 4/27/2023 19:19:56'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'jul 4/27/2023 19:19:56'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'jul 4/27/2023 19:19:56'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'jul 4/27/2023 19:19:56'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'jul 4/27/2023 19:19:56'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'jul 4/27/2023 19:20:26'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'jul 4/27/2023 19:20:26'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'jul 4/27/2023 19:20:26'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'jul 4/27/2023 19:20:26'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'jul 4/27/2023 19:20:26'!
PASSED!
!Character methodsFor: 'caracter' stamp: 'jul 4/27/2023 19:21:41' prior: 50606413!
asRot13
	"(self asCharacter = $n) ifTrue: [^$a].
	( self asCharacter = $m) ifTrue: [^$z].
	( self asCharacter = $a) ifTrue: [^$n].
	( self asCharacter = $z) ifTrue: [^$m]."
	(self asCharacter  = $`) ifTrue: [^$`].
	(self asciiValue >= $a asciiValue or: self asciiValue  <= $z asciiValue ) ifTrue: [ ^(self numericValue - 13 ) asCharacter ].
	^(self numericValue +13) asCharacter ! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'jul 4/27/2023 19:21:49'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'jul 4/27/2023 19:21:50'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'jul 4/27/2023 19:21:50'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'jul 4/27/2023 19:21:50'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'jul 4/27/2023 19:21:50'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'jul 4/27/2023 19:22:09'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'jul 4/27/2023 19:22:09'!
FAILURE!

----SNAPSHOT----(27 April 2023 19:25:47) CuisUniversity-5706.image priorSource: 8713034!
!Character methodsFor: 'caracter' stamp: 'jul 4/27/2023 19:27:24' prior: 50606471!
asRot13
	"(self asCharacter = $n) ifTrue: [^$a].
	( self asCharacter = $m) ifTrue: [^$z].
	( self asCharacter = $a) ifTrue: [^$n].
	( self asCharacter = $z) ifTrue: [^$m]."
	(self asCharacter  = $`) ifTrue: [^$`].
	(self asciiValue >= $a asciiValue and: $m asciiValue >= self asciiValue ) ifTrue: [^(self numericValue +13) asCharacter]. 
	(self asciiValue >= $n asciiValue and: $z asciiValue >= self asciiValue ) ifTrue: [^(self numericValue -13) asCharacter]. 
	! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'jul 4/27/2023 19:27:32'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'jul 4/27/2023 19:27:32'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'jul 4/27/2023 19:27:32'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'jul 4/27/2023 19:27:32'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'jul 4/27/2023 19:27:32'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'jul 4/27/2023 19:27:38'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'jul 4/27/2023 19:27:38'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'jul 4/27/2023 19:27:38'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'jul 4/27/2023 19:27:38'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'jul 4/27/2023 19:27:38'!
PASSED!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'jul 4/27/2023 19:27:38'!
test06CharOnTheUpperRangeDoesntChange
	
	self assert: ${ equals: ${ asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'jul 4/27/2023 19:27:38'!
PASSED!

!methodRemoval: TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'jul 4/27/2023 19:27:38'!
test06CharOnTheUpperRangeDoesntChange
	
	self assert: ${ equals: ${ asRot13
	!
!Character methodsFor: 'caracter' stamp: 'jul 4/27/2023 19:30:01' prior: 50606519!
asRot13
	"(self asCharacter = $n) ifTrue: [^$a].
	( self asCharacter = $m) ifTrue: [^$z].
	( self asCharacter = $a) ifTrue: [^$n].
	( self asCharacter = $z) ifTrue: [^$m]."
	"(self asCharacter  = $`) ifTrue: [^$`]."
	(self asciiValue >= $a asciiValue and: $m asciiValue >= self asciiValue ) ifTrue: [^(self numericValue +13) asCharacter]. 
	(self asciiValue >= $n asciiValue and: $z asciiValue >= self asciiValue ) ifTrue: [^(self numericValue -13) asCharacter]. 
	^self! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'jul 4/27/2023 19:30:07'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'jul 4/27/2023 19:30:07'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'jul 4/27/2023 19:30:07'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'jul 4/27/2023 19:30:07'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'jul 4/27/2023 19:30:07'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'jul 4/27/2023 19:30:11'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'jul 4/27/2023 19:30:11'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'jul 4/27/2023 19:30:11'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'jul 4/27/2023 19:30:11'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'jul 4/27/2023 19:30:11'!
PASSED!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'jul 4/27/2023 19:30:11'!
test06CharOnTheUpperRangeDoesntChange
	
	self assert: ${ equals: ${ asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'jul 4/27/2023 19:30:11'!
PASSED!

!methodRemoval: TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'jul 4/27/2023 19:30:11'!
test06CharOnTheUpperRangeDoesntChange
	
	self assert: ${ equals: ${ asRot13
	!
!Character methodsFor: 'caracter' stamp: 'jul 4/27/2023 19:30:49' prior: 50606594!
asRot13
	"(self asCharacter = $n) ifTrue: [^$a].
	( self asCharacter = $m) ifTrue: [^$z].
	( self asCharacter = $a) ifTrue: [^$n].
	( self asCharacter = $z) ifTrue: [^$m]."
	^self
	"(self asCharacter  = $`) ifTrue: [^$`].
	(self asciiValue >= $a asciiValue and: $m asciiValue >= self asciiValue ) ifTrue: [^(self numericValue +13) asCharacter]. 
	(self asciiValue >= $n asciiValue and: $z asciiValue >= self asciiValue ) ifTrue: [^(self numericValue -13) asCharacter]. 
	^self"! !
!Character methodsFor: 'caracter' stamp: 'jul 4/27/2023 19:30:54' prior: 50606669!
asRot13
	(self asCharacter = $n) ifTrue: [^$a].
	( self asCharacter = $m) ifTrue: [^$z].
	( self asCharacter = $a) ifTrue: [^$n].
	( self asCharacter = $z) ifTrue: [^$m].
	^self
	"(self asCharacter  = $`) ifTrue: [^$`].
	(self asciiValue >= $a asciiValue and: $m asciiValue >= self asciiValue ) ifTrue: [^(self numericValue +13) asCharacter]. 
	(self asciiValue >= $n asciiValue and: $z asciiValue >= self asciiValue ) ifTrue: [^(self numericValue -13) asCharacter]. 
	^self"! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'jul 4/27/2023 19:31:00'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'jul 4/27/2023 19:31:00'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'jul 4/27/2023 19:31:00'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'jul 4/27/2023 19:31:00'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'jul 4/27/2023 19:31:00'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'jul 4/27/2023 19:31:04'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'jul 4/27/2023 19:31:04'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'jul 4/27/2023 19:31:04'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'jul 4/27/2023 19:31:04'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'jul 4/27/2023 19:31:04'!
PASSED!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'jul 4/27/2023 19:31:04'!
test06CharOnTheUpperRangeDoesntChange
	
	self assert: ${ equals: ${ asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'jul 4/27/2023 19:31:04'!
PASSED!

!methodRemoval: TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'jul 4/27/2023 19:31:04'!
test06CharOnTheUpperRangeDoesntChange
	
	self assert: ${ equals: ${ asRot13
	!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'jul 4/27/2023 19:31:07'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'jul 4/27/2023 19:31:07'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'jul 4/27/2023 19:31:07'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'jul 4/27/2023 19:31:07'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'jul 4/27/2023 19:31:07'!
PASSED!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'jul 4/27/2023 19:31:07'!
test06CharOnTheUpperRangeDoesntChange
	
	self assert: ${ equals: ${ asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'jul 4/27/2023 19:31:07'!
PASSED!

!methodRemoval: TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'jul 4/27/2023 19:31:07'!
test06CharOnTheUpperRangeDoesntChange
	
	self assert: ${ equals: ${ asRot13
	!
!Character methodsFor: 'caracter' stamp: 'jul 4/27/2023 19:36:25' prior: 50606687!
asRot13
	"(self asCharacter = $n) ifTrue: [^$a].
	( self asCharacter = $m) ifTrue: [^$z].
	( self asCharacter = $a) ifTrue: [^$n].
	( self asCharacter = $z) ifTrue: [^$m].
	(self asCharacter  = $`) ifTrue: [^$`]."
	(self asciiValue >= $a asciiValue and: $m asciiValue >= self asciiValue ) ifTrue: [^(self numericValue +13) asCharacter]. 
	(self asciiValue >= $n asciiValue and: $z asciiValue >= self asciiValue ) ifTrue: [^(self numericValue -13) asCharacter]. 
	^$`.! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'jul 4/27/2023 19:37:02'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'jul 4/27/2023 19:37:02'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'jul 4/27/2023 19:37:02'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'jul 4/27/2023 19:37:02'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'jul 4/27/2023 19:37:02'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'jul 4/27/2023 19:37:07'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'jul 4/27/2023 19:37:07'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'jul 4/27/2023 19:37:07'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'jul 4/27/2023 19:37:07'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'jul 4/27/2023 19:37:07'!
PASSED!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'jul 4/27/2023 19:37:07'!
test06CharOnTheUpperRangeDoesntChange
	
	self assert: ${ equals: ${ asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'jul 4/27/2023 19:37:07'!
FAILURE!

!methodRemoval: TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'jul 4/27/2023 19:37:07'!
test06CharOnTheUpperRangeDoesntChange
	
	self assert: ${ equals: ${ asRot13
	!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'jul 4/27/2023 19:37:07'!
test06CharOnTheUpperRangeDoesntChange
	
	self assert: ${ equals: ${ asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'jul 4/27/2023 19:37:07'!
FAILURE!
!Character methodsFor: 'caracter' stamp: 'jul 4/27/2023 19:44:20' prior: 50606799!
asRot13
	"(self asCharacter = $n) ifTrue: [^$a].
	( self asCharacter = $m) ifTrue: [^$z].
	( self asCharacter = $a) ifTrue: [^$n].
	( self asCharacter = $z) ifTrue: [^$m].
	(self asCharacter  = $`) ifTrue: [^$`]."
	(self asciiValue >= $a asciiValue and: $m asciiValue >= self asciiValue ) ifTrue: [^(self numericValue +13) asCharacter]. 
	(self asciiValue >= $n asciiValue and: $z asciiValue >= self asciiValue ) ifTrue: [^(self numericValue -13) asCharacter]. 
	self = $` ifTrue: [ ^$` ]
	^${! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'jul 4/27/2023 19:44:28'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'jul 4/27/2023 19:44:28'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'jul 4/27/2023 19:44:28'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'jul 4/27/2023 19:44:28'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'jul 4/27/2023 19:44:28'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'jul 4/27/2023 19:44:28'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'jul 4/27/2023 19:50:04'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'jul 4/27/2023 19:50:04'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'jul 4/27/2023 19:50:04'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'jul 4/27/2023 19:50:04'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'jul 4/27/2023 19:50:04'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'jul 4/27/2023 19:50:04'!
ERROR!
!Character methodsFor: 'caracter' stamp: 'jul 4/27/2023 19:50:38' prior: 50606883!
asRot13
	"(self asCharacter = $n) ifTrue: [^$a].
	( self asCharacter = $m) ifTrue: [^$z].
	( self asCharacter = $a) ifTrue: [^$n].
	( self asCharacter = $z) ifTrue: [^$m].
	(self asCharacter  = $`) ifTrue: [^$`]."
	(self asciiValue >= $a asciiValue and: $m asciiValue >= self asciiValue ) ifTrue: [^(self numericValue +13) asCharacter]. 
	(self asciiValue >= $n asciiValue and: $z asciiValue >= self asciiValue ) ifTrue: [^(self numericValue -13) asCharacter]. 
	(self = $`) ifTrue: [ ^$` ].
	^${! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'jul 4/27/2023 19:50:55'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'jul 4/27/2023 19:50:55'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'jul 4/27/2023 19:50:55'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'jul 4/27/2023 19:50:55'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'jul 4/27/2023 19:50:55'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'jul 4/27/2023 19:50:55'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'jul 4/27/2023 19:51:06'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'jul 4/27/2023 19:51:06'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'jul 4/27/2023 19:51:06'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'jul 4/27/2023 19:51:06'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'jul 4/27/2023 19:51:06'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'jul 4/27/2023 19:51:06'!
PASSED!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'jul 4/27/2023 19:51:06'!
test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet
	
	self assert: $N equals: $A asRot13.
	self assert: $Z equals: $M asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'jul 4/27/2023 19:51:06'!
FAILURE!

!methodRemoval: TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'jul 4/27/2023 19:51:06'!
test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet
	
	self assert: $N equals: $A asRot13.
	self assert: $Z equals: $M asRot13
	!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'jul 4/27/2023 19:51:06'!
test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet
	
	self assert: $N equals: $A asRot13.
	self assert: $Z equals: $M asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'jul 4/27/2023 19:51:06'!
FAILURE!

----SNAPSHOT----(27 April 2023 19:57:25) CuisUniversity-5706.image priorSource: 8795690!

TDDBabyStepsGamePrimeFactors start!

!classDefinition: #TDDBabyStepsPrimeFactorsTest category: 'TDDBabyStepsGamePrimeFactors' stamp: 'jul 4/27/2023 19:58:19'!
TestCase subclass: #TDDBabyStepsPrimeFactorsTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGamePrimeFactors'!
!TDDBabyStepsPrimeFactorsTest methodsFor: 'tests' stamp: 'jul 4/27/2023 20:25:37'!
test01OneHasNoPrimeFactors
	
	self assert: Bag new equals: 1 factorize
	! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'jul 4/27/2023 20:25:54'!
ERROR!

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'jul 4/27/2023 20:25:54'!
ERROR!

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'jul 4/27/2023 20:26:19'!
ERROR!

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'jul 4/27/2023 20:26:19'!
ERROR!
!Number methodsFor: 'arithmetic' stamp: 'jul 4/27/2023 20:26:53'!
factorize
	self shouldBeImplemented.! !
!Number methodsFor: 'arithmetic' stamp: 'jul 4/27/2023 20:31:39' prior: 50607084!
factorize
	^ Bag new ! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'jul 4/27/2023 20:31:44'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'jul 4/27/2023 20:31:58'!
PASSED!
!TDDBabyStepsPrimeFactorsTest methodsFor: 'tests' stamp: 'jul 4/27/2023 20:31:58'!
test02FactorsOfAPrimeNumberAreThePrimeNumber

	self assert: (Bag with: 2) equals: 2 factorize
	! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'jul 4/27/2023 20:31:58'!
FAILURE!

!methodRemoval: TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'jul 4/27/2023 20:31:58'!
test02FactorsOfAPrimeNumberAreThePrimeNumber

	self assert: (Bag with: 2) equals: 2 factorize
	!
!TDDBabyStepsPrimeFactorsTest methodsFor: 'tests' stamp: 'jul 4/27/2023 20:31:58'!
test02FactorsOfAPrimeNumberAreThePrimeNumber

	self assert: (Bag with: 2) equals: 2 factorize
	! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'jul 4/27/2023 20:31:58'!
FAILURE!
!Number methodsFor: 'arithmetic' stamp: 'jul 4/27/2023 20:34:17' prior: 50607088!
factorize
	(self = 1) ifTrue: [^Bag new].
	^Bag with: 2.! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'jul 4/27/2023 20:34:21'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'jul 4/27/2023 20:34:21'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'jul 4/27/2023 20:34:29'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'jul 4/27/2023 20:34:29'!
PASSED!
!TDDBabyStepsPrimeFactorsTest methodsFor: 'tests' stamp: 'jul 4/27/2023 20:34:29'!
test03FactorsOfAPrimeNumberAreThePrimeNumber

	self assert: (Bag with: 3) equals: 3 factorize
	! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'jul 4/27/2023 20:34:29'!
FAILURE!

!methodRemoval: TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'jul 4/27/2023 20:34:29'!
test03FactorsOfAPrimeNumberAreThePrimeNumber

	self assert: (Bag with: 3) equals: 3 factorize
	!
!TDDBabyStepsPrimeFactorsTest methodsFor: 'tests' stamp: 'jul 4/27/2023 20:34:29'!
test03FactorsOfAPrimeNumberAreThePrimeNumber

	self assert: (Bag with: 3) equals: 3 factorize
	! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'jul 4/27/2023 20:34:29'!
FAILURE!
!Number methodsFor: 'arithmetic' stamp: 'jul 4/27/2023 20:35:47' prior: 50607126!
factorize
	(self = 1) ifTrue: [^Bag new].
	(self = 2 or: self = 3) ifTrue: [ ^Bag with: self ].
	! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'jul 4/27/2023 20:36:03'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'jul 4/27/2023 20:36:03'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'jul 4/27/2023 20:36:03'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'jul 4/27/2023 20:36:07'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'jul 4/27/2023 20:36:07'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'jul 4/27/2023 20:36:07'!
PASSED!
!TDDBabyStepsPrimeFactorsTest methodsFor: 'tests' stamp: 'jul 4/27/2023 20:36:07'!
test04CorrectlyFactorizesACompositeNumberWithTwoFactors2
	
	self assert: (Bag with: 2 with: 2) equals: 4 factorize
	! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'jul 4/27/2023 20:36:07'!
FAILURE!

!methodRemoval: TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'jul 4/27/2023 20:36:07'!
test04CorrectlyFactorizesACompositeNumberWithTwoFactors2
	
	self assert: (Bag with: 2 with: 2) equals: 4 factorize
	!
!TDDBabyStepsPrimeFactorsTest methodsFor: 'tests' stamp: 'jul 4/27/2023 20:36:07'!
test04CorrectlyFactorizesACompositeNumberWithTwoFactors2
	
	self assert: (Bag with: 2 with: 2) equals: 4 factorize
	! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'jul 4/27/2023 20:36:07'!
FAILURE!
!Number methodsFor: 'arithmetic' stamp: 'jul 4/27/2023 20:38:56' prior: 50607173!
factorize
	(self = 1) ifTrue: [^Bag new].
	(self = 2 or: self = 3) ifTrue: [ ^Bag with: self ].
	( self = 4 ) ifTrue: [ ^Bag with: 2 with: 2].
	! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'jul 4/27/2023 20:39:01'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'jul 4/27/2023 20:39:01'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'jul 4/27/2023 20:39:01'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'jul 4/27/2023 20:39:01'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'jul 4/27/2023 20:39:06'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'jul 4/27/2023 20:39:06'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'jul 4/27/2023 20:39:06'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'jul 4/27/2023 20:39:06'!
PASSED!
!TDDBabyStepsPrimeFactorsTest methodsFor: 'tests' stamp: 'jul 4/27/2023 20:39:06'!
test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2
	
	self assert: (Bag with: 2 with: 2 with: 2) equals: 8 factorize
	! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2 stamp: 'jul 4/27/2023 20:39:06'!
FAILURE!

!methodRemoval: TDDBabyStepsPrimeFactorsTest #test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2 stamp: 'jul 4/27/2023 20:39:06'!
test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2
	
	self assert: (Bag with: 2 with: 2 with: 2) equals: 8 factorize
	!
!TDDBabyStepsPrimeFactorsTest methodsFor: 'tests' stamp: 'jul 4/27/2023 20:39:06'!
test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2
	
	self assert: (Bag with: 2 with: 2 with: 2) equals: 8 factorize
	! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2 stamp: 'jul 4/27/2023 20:39:06'!
FAILURE!
!Number methodsFor: 'arithmetic' stamp: 'jul 4/27/2023 20:40:25' prior: 50607232!
factorize
	(self = 1) ifTrue: [^Bag new].
	(self = 2 or: self = 3) ifTrue: [ ^Bag with: self ].
	( self = 4 ) ifTrue: [ ^Bag with: ( 4/2 factorize )].
	! !
!Number methodsFor: 'arithmetic' stamp: 'jul 4/27/2023 20:43:33' prior: 50607304!
factorize
	(self = 1) ifTrue: [^Bag new].
	(self = 2 or: self = 3) ifTrue: [ ^Bag with: self ].
	( self odd ) ifTrue: [ ^Bag with: 2 with: (self/2 factorize) ].
	! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'jul 4/27/2023 20:43:37'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'jul 4/27/2023 20:43:37'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'jul 4/27/2023 20:43:37'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'jul 4/27/2023 20:43:37'!
FAILURE!

!testRun: #TDDBabyStepsPrimeFactorsTest #test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2 stamp: 'jul 4/27/2023 20:43:37'!
FAILURE!
!Number methodsFor: 'arithmetic' stamp: 'jul 4/27/2023 20:44:26' prior: 50607312!
factorize
	(self = 1) ifTrue: [^Bag new].
	(self = 2 or: self = 3) ifTrue: [ ^Bag with: self ].
	( self odd ) ifTrue: [ ^Bag with: 2 with: self/2 factorize ].
	! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'jul 4/27/2023 20:44:30'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'jul 4/27/2023 20:44:30'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'jul 4/27/2023 20:44:30'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'jul 4/27/2023 20:44:30'!
FAILURE!

!testRun: #TDDBabyStepsPrimeFactorsTest #test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2 stamp: 'jul 4/27/2023 20:44:30'!
FAILURE!
!Number methodsFor: 'arithmetic' stamp: 'jul 4/27/2023 20:45:24' prior: 50607341!
factorize
	(self = 1) ifTrue: [^Bag new].
	"(self = 2 or: self = 3) ifTrue: [ ^Bag with: self ]."
	( self odd ) ifTrue: [ ^Bag with: 2 with: self/2 factorize ].
	( self = 3 ) ifTrue: [^Bag with: self]! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'jul 4/27/2023 20:45:28'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'jul 4/27/2023 20:45:28'!
FAILURE!

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'jul 4/27/2023 20:45:28'!
FAILURE!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'jul 4/27/2023 20:45:28'!
FAILURE!

!testRun: #TDDBabyStepsPrimeFactorsTest #test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2 stamp: 'jul 4/27/2023 20:45:28'!
FAILURE!
!Number methodsFor: 'arithmetic' stamp: 'jul 4/27/2023 20:46:40' prior: 50607370!
factorize
	| div |
	(self = 1) ifTrue: [^Bag new].
	(self = 2 or: self = 3) ifTrue: [ ^Bag with: self ].
	div := self/2.
	( self odd ) ifTrue: [ ^Bag with: 2 with: self/2 factorize ].
	! !
!Number methodsFor: 'arithmetic' stamp: 'jul 4/27/2023 20:46:48' prior: 50607400!
factorize
	| div |
	(self = 1) ifTrue: [^Bag new].
	(self = 2 or: self = 3) ifTrue: [ ^Bag with: self ].
	div := self/2.
	( self odd ) ifTrue: [ ^Bag with: 2 with: div factorize ].
	! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'jul 4/27/2023 20:46:53'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'jul 4/27/2023 20:46:53'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'jul 4/27/2023 20:46:53'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'jul 4/27/2023 20:46:53'!
FAILURE!

!testRun: #TDDBabyStepsPrimeFactorsTest #test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2 stamp: 'jul 4/27/2023 20:46:53'!
FAILURE!
!Number methodsFor: 'arithmetic' stamp: 'jul 4/27/2023 20:50:37' prior: 50607409!
factorize
	| div |
	(self = 1) ifTrue: [^Bag new].
	(self = 2 or: self = 3) ifTrue: [ ^Bag with: self ].
	div := self/2.
	( self even ) ifTrue: [ ^Bag with: 2 with: div factorize ].
	! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'jul 4/27/2023 20:50:45'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'jul 4/27/2023 20:50:45'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'jul 4/27/2023 20:50:45'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'jul 4/27/2023 20:50:45'!
FAILURE!

!testRun: #TDDBabyStepsPrimeFactorsTest #test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2 stamp: 'jul 4/27/2023 20:50:45'!
FAILURE!
!Number methodsFor: 'arithmetic' stamp: 'jul 4/27/2023 20:51:27' prior: 50607438!
factorize
	| div |
	(self = 1) ifTrue: [^Bag new].
	(self = 2 or: self = 3) ifTrue: [ ^Bag with: self ].
	div := self/2.
	( self even ) ifTrue: [ ^Bag with: 2 with: (div factorize) ].
	! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'jul 4/27/2023 20:52:34'!
FAILURE!

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'jul 4/27/2023 20:52:47'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'jul 4/27/2023 20:52:47'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'jul 4/27/2023 20:52:47'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'jul 4/27/2023 20:52:47'!
FAILURE!

!testRun: #TDDBabyStepsPrimeFactorsTest #test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2 stamp: 'jul 4/27/2023 20:52:47'!
FAILURE!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'jul 4/27/2023 20:52:53'!
FAILURE!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'jul 4/27/2023 20:52:53'!
FAILURE!
!Number methodsFor: 'arithmetic' stamp: 'jul 4/27/2023 20:54:31' prior: 50607467!
factorize
	| div |
	(self = 1) ifTrue: [^Bag new].
	(self = 2 or: self = 3) ifTrue: [ ^Bag with: self ].
	div := self/2.
	( self even ) ifTrue: [ ^(Bag with: (div factorize) )add: 2 ].
	! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'jul 4/27/2023 20:54:46'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'jul 4/27/2023 20:54:46'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'jul 4/27/2023 20:54:46'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'jul 4/27/2023 20:54:46'!
FAILURE!

!testRun: #TDDBabyStepsPrimeFactorsTest #test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2 stamp: 'jul 4/27/2023 20:54:46'!
FAILURE!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'jul 4/27/2023 20:54:53'!
FAILURE!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'jul 4/27/2023 20:54:53'!
FAILURE!
!Number methodsFor: 'arithmetic' stamp: 'jul 4/27/2023 20:59:38' prior: 50607510!
factorize
	| div |
	(self = 1) ifTrue: [^Bag new].
	(self = 2 or: self = 3) ifTrue: [ ^Bag with: self ].
	div := self/2.
	( self even ) ifTrue: [ ^ (  div factorize ) with: 2 ].
	! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'jul 4/27/2023 20:59:49'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'jul 4/27/2023 20:59:49'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'jul 4/27/2023 20:59:49'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'jul 4/27/2023 20:59:49'!
ERROR!

!testRun: #TDDBabyStepsPrimeFactorsTest #test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2 stamp: 'jul 4/27/2023 20:59:49'!
ERROR!
!Number methodsFor: 'arithmetic' stamp: 'jul 4/27/2023 21:00:17' prior: 50607548!
factorize
	| div |
	(self = 1) ifTrue: [^Bag new].
	(self = 2 or: self = 3) ifTrue: [ ^Bag with: self ].
	div := self/2.
	( self even ) ifTrue: [ ^ (  div factorize ) add: 2 ].
	! !
!Number methodsFor: 'arithmetic' stamp: 'jul 4/27/2023 21:01:01' prior: 50607577!
factorize
	| div |
	(self = 1) ifTrue: [^Bag new].
	(self = 2 or: self = 3) ifTrue: [ ^Bag with: self ].
	div := self/2.
	( self even ) ifTrue: [ ^ (  2 factorize ) add: 2 withOccurrences: div - 1].
	! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'jul 4/27/2023 21:01:23'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'jul 4/27/2023 21:01:23'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'jul 4/27/2023 21:01:23'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'jul 4/27/2023 21:01:23'!
FAILURE!

!testRun: #TDDBabyStepsPrimeFactorsTest #test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2 stamp: 'jul 4/27/2023 21:01:23'!
FAILURE!

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'jul 4/27/2023 21:01:28'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'jul 4/27/2023 21:01:28'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'jul 4/27/2023 21:01:28'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'jul 4/27/2023 21:01:28'!
FAILURE!

!testRun: #TDDBabyStepsPrimeFactorsTest #test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2 stamp: 'jul 4/27/2023 21:01:28'!
FAILURE!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'jul 4/27/2023 21:01:32'!
FAILURE!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'jul 4/27/2023 21:01:32'!
FAILURE!
!Number methodsFor: 'arithmetic' stamp: 'jul 4/27/2023 21:02:40' prior: 50607586!
factorize
	| div |
	(self = 1) ifTrue: [^Bag new].
	(self = 2 or: self = 3) ifTrue: [ ^Bag with: self ].
	div := self/2.
	( self even ) ifTrue: [ ^ (  2 factorize ) add: 2 withOccurrences: div - 1].
	^10000! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'jul 4/27/2023 21:02:43'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'jul 4/27/2023 21:02:43'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'jul 4/27/2023 21:02:43'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'jul 4/27/2023 21:02:43'!
FAILURE!

!testRun: #TDDBabyStepsPrimeFactorsTest #test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2 stamp: 'jul 4/27/2023 21:02:43'!
FAILURE!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'jul 4/27/2023 21:02:47'!
FAILURE!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'jul 4/27/2023 21:02:47'!
FAILURE!
!Number methodsFor: 'arithmetic' stamp: 'jul 4/27/2023 21:03:23' prior: 50607645!
factorize
	| div |
	(self = 1) ifTrue: [^Bag new].
	(self = 2 or: self = 3) ifTrue: [ ^Bag with: self ].
	div := self/2.
	( self even ) ifTrue: [ ^ Bag with: ((  2 factorize ) add: 2 withOccurrences: div - 1) ].
	! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'jul 4/27/2023 21:03:37'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'jul 4/27/2023 21:03:37'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'jul 4/27/2023 21:03:37'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'jul 4/27/2023 21:03:37'!
FAILURE!

!testRun: #TDDBabyStepsPrimeFactorsTest #test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2 stamp: 'jul 4/27/2023 21:03:37'!
FAILURE!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'jul 4/27/2023 21:03:39'!
FAILURE!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'jul 4/27/2023 21:03:39'!
FAILURE!
!Number methodsFor: 'arithmetic' stamp: 'jul 4/27/2023 21:06:39' prior: 50607684!
factorize
	| div |
	(self = 1) ifTrue: [^Bag new].
	(self = 2 or: self = 3) ifTrue: [ ^Bag with: self ].
	div := self/2.
	( self even ) ifTrue: [ ^ Bag with: ((  2 factorize ) add: 2 withOccurrences: div - 1) ].
	^10000! !

!testRun: #FloatTest #test32bitConversion stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FloatTest #test32bitConversion2 stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FloatTest #test32bitGradualUnderflow stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FloatTest #test32bitInfinities stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FloatTest #test32bitNaN stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FloatTest #test32bitRoundingMode stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FloatTest #test32bitZeros stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FloatTest #testAdd stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FloatTest #testArCosh stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FloatTest #testArSinh stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FloatTest #testArTanh stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FloatTest #testArcTan stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FloatTest #testArcTanNonPrimitive stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FloatTest #testAsTrueFraction stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FloatTest #testCeiling stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FloatTest #testCharacterization stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FloatTest #testComparisonWhenPrimitiveFails stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FloatTest #testComparisonWithFraction stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FloatTest #testCopy stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FloatTest #testCopySign stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FloatTest #testCos stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FloatTest #testCosh stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FloatTest #testDegreeCos stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FloatTest #testDegreeCosForExceptionalValues stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FloatTest #testDegreeSin stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FloatTest #testDegreeSinForExceptionalValues stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FloatTest #testDivide stamp: 'jul 4/27/2023 21:06:39'!
ERROR!

!testRun: #FloatTest #testDivide stamp: 'jul 4/27/2023 21:06:39'!
ERROR!

!testRun: #FloatTest #testDivide stamp: 'jul 4/27/2023 21:06:39'!
ERROR!

!testRun: #FloatTest #testDivide stamp: 'jul 4/27/2023 21:06:39'!
ERROR!

!testRun: #FloatTest #testDivide stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FloatTest #testE stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FloatTest #testEqualityComparison stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FloatTest #testEquals stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FloatTest #testExactAsString stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FloatTest #testExactAsString2 stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FloatTest #testExactStoreString stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FloatTest #testExactStoreString2 stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FloatTest #testExp stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FloatTest #testExpNonPrimitive stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FloatTest #testFloatRounded stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FloatTest #testFloatTruncated stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FloatTest #testFloatsAwayFrom stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FloatTest #testFloatsAwayFromWithPowersOfTwo stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FloatTest #testFloor stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FloatTest #testFloorLog2 stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FloatTest #testFractionAsFloat stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FloatTest #testFractionAsFloat2 stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FloatTest #testFractionAsFloatRoundsHalfToEven stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FloatTest #testFractionAsFloatWithUnderflow stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FloatTest #testFromStringDoesNotUnderflow stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FloatTest #testHashWithBigNegativeSmallInteger stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FloatTest #testHashWithBigSmallInteger stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FloatTest #testHashWithFraction stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FloatTest #testHashWithLargeNegativeInteger stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FloatTest #testHashWithLargePositiveInteger stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FloatTest #testHashWithSmallishLargeNegativeInteger stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FloatTest #testHashWithSmallishLargeNegativeInteger2 stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FloatTest #testHashWithSmallishLargePositiveInteger stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FloatTest #testHashWithSmallishLargePositiveInteger2 stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FloatTest #testHugeValues stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FloatTest #testInfinity1 stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FloatTest #testInfinity2 stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FloatTest #testInfinityTruncated stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FloatTest #testIntegerAsFloat stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FloatTest #testIsDenormalized stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FloatTest #testIsZero stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FloatTest #testLiteralEqualityOfNan stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FloatTest #testLiteralEqualityOfZeroAndNegativeZero stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FloatTest #testLn stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FloatTest #testLnForExceptionalValues stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FloatTest #testLnNonPrimitive stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FloatTest #testMaxExactInteger stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FloatTest #testMinimalAsString stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FloatTest #testMixedTypeArithmetic stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FloatTest #testMixedTypeComparison stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FloatTest #testMultiply stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FloatTest #testNaN1 stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FloatTest #testNaN2 stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FloatTest #testNaN3 stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FloatTest #testNaN4 stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FloatTest #testNaNCompare stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FloatTest #testNaNPropagationBinary stamp: 'jul 4/27/2023 21:06:39'!
FAILURE!

!testRun: #FloatTest #testNaNPropagationUnary stamp: 'jul 4/27/2023 21:06:39'!
FAILURE!

!testRun: #FloatTest #testNaNTruncated stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FloatTest #testNaNisLiteral stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FloatTest #testNextAwayFromZero stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FloatTest #testNextTowardsZero stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FloatTest #testNoIntegerHash stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FloatTest #testPartBits stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FloatTest #testPi stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FloatTest #testPositiveAndNegativeZero stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FloatTest #testPredecessorSuccessor stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FloatTest #testPredecessorSuccessor2 stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FloatTest #testPrimAdd stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FloatTest #testPrimArcTan stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FloatTest #testPrimDivideBy stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FloatTest #testPrimEqual stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FloatTest #testPrimExpAndLn stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FloatTest #testPrimExponent stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FloatTest #testPrimGreater stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FloatTest #testPrimGreaterEqual stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FloatTest #testPrimLess stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FloatTest #testPrimLessEqual stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FloatTest #testPrimMultiplyBy stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FloatTest #testPrimNotEqual stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FloatTest #testPrimSin stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FloatTest #testPrimSmallIntegerAsFloat stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FloatTest #testPrimSqrt stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FloatTest #testPrimSubtract stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FloatTest #testPrimTimesTwoPower stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FloatTest #testPrimTruncated stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FloatTest #testPrintShowingDecimalPlaces4 stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FloatTest #testPrintStringStress stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FloatTest #testReadFromManyDigits stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FloatTest #testReciprocal stamp: 'jul 4/27/2023 21:06:39'!
ERROR!

!testRun: #FloatTest #testReciprocal stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FloatTest #testRoundHalfAwayFromZero stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FloatTest #testRoundHalfToEven stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FloatTest #testRounded stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FloatTest #testSetOfFloat stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FloatTest #testSignificandAndExponent stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FloatTest #testSignificandAsInteger stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FloatTest #testSin stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FloatTest #testSinNonPrimitive stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FloatTest #testSinh stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FloatTest #testSomeNines stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FloatTest #testSqrt stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FloatTest #testSqrtNonPrimitive stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FloatTest #testStoreBase16 stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FloatTest #testStoreOn stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FloatTest #testStringAsFloatRoundsHalfToEven stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FloatTest #testStringAsFloatRoundsHalfToEven2 stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FloatTest #testStringAsNumber stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FloatTest #testStringAsNumber2 stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FloatTest #testSubtract stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FloatTest #testTanh stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FloatTest #testTimesTwoPowerGradualUnderflow stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FloatTest #testTimesTwoPowerOverflow stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FloatTest #testTimesTwoPowerUnderflow stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FloatTest #testTruncated stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FloatTest #testUlp stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FloatTest #testZeroAbs stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FloatTest #testZeroDividedByZero stamp: 'jul 4/27/2023 21:06:39'!
ERROR!

!testRun: #FloatTest #testZeroDividedByZero stamp: 'jul 4/27/2023 21:06:39'!
ERROR!

!testRun: #FloatTest #testZeroDividedByZero stamp: 'jul 4/27/2023 21:06:39'!
ERROR!

!testRun: #FloatTest #testZeroDividedByZero stamp: 'jul 4/27/2023 21:06:39'!
ERROR!

!testRun: #FloatTest #testZeroDividedByZero stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FloatTest #testZeroRaisedToNegativePower stamp: 'jul 4/27/2023 21:06:39'!
ERROR!

!testRun: #FloatTest #testZeroRaisedToNegativePower stamp: 'jul 4/27/2023 21:06:39'!
ERROR!

!testRun: #FloatTest #testZeroRaisedToNegativePower stamp: 'jul 4/27/2023 21:06:39'!
ERROR!

!testRun: #FloatTest #testZeroRaisedToNegativePower stamp: 'jul 4/27/2023 21:06:39'!
ERROR!

!testRun: #FloatTest #testZeroRaisedToNegativePower stamp: 'jul 4/27/2023 21:06:39'!
ERROR!

!testRun: #FloatTest #testZeroRaisedToNegativePower stamp: 'jul 4/27/2023 21:06:39'!
ERROR!

!testRun: #FloatTest #testZeroRaisedToNegativePower stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FloatTest #testZeroSign stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FloatTest #testZeroSignificandAsInteger stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #NumberTest #test01readFromWhenTheInitilValueIsNaNTheResultIsNaN stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #NumberTest #test02readFromWhenTheInitilValueIsInfinityTheResultIsInfinity stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #NumberTest #test03readFromWhenTheInitilValueIsMinusInfinityTheResultIsNegativeInfinity stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #NumberTest #test04readFromWhenTheInitilValueIsANegativeNumberTheResultIsThatNumberNegated stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #NumberTest #test05readFromWhenTheInitilValueIsJustANumberTheResultIsThatNumber stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #NumberTest #test06readFromWhenTheInitialValueIncludesRadixItIsConvertedWithTheIndicatedRadixBase stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #NumberTest #test07readFromWhenTheInitialValueIncludesAnInvalidRadixItRaisesAnError stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #NumberTest #test08readFromWhenTheInitialValueIncludesANegativeRadixItConvertsTheNumberWithTheIndicatedRadixBase stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #NumberTest #test09readFromWhenTheInitialValueIsEmptyItRaisesAnError stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #NumberTest #testFractionPart stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #NumberTest #testHash1 stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #NumberTest #testHash2 stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #NumberTest #testHash3 stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #NumberTest #testIntegerPart stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #NumberTest #testOne stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #NumberTest #testPrintShowingDecimalPlaces stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #NumberTest #testPrintShowingDecimalPlaces2 stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #NumberTest #testPrintShowingDecimalPlaces3 stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #NumberTest #testRaisedTo stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #NumberTest #testRaisedToInteger stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #NumberTest #testRaisedToIntegerWithFloats stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #NumberTest #testReadFrom stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #NumberTest #testReciprocal stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #NumberTest #testZeroDivideHandler stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FractionTest #testCeiling stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FractionTest #testDegreeCos2 stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FractionTest #testDegreeSin2 stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FractionTest #testExactRaisedTo stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FractionTest #testExactSqrt stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FractionTest #testFloor stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FractionTest #testFloorLog stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FractionTest #testFloorLogExactness stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FractionTest #testFractionPrinting stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FractionTest #testHash stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FractionTest #testInexactRaisedTo stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FractionTest #testInexactSqrt stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FractionTest #testIntegerWholeDivision stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FractionTest #testIntegerWholeMultiplication stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FractionTest #testIsType stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FractionTest #testLn stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FractionTest #testLog stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FractionTest #testNthRoot stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FractionTest #testReciprocal stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FractionTest #testRoundHalfAwayFromZero stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FractionTest #testRoundHalfToEven stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FractionTest #testRounded stamp: 'jul 4/27/2023 21:06:39'!
PASSED!

!testRun: #FractionTest #testThatFractionDenominatorIsPositive stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #FractionTest #testThatFractionIsReduced stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #FractionTest #testTruncated stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #FractionTest #testWholeDifference stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #FractionTest #testWholeDivision stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #FractionTest #testWholeMultiplication stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #FractionTest #testWholeSum stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #IntegerTest #test01readFromWithEmptyStringRaisesAnError stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #IntegerTest #test02readFromWithInvalidStringRaisesAnError stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashLnLn stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashLnLp stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashLnSn stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashLnSp stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashLpLn stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashLpLp stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashLpSn stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashLpSp stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashSnLn stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashSnLp stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashSnSn stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashSnSp stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashSpLn stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashSpLp stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashSpSn stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashSpSp stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #IntegerTest #testBenchFib stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #IntegerTest #testBigReceiverInexactNthRoot stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #IntegerTest #testBigReceiverInexactSqrt stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #IntegerTest #testBitAt stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #IntegerTest #testBitLogic stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #IntegerTest #testBitReversal stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #IntegerTest #testBitReversalCorrectClass stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #IntegerTest #testCrossSumBase stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #IntegerTest #testDifferentBases stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #IntegerTest #testDivLnLn stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #IntegerTest #testDivLnLp stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #IntegerTest #testDivLnSn stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #IntegerTest #testDivLnSp stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #IntegerTest #testDivLpLn stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #IntegerTest #testDivLpLp stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #IntegerTest #testDivLpSn stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #IntegerTest #testDivLpSp stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #IntegerTest #testDivSnLn stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #IntegerTest #testDivSnLp stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #IntegerTest #testDivSnSn stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #IntegerTest #testDivSnSp stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #IntegerTest #testDivSpLn stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #IntegerTest #testDivSpLp stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #IntegerTest #testDivSpSn stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #IntegerTest #testDivSpSp stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #IntegerTest #testEven stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #IntegerTest #testExactRaisedTo stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #IntegerTest #testExactSqrt stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #IntegerTest #testFloorLog stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #IntegerTest #testFloorLogExactness stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #IntegerTest #testGCDAndLCM stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #IntegerTest #testGCDExample stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #IntegerTest #testGCDProperties stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #IntegerTest #testHighBit stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #IntegerTest #testHighBitOfMagnitude stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #IntegerTest #testIntegerDivision stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #IntegerTest #testIntegerPadding stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #IntegerTest #testIntegerReadFrom stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #IntegerTest #testIsInteger stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #IntegerTest #testIsPowerOfTwo stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #IntegerTest #testIsPowerOfTwoM6873 stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #IntegerTest #testIsPrime stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #IntegerTest #testIsProbablyPrime stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #IntegerTest #testLCMExample stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #IntegerTest #testLCMProperties stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #IntegerTest #testLargePrimesUpTo stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #IntegerTest #testLn stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #IntegerTest #testLog stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #IntegerTest #testLowBit stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #IntegerTest #testModLnLn stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #IntegerTest #testModLnLp stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #IntegerTest #testModLnSn stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #IntegerTest #testModLnSp stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #IntegerTest #testModLpLn stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #IntegerTest #testModLpLp stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #IntegerTest #testModLpSn stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #IntegerTest #testModLpSp stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #IntegerTest #testModSnLn stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #IntegerTest #testModSnLp stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #IntegerTest #testModSnSn stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #IntegerTest #testModSnSp stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #IntegerTest #testModSpLn stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #IntegerTest #testModSpLp stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #IntegerTest #testModSpSn stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #IntegerTest #testModSpSp stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #IntegerTest #testMontgomeryMultiplication stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #IntegerTest #testNegativeIntegerPrinting stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #IntegerTest #testNew stamp: 'jul 4/27/2023 21:06:40'!
ERROR!

!testRun: #IntegerTest #testNew stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #IntegerTest #testNthRoot stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #IntegerTest #testNthRootErrorConditions stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #IntegerTest #testNthRootExactness stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #IntegerTest #testNthRootExactnessForHugeValue stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #IntegerTest #testNthRootImmuneToDoubleRounding stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #IntegerTest #testNthRootTruncated stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #IntegerTest #testNumberOfDigits stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #IntegerTest #testPositiveIntegerPrinting stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #IntegerTest #testPrimesUpTo stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #IntegerTest #testPrintOnBaseShowRadix stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #IntegerTest #testPrintStringBase stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #IntegerTest #testQuoLnLn stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #IntegerTest #testQuoLnLp stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #IntegerTest #testQuoLnSn stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #IntegerTest #testQuoLnSp stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #IntegerTest #testQuoLpLn stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #IntegerTest #testQuoLpLp stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #IntegerTest #testQuoLpSn stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #IntegerTest #testQuoLpSp stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #IntegerTest #testQuoRem stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #IntegerTest #testQuoSnLn stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #IntegerTest #testQuoSnLp stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #IntegerTest #testQuoSnSn stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #IntegerTest #testQuoSnSp stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #IntegerTest #testQuoSpLn stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #IntegerTest #testQuoSpLp stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #IntegerTest #testQuoSpSn stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #IntegerTest #testQuoSpSp stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #IntegerTest #testRaisedToModulo stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #IntegerTest #testRange stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #IntegerTest #testReadFrom stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #IntegerTest #testRemLnLn stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #IntegerTest #testRemLnLp stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #IntegerTest #testRemLnSn stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #IntegerTest #testRemLnSp stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #IntegerTest #testRemLpLn stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #IntegerTest #testRemLpLp stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #IntegerTest #testRemLpSn stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #IntegerTest #testRemLpSp stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #IntegerTest #testRemSnLn stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #IntegerTest #testRemSnLp stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #IntegerTest #testRemSnSn stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #IntegerTest #testRemSnSp stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #IntegerTest #testRemSpLn stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #IntegerTest #testRemSpLp stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #IntegerTest #testRemSpSn stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #IntegerTest #testRemSpSp stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #IntegerTest #testRomanPrinting stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #IntegerTest #testSlashSlashLnLn stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #IntegerTest #testSlashSlashLnLp stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #IntegerTest #testSlashSlashLnSn stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #IntegerTest #testSlashSlashLnSp stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #IntegerTest #testSlashSlashLpLn stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #IntegerTest #testSlashSlashLpLp stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #IntegerTest #testSlashSlashLpSn stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #IntegerTest #testSlashSlashLpSp stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #IntegerTest #testSlashSlashSnLn stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #IntegerTest #testSlashSlashSnLp stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #IntegerTest #testSlashSlashSnSn stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #IntegerTest #testSlashSlashSnSp stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #IntegerTest #testSlashSlashSpLn stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #IntegerTest #testSlashSlashSpLp stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #IntegerTest #testSlashSlashSpSn stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #IntegerTest #testSlashSlashSpSp stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #IntegerTest #testSqrtFloor stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #IntegerTest #testStringAsNumber stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #IntegerTest #testTwoComplementBitLogicWithCarry stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #IntegerTest #testTwoComplementRightShift stamp: 'jul 4/27/2023 21:06:40'!
PASSED!

!testRun: #LaggedFibonacciRandomTest #testNext stamp: 'jul 4/27/2023 21:06:41'!
PASSED!

!testRun: #LaggedFibonacciRandomTest #testNextBits stamp: 'jul 4/27/2023 21:06:41'!
PASSED!

!testRun: #LaggedFibonacciRandomTest #testNextBitsInvalid stamp: 'jul 4/27/2023 21:06:41'!
PASSED!

!testRun: #LaggedFibonacciRandomTest #testNextInteger stamp: 'jul 4/27/2023 21:06:41'!
PASSED!

!testRun: #LaggedFibonacciRandomTest #testNextIntegerInvalid stamp: 'jul 4/27/2023 21:06:41'!
PASSED!

!testRun: #LaggedFibonacciRandomTest #testRandomLargeInteger1 stamp: 'jul 4/27/2023 21:06:41'!
PASSED!

!testRun: #LaggedFibonacciRandomTest #testRandomLargeInteger2 stamp: 'jul 4/27/2023 21:06:41'!
PASSED!

!testRun: #LaggedFibonacciRandomTest #testSeedAndRepeatability stamp: 'jul 4/27/2023 21:06:41'!
PASSED!

!testRun: #LaggedFibonacciRandomTest #testSetAtRandom stamp: 'jul 4/27/2023 21:06:42'!
PASSED!

!testRun: #LaggedFibonacciRandomTest #testSimpleBuckets stamp: 'jul 4/27/2023 21:06:42'!
PASSED!

!testRun: #LargeNegativeIntegerTest #testCompactClassIndex stamp: 'jul 4/27/2023 21:06:42'!
PASSED!

!testRun: #LargeNegativeIntegerTest #testDenormalizedPrintString stamp: 'jul 4/27/2023 21:06:42'!
PASSED!

!testRun: #LargeNegativeIntegerTest #testDigitAt stamp: 'jul 4/27/2023 21:06:42'!
PASSED!

!testRun: #LargeNegativeIntegerTest #testDigitAtPut stamp: 'jul 4/27/2023 21:06:42'!
PASSED!

!testRun: #LargeNegativeIntegerTest #testDigitLength stamp: 'jul 4/27/2023 21:06:42'!
PASSED!

!testRun: #LargeNegativeIntegerTest #testEmptyTemplate stamp: 'jul 4/27/2023 21:06:42'!
PASSED!

!testRun: #LargeNegativeIntegerTest #testMinimumNegativeIntegerArithmetic stamp: 'jul 4/27/2023 21:06:42'!
PASSED!

!testRun: #LargeNegativeIntegerTest #testReplaceFromToWithStartingAt stamp: 'jul 4/27/2023 21:06:42'!
PASSED!

!testRun: #LargePositiveIntegerTest #testBitShift stamp: 'jul 4/27/2023 21:06:42'!
PASSED!

!testRun: #LargePositiveIntegerTest #testCompactClassIndex stamp: 'jul 4/27/2023 21:06:42'!
PASSED!

!testRun: #LargePositiveIntegerTest #testDenormalizedPrintString stamp: 'jul 4/27/2023 21:06:42'!
PASSED!

!testRun: #LargePositiveIntegerTest #testDigitAt stamp: 'jul 4/27/2023 21:06:42'!
PASSED!

!testRun: #LargePositiveIntegerTest #testDigitAtPut stamp: 'jul 4/27/2023 21:06:42'!
PASSED!

!testRun: #LargePositiveIntegerTest #testDigitLength stamp: 'jul 4/27/2023 21:06:42'!
PASSED!

!testRun: #LargePositiveIntegerTest #testEmptyTemplate stamp: 'jul 4/27/2023 21:06:42'!
PASSED!

!testRun: #LargePositiveIntegerTest #testLargeSqrtFloor stamp: 'jul 4/27/2023 21:06:42'!
PASSED!

!testRun: #LargePositiveIntegerTest #testMultDicAddSub stamp: 'jul 4/27/2023 21:06:42'!
PASSED!

!testRun: #LargePositiveIntegerTest #testNormalize stamp: 'jul 4/27/2023 21:06:42'!
PASSED!

!testRun: #LargePositiveIntegerTest #testReplaceFromToWithStartingAt stamp: 'jul 4/27/2023 21:06:42'!
PASSED!

!testRun: #ParkMiller88RandomTest #testNext stamp: 'jul 4/27/2023 21:06:42'!
PASSED!

!testRun: #ParkMiller88RandomTest #testNextBits stamp: 'jul 4/27/2023 21:06:42'!
PASSED!

!testRun: #ParkMiller88RandomTest #testNextBitsInvalid stamp: 'jul 4/27/2023 21:06:42'!
PASSED!

!testRun: #ParkMiller88RandomTest #testNextInteger stamp: 'jul 4/27/2023 21:06:42'!
PASSED!

!testRun: #ParkMiller88RandomTest #testNextIntegerInvalid stamp: 'jul 4/27/2023 21:06:42'!
PASSED!

!testRun: #ParkMiller88RandomTest #testParkMillerCorrectness stamp: 'jul 4/27/2023 21:06:42'!
PASSED!

!testRun: #ParkMiller88RandomTest #testParkMillerInitialValues stamp: 'jul 4/27/2023 21:06:42'!
PASSED!

!testRun: #ParkMiller88RandomTest #testParkMillerSeedCornerCases stamp: 'jul 4/27/2023 21:06:42'!
PASSED!

!testRun: #ParkMiller88RandomTest #testParkMillerSeedRange stamp: 'jul 4/27/2023 21:06:42'!
PASSED!

!testRun: #ParkMiller88RandomTest #testRandomLargeInteger1 stamp: 'jul 4/27/2023 21:06:42'!
PASSED!

!testRun: #ParkMiller88RandomTest #testRandomLargeInteger2 stamp: 'jul 4/27/2023 21:06:42'!
PASSED!

!testRun: #ParkMiller88RandomTest #testSeedAndRepeatability stamp: 'jul 4/27/2023 21:06:42'!
PASSED!

!testRun: #ParkMiller88RandomTest #testSetAtRandom stamp: 'jul 4/27/2023 21:06:42'!
PASSED!

!testRun: #ParkMiller88RandomTest #testSimpleBuckets stamp: 'jul 4/27/2023 21:06:43'!
PASSED!

!testRun: #ParkMiller93RandomTest #testNext stamp: 'jul 4/27/2023 21:06:43'!
PASSED!

!testRun: #ParkMiller93RandomTest #testNextBits stamp: 'jul 4/27/2023 21:06:43'!
PASSED!

!testRun: #ParkMiller93RandomTest #testNextBitsInvalid stamp: 'jul 4/27/2023 21:06:43'!
PASSED!

!testRun: #ParkMiller93RandomTest #testNextInteger stamp: 'jul 4/27/2023 21:06:43'!
PASSED!

!testRun: #ParkMiller93RandomTest #testNextIntegerInvalid stamp: 'jul 4/27/2023 21:06:43'!
PASSED!

!testRun: #ParkMiller93RandomTest #testRandomLargeInteger1 stamp: 'jul 4/27/2023 21:06:43'!
PASSED!

!testRun: #ParkMiller93RandomTest #testRandomLargeInteger2 stamp: 'jul 4/27/2023 21:06:43'!
PASSED!

!testRun: #ParkMiller93RandomTest #testSeedAndRepeatability stamp: 'jul 4/27/2023 21:06:43'!
PASSED!

!testRun: #ParkMiller93RandomTest #testSetAtRandom stamp: 'jul 4/27/2023 21:06:43'!
PASSED!

!testRun: #ParkMiller93RandomTest #testSimpleBuckets stamp: 'jul 4/27/2023 21:06:43'!
PASSED!

!testRun: #TrieUnicodeTest #test01 stamp: 'jul 4/27/2023 21:06:43'!
PASSED!

!testRun: #TrieUnicodeTest #test02 stamp: 'jul 4/27/2023 21:06:43'!
PASSED!

!testRun: #TrieUnicodeTest #test03 stamp: 'jul 4/27/2023 21:06:43'!
PASSED!

!testRun: #SmallIntegerTest #testBasicNew stamp: 'jul 4/27/2023 21:06:43'!
ERROR!

!testRun: #SmallIntegerTest #testBasicNew stamp: 'jul 4/27/2023 21:06:43'!
PASSED!

!testRun: #SmallIntegerTest #testDivide stamp: 'jul 4/27/2023 21:06:43'!
PASSED!

!testRun: #SmallIntegerTest #testEven stamp: 'jul 4/27/2023 21:06:43'!
PASSED!

!testRun: #SmallIntegerTest #testMaxVal stamp: 'jul 4/27/2023 21:06:43'!
PASSED!

!testRun: #SmallIntegerTest #testMinVal stamp: 'jul 4/27/2023 21:06:43'!
PASSED!

!testRun: #SmallIntegerTest #testNew stamp: 'jul 4/27/2023 21:06:43'!
ERROR!

!testRun: #SmallIntegerTest #testNew stamp: 'jul 4/27/2023 21:06:43'!
PASSED!

!testRun: #SmallIntegerTest #testOdd stamp: 'jul 4/27/2023 21:06:43'!
PASSED!

!testRun: #SmallIntegerTest #testPrintPaddedWith stamp: 'jul 4/27/2023 21:06:43'!
PASSED!

!testRun: #SmallIntegerTest #testPrintString stamp: 'jul 4/27/2023 21:06:43'!
PASSED!

!testRun: #SmallIntegerTest #testZeroRaisedToNegativePower stamp: 'jul 4/27/2023 21:06:43'!
PASSED!
!Number methodsFor: 'arithmetic' stamp: 'jul 4/27/2023 21:06:52' prior: 50607723!
factorize
	| div |
	(self = 1) ifTrue: [^Bag new].
	(self = 2 or: self = 3) ifTrue: [ ^Bag with: self ].
	div := self/2.
	( self even ) ifTrue: [ ^ Bag with: ((  2 factorize ) add: 2 withOccurrences: div - 1) ].
! !
!Number methodsFor: 'arithmetic' stamp: 'jul 4/27/2023 21:07:23' prior: 50608902!
factorize
	| div |
	(self = 1) ifTrue: [^Bag new].
	(self = 2 or: self = 3) ifTrue: [ ^Bag with: self ].
	div := self/2.
	( self even ) ifTrue: [ ^(Bag with: 2) add: 2 withOccurrences: div - 1 ].
! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'jul 4/27/2023 21:07:41'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'jul 4/27/2023 21:07:41'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'jul 4/27/2023 21:07:41'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'jul 4/27/2023 21:07:41'!
FAILURE!

!testRun: #TDDBabyStepsPrimeFactorsTest #test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2 stamp: 'jul 4/27/2023 21:07:41'!
FAILURE!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'jul 4/27/2023 21:07:45'!
FAILURE!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'jul 4/27/2023 21:07:45'!
FAILURE!
!Number methodsFor: 'arithmetic' stamp: 'jul 4/27/2023 21:08:43' prior: 50608912!
factorize
	| div |
	(self = 1) ifTrue: [^Bag new].
	(self = 2 or: self = 3) ifTrue: [ ^Bag with: self ].
	div := self/2.
	( self even ) ifTrue: [ ^(Bag with: 2) addAll: div factorize ].
! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'jul 4/27/2023 21:08:57'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'jul 4/27/2023 21:08:57'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'jul 4/27/2023 21:08:57'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'jul 4/27/2023 21:08:57'!
FAILURE!

!testRun: #TDDBabyStepsPrimeFactorsTest #test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2 stamp: 'jul 4/27/2023 21:08:57'!
FAILURE!
!Number methodsFor: 'arithmetic' stamp: 'jul 4/27/2023 21:16:58' prior: 50608951!
factorize
	
	self = 1 ifTrue: [ ^Bag new ].
	self <=3 ifTrue: [^Bag with: self].
"	| div |
	(self = 1) ifTrue: [^Bag new].
	(self = 2 or: self = 3) ifTrue: [ ^Bag with: self ].
	div := self/2.
	
	( self even ) ifTrue: [ ^(Bag with: 2) addAll: div factorize ]."
! !
!Number methodsFor: 'arithmetic' stamp: 'jul 4/27/2023 21:17:14' prior: 50608980!
factorize
	
	| factors |
	self = 1 ifTrue: [ ^Bag new ].
	self <=3 ifTrue: [^Bag with: self].
	
	factors := Bag new.
"	| div |
	(self = 1) ifTrue: [^Bag new].
	(self = 2 or: self = 3) ifTrue: [ ^Bag with: self ].
	div := self/2.
	
	( self even ) ifTrue: [ ^(Bag with: 2) addAll: div factorize ]."
! !
!Number methodsFor: 'arithmetic' stamp: 'jul 4/27/2023 21:19:08' prior: 50608991!
factorize
	
	| factors |
	self = 1 ifTrue: [ ^Bag new ].
	self <=3 ifTrue: [^Bag with: self].
	
	factors := Bag new.
	(self isDivisibleBy: 2) ifTrue: [ | remainingNumber |
		factors add: 2.
		remainingNumber := self/2.
		remainingNumber > 1 ifTrue: [factors add: remainingNumber]
		]
	^factors
"	| div |
	(self = 1) ifTrue: [^Bag new].
	(self = 2 or: self = 3) ifTrue: [ ^Bag with: self ].
	div := self/2.
	
	( self even ) ifTrue: [ ^(Bag with: 2) addAll: div factorize ]."
! !
!Number methodsFor: 'arithmetic' stamp: 'jul 4/27/2023 21:19:49' prior: 50609003!
factorize
	
	| factors remainingNumber |
	self = 1 ifTrue: [ ^Bag new ].
	self <=3 ifTrue: [^Bag with: self].
	
	factors := Bag new.
	(self isDivisibleBy: 2) ifTrue: [
		factors add: 2.
		remainingNumber := self/2.
		remainingNumber > 1 ifTrue: [factors add: remainingNumber]
		]
	^factors
"	| div |
	(self = 1) ifTrue: [^Bag new].
	(self = 2 or: self = 3) ifTrue: [ ^Bag with: self ].
	div := self/2.
	
	( self even ) ifTrue: [ ^(Bag with: 2) addAll: div factorize ]."
! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'jul 4/27/2023 21:19:56'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'jul 4/27/2023 21:19:56'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'jul 4/27/2023 21:19:56'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'jul 4/27/2023 21:19:56'!
ERROR!

!testRun: #TDDBabyStepsPrimeFactorsTest #test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2 stamp: 'jul 4/27/2023 21:19:56'!
ERROR!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'jul 4/27/2023 21:20:06'!
ERROR!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'jul 4/27/2023 21:20:06'!
ERROR!
!Number methodsFor: 'arithmetic' stamp: 'jul 4/27/2023 21:20:29' prior: 50609021!
factorize
	
	| factors remainingNumber |
	self = 1 ifTrue: [ ^Bag new ].
	self <=3 ifTrue: [^Bag with: self].
	
	factors := Bag new.
	(self isDivisibleBy: 2) ifTrue: [
		factors add: 2.
		remainingNumber := self/2.
		remainingNumber > 1 ifTrue: [factors add: remainingNumber]
		].
	^factors
"	| div |
	(self = 1) ifTrue: [^Bag new].
	(self = 2 or: self = 3) ifTrue: [ ^Bag with: self ].
	div := self/2.
	
	( self even ) ifTrue: [ ^(Bag with: 2) addAll: div factorize ]."
! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'jul 4/27/2023 21:20:39'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'jul 4/27/2023 21:20:39'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'jul 4/27/2023 21:20:39'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'jul 4/27/2023 21:20:39'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2 stamp: 'jul 4/27/2023 21:20:39'!
FAILURE!

!testRun: #TDDBabyStepsPrimeFactorsTest #test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2 stamp: 'jul 4/27/2023 21:20:39'!
FAILURE!
!Number methodsFor: 'arithmetic' stamp: 'jul 4/27/2023 21:22:24' prior: 50609068!
factorize
	
	| factors remainingNumber |
	self = 1 ifTrue: [ ^Bag new ].
	self <=3 ifTrue: [^Bag with: self].
	
	factors := Bag new.
	(self isDivisibleBy: 2) ifTrue: [
		remainingNumber := self/2.
		factors add: 2 withOccurrences: remainingNumber .
		"remainingNumber > 1 ifTrue: [factors add: remainingNumber]"
		].
	^factors
"	| div |
	(self = 1) ifTrue: [^Bag new].
	(self = 2 or: self = 3) ifTrue: [ ^Bag with: self ].
	div := self/2.
	
	( self even ) ifTrue: [ ^(Bag with: 2) addAll: div factorize ]."
! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'jul 4/27/2023 21:22:37'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'jul 4/27/2023 21:22:37'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'jul 4/27/2023 21:22:37'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'jul 4/27/2023 21:22:37'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2 stamp: 'jul 4/27/2023 21:22:37'!
FAILURE!

!testRun: #TDDBabyStepsPrimeFactorsTest #test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2 stamp: 'jul 4/27/2023 21:22:37'!
FAILURE!
!Number methodsFor: 'arithmetic' stamp: 'jul 4/27/2023 21:22:55' prior: 50609111!
factorize
	
	| factors remainingNumber |
	self = 1 ifTrue: [ ^Bag new ].
	self <=3 ifTrue: [^Bag with: self].
	
	factors := Bag new.
	(self isDivisibleBy: 2) ifTrue: [
		remainingNumber := self/2.
		factors add: 2 withOccurrences: remainingNumber -1 .
		"remainingNumber > 1 ifTrue: [factors add: remainingNumber]"
		].
	^factors
"	| div |
	(self = 1) ifTrue: [^Bag new].
	(self = 2 or: self = 3) ifTrue: [ ^Bag with: self ].
	div := self/2.
	
	( self even ) ifTrue: [ ^(Bag with: 2) addAll: div factorize ]."
! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'jul 4/27/2023 21:23:01'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'jul 4/27/2023 21:23:01'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'jul 4/27/2023 21:23:01'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'jul 4/27/2023 21:23:01'!
FAILURE!

!testRun: #TDDBabyStepsPrimeFactorsTest #test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2 stamp: 'jul 4/27/2023 21:23:01'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'jul 4/27/2023 21:23:01'!
FAILURE!

TDDBabyStepsGameAnagrams start !

!classDefinition: #TDDBabyStepsAnagramsTest category: 'TDDBabyStepsGameAnagrams' stamp: 'jul 4/27/2023 21:24:21'!
TestCase subclass: #TDDBabyStepsAnagramsTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGameAnagrams'!
!TDDBabyStepsAnagramsTest methodsFor: 'tests' stamp: 'jul 4/27/2023 21:24:41'!
test01EmptyStringAnagramIsJustACollectionWithTheEmptyString

	self assert: (Set with: '') equals: '' anagrams
	! !

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'jul 4/27/2023 21:34:25'!
ERROR!

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'jul 4/27/2023 21:34:25'!
ERROR!
!String methodsFor: 'paragraph support' stamp: 'jul 4/27/2023 21:34:47'!
anagrams
	self shouldBeImplemented.! !
!String methodsFor: 'paragraph support' stamp: 'jul 4/27/2023 21:35:37' prior: 50609223!
anagrams
	^ Set with: ''! !

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'jul 4/27/2023 21:35:42'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'jul 4/27/2023 21:35:50'!
PASSED!
!TDDBabyStepsAnagramsTest methodsFor: 'tests' stamp: 'jul 4/27/2023 21:35:50'!
test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString

	self assert: (Set with:'a') equals: 'a' anagrams
	! !

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'jul 4/27/2023 21:35:50'!
FAILURE!

!methodRemoval: TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'jul 4/27/2023 21:35:50'!
test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString

	self assert: (Set with:'a') equals: 'a' anagrams
	!
!TDDBabyStepsAnagramsTest methodsFor: 'tests' stamp: 'jul 4/27/2023 21:35:50'!
test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString

	self assert: (Set with:'a') equals: 'a' anagrams
	! !

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'jul 4/27/2023 21:35:50'!
FAILURE!
!String methodsFor: 'paragraph support' stamp: 'jul 4/27/2023 21:38:46' prior: 50609227!
anagrams
	self size = 1 ifTrue: [^Set with: self]! !

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'jul 4/27/2023 21:38:51'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'jul 4/27/2023 21:38:51'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'jul 4/27/2023 21:38:51'!
FAILURE!
!String methodsFor: 'paragraph support' stamp: 'jul 4/27/2023 21:39:42' prior: 50609272!
anagrams
	self = '' ifTrue: [^Set new].
	self size = 1 ifTrue: [^Set with: self]! !

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'jul 4/27/2023 21:39:45'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'jul 4/27/2023 21:39:45'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'jul 4/27/2023 21:39:45'!
FAILURE!
!String methodsFor: 'paragraph support' stamp: 'jul 4/27/2023 21:40:01' prior: 50609290!
anagrams
	self = '' ifTrue: [^Set with: self].
	self size = 1 ifTrue: [^Set with: self]! !

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'jul 4/27/2023 21:40:06'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'jul 4/27/2023 21:40:06'!
PASSED!
!TDDBabyStepsAnagramsTest methodsFor: 'tests' stamp: 'jul 4/27/2023 21:40:06'!
test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped

	self assert: (Set with:'ab' with: 'ba') equals: 'ab' anagrams
	! !

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'jul 4/27/2023 21:40:06'!
FAILURE!

!methodRemoval: TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'jul 4/27/2023 21:40:06'!
test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped

	self assert: (Set with:'ab' with: 'ba') equals: 'ab' anagrams
	!
!TDDBabyStepsAnagramsTest methodsFor: 'tests' stamp: 'jul 4/27/2023 21:40:06'!
test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped

	self assert: (Set with:'ab' with: 'ba') equals: 'ab' anagrams
	! !

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'jul 4/27/2023 21:40:06'!
FAILURE!
!String methodsFor: 'paragraph support' stamp: 'jul 4/27/2023 21:40:52' prior: 50609309!
anagrams
	self size <= 1 ifTrue: [^Set with: self]! !
!String methodsFor: 'paragraph support' stamp: 'jul 4/27/2023 21:41:53' prior: 50609357!
anagrams
	self size <= 1 ifTrue: [^Set with: self].
	^(Set with: self) add: self reverse
	! !

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'jul 4/27/2023 21:42:05'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'jul 4/27/2023 21:42:05'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'jul 4/27/2023 21:42:05'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'jul 4/27/2023 21:42:05'!
FAILURE!
!String methodsFor: 'paragraph support' stamp: 'jul 4/27/2023 21:45:39' prior: 50609362!
anagrams
	self size <= 1 ifTrue: [^Set with: self].
	^((Set with: self) add: self reverse)
	! !

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'jul 4/27/2023 21:45:56'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'jul 4/27/2023 21:45:56'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'jul 4/27/2023 21:45:56'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'jul 4/27/2023 21:45:56'!
FAILURE!
!String methodsFor: 'paragraph support' stamp: 'jul 4/27/2023 21:47:25' prior: 50609387!
anagrams
	| anagramas |
	 
	self size <= 1 ifTrue: [^Set with: self].
	
	anagramas := Set new.
	anagramas add: self.
	anagramas add: (self reverse ).
	^anagramas 
	
	^((Set with: self) add: self reverse)
	! !
!String methodsFor: 'paragraph support' stamp: 'jul 4/27/2023 21:47:31' prior: 50609412!
anagrams
	| anagramas |
	 
	self size <= 1 ifTrue: [^Set with: self].
	
	anagramas := Set new.
	anagramas add: self.
	anagramas add: (self reverse ).
	^anagramas 
	
	"^((Set with: self) add: self reverse)"
	! !

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'jul 4/27/2023 21:47:33'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'jul 4/27/2023 21:47:33'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'jul 4/27/2023 21:47:33'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'jul 4/27/2023 21:47:41'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'jul 4/27/2023 21:47:41'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'jul 4/27/2023 21:47:41'!
PASSED!
!TDDBabyStepsAnagramsTest methodsFor: 'tests' stamp: 'jul 4/27/2023 21:47:41'!
test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations

	| anagrams |
	
	anagrams := Set new.
	anagrams add: 'abc'.
	anagrams add: 'acb'.
	anagrams add: 'bac'.
	anagrams add: 'bca'.
	anagrams add: 'cab'.
	anagrams add: 'cba'.

	self assert: anagrams equals: 'abc' anagrams
	! !

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'jul 4/27/2023 21:47:41'!
FAILURE!

!methodRemoval: TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'jul 4/27/2023 21:47:41'!
test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations

	| anagrams |
	
	anagrams := Set new.
	anagrams add: 'abc'.
	anagrams add: 'acb'.
	anagrams add: 'bac'.
	anagrams add: 'bca'.
	anagrams add: 'cab'.
	anagrams add: 'cba'.

	self assert: anagrams equals: 'abc' anagrams
	!
!TDDBabyStepsAnagramsTest methodsFor: 'tests' stamp: 'jul 4/27/2023 21:47:41'!
test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations

	| anagrams |
	
	anagrams := Set new.
	anagrams add: 'abc'.
	anagrams add: 'acb'.
	anagrams add: 'bac'.
	anagrams add: 'bca'.
	anagrams add: 'cab'.
	anagrams add: 'cba'.

	self assert: anagrams equals: 'abc' anagrams
	! !

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'jul 4/27/2023 21:47:41'!
FAILURE!
!String methodsFor: 'paragraph support' stamp: 'jul 4/27/2023 21:56:10' prior: 50609422!
anagrams
	| anagramas |
	 
	self size <= 1 ifTrue: [^Set with: self].
	anagramas := Set new.
	anagramas add: self.
	anagramas add: (self reverse ).
	^anagramas 
	
	
	! !

----SNAPSHOT----(27 April 2023 21:56:14) CuisUniversity-5706.image priorSource: 8812834!

----STARTUP---- (1 May 2023 08:39:27) as /home/julian/Escritorio/linux64/CuisUniversity-5706.image!


----SNAPSHOT----(1 May 2023 08:39:31) CuisUniversity-5706.image priorSource: 8891625!